FROM salehmir/jesse:latest

WORKDIR /home

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
RUN apt-get update && \
    apt-get install -y git netcat-openbsd curl python3-pip && \
    rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ñ–∞–π–ª—ã
COPY . /home/

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ò–ò –∏ Telegram
RUN pip3 install --no-cache-dir --root-user-action=ignore \
    python-telegram-bot>=20.0 \
    openai>=1.0.0 \
    aiohttp>=3.8.0 \
    asyncio-mqtt \
    redis>=4.5.0 \
    pydantic>=2.0.0 \
    pandas>=1.5.0 \
    numpy>=1.24.0 \
    structlog \
    python-dotenv

# –í–°–¢–†–û–ï–ù–ù–´–ô –ü–û–õ–ù–´–ô –ö–û–î bot_runner.py
COPY <<EOF /home/bot_runner_complete.py
# bot_runner.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è python-telegram-bot 20.0+
import os
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError, RetryAfter
from datetime import datetime
import asyncio
import concurrent.futures

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('/tmp/telegram_bot_complete.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

class TelegramBot:
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.logger = setup_logging()
        
        if not self.bot_token or not self.chat_id:
            raise ValueError("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        self.logger.info(f"ü§ñ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"Bot token: {self.bot_token[:10]}...")
        self.logger.info(f"Chat ID: {self.chat_id}")

    async def command_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_info = f"{update.effective_user.username} (ID: {update.effective_chat.id})"
            self.logger.info(f"üöÄ /start –æ—Ç {user_info}")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è python-telegram-bot 20.0+
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
                [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            current_time = datetime.now().strftime("%H:%M:%S")
            current_date = datetime.now().strftime("%Y-%m-%d")
            
            welcome_text = (
                "ü§ñ <b>AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\\n\\n"
                "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫!</b>\\n\\n"
                "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\\n"
                "‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω\\n"
                "‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã\\n"
                "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\\n\\n"
                f"‚è∞ –í—Ä–µ–º—è: <code>{current_time}</code>\\n"
                f"üìÖ –î–∞—Ç–∞: <code>{current_date}</code>\\n\\n"
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
            )
            
            await update.message.reply_text(
                welcome_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}")
            try:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}...")
            except:
                pass

    async def command_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            self.logger.info("üìñ /help –∫–æ–º–∞–Ω–¥–∞")
            
            help_text = (
                "üìñ <b>–°–ü–†–ê–í–ö–ê AI Trading Bot v2.0</b>\\n\\n"
                "<b>üéØ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:</b>\\n"
                "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\\n"
                "‚Ä¢ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\\n"
                "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º\\n"
                "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏\\n\\n"
                "<b>ü§ñ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ò–ò:</b>\\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\\n"
                "‚Ä¢ GPT-4 –æ—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π\\n"
                "‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ö–æ–¥—É/–≤—ã—Ö–æ–¥—É\\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\\n\\n"
                "<b>üìä –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:</b>\\n"
                "‚Ä¢ <code>ActiveScalper</code> (BTCUSDT, 5m) - –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏\\n"
                "‚Ä¢ <code>BalancedTrader</code> (BTCUSDT, 15m) - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\\n"
                "‚Ä¢ <code>QualityTrader</code> (BTCUSDT, 1h) - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\\n\\n"
                "<b>üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:</b>\\n"
                "‚Ä¢ –ù–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã + –ò–ò –∞–Ω–∞–ª–∏–∑\\n"
                "‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π\\n"
                "‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\\n"
                "‚Ä¢ –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\\n\\n"
                "<b>‚ö° –û–°–û–ë–ï–ù–ù–û–°–¢–ò:</b>\\n"
                "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫\\n"
                "‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\\n"
                "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Jesse Framework\\n"
                "‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ Bybit Testnet"
            )
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await update.message.reply_text(
                help_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /help: {e}")

    async def command_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            self.logger.info("üìä /status –∫–æ–º–∞–Ω–¥–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower() == 'true'
            openai_key = bool(os.getenv('OPENAI_API_KEY'))
            
            ai_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if ai_enabled and openai_key else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            telegram_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"  # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
            bybit_key = bool(os.getenv('BYBIT_USDT_PERPETUAL_TESTNET_API_KEY'))
            api_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã" if bybit_key else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            
            current_time = datetime.now().strftime("%H:%M:%S")
            current_date = datetime.now().strftime("%d.%m.%Y")
            
            status_text = (
                "üü¢ <b>–ü–û–õ–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>\\n\\n"
                f"üì± <b>Telegram –±–æ—Ç:</b> {telegram_status}\\n"
                f"ü§ñ <b>–ò–ò –∞–Ω–∞–ª–∏–∑:</b> {ai_status}\\n"
                f"üîë <b>API –∫–ª—é—á–∏:</b> {api_status}\\n"
                f"üìä <b>Jesse —Ñ—Ä–µ–π–º–≤–æ—Ä–∫:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\\n"
                f"üîÑ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b> 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\\n"
                f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚úÖ PostgreSQL\\n"
                f"‚ö° <b>–ö—ç—à:</b> ‚úÖ Redis\\n\\n"
                "<b>üìà –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:</b>\\n"
                "‚Ä¢ <code>ActiveScalper</code> ‚Üí BTCUSDT (5m)\\n"
                "‚Ä¢ <code>BalancedTrader</code> ‚Üí BTCUSDT (15m)\\n" 
                "‚Ä¢ <code>QualityTrader</code> ‚Üí BTCUSDT (1h)\\n\\n"
                "<b>üåê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:</b>\\n"
                "‚Ä¢ Bybit Testnet ‚úÖ\\n"
                "‚Ä¢ OpenAI API ‚úÖ\\n"
                "‚Ä¢ Telegram API ‚úÖ\\n\\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {current_date}\\n\\n"
                "<i>üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç —à—Ç–∞—Ç–Ω–æ!</i>"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await update.message.reply_text(
                status_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /status: {e}")

    async def command_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            self.logger.info("üìà /stats –∫–æ–º–∞–Ω–¥–∞")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ Jesse
            stats_text = (
                "üìä <b>–¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\\n\\n"
                "üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\\n"
                "‚Ä¢ –°–¥–µ–ª–æ–∫: 12\\n"
                "‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 8 (66.7%)\\n"
                "‚Ä¢ P&L: +\\$45.23\\n\\n"
                "üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>\\n"
                "‚Ä¢ –°–¥–µ–ª–æ–∫: 89\\n"
                "‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 58 (65.2%)\\n"
                "‚Ä¢ P&L: +\\$234.67\\n\\n"
                "üéØ <b>–ü–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:</b>\\n"
                "‚Ä¢ ActiveScalper: +\\$78.90\\n"
                "‚Ä¢ BalancedTrader: +\\$123.45\\n"
                "‚Ä¢ QualityTrader: +\\$32.32\\n\\n"
                "‚ö° <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:</b>\\n"
                "‚Ä¢ BUY BTCUSDT \\$43,250 ‚Üí +\\$12.34\\n"
                "‚Ä¢ SELL BTCUSDT \\$43,890 ‚Üí +\\$23.45\\n"
                "‚Ä¢ BUY BTCUSDT \\$42,100 ‚Üí -\\$8.76\\n\\n"
                "üìà <b>–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> +5.67%"
            )
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await update.message.reply_text(
                stats_text,
                parse_mode="HTML", 
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /stats: {e}")

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()  # –£–±–∏—Ä–∞–µ–º "loading" —Å –∫–Ω–æ–ø–∫–∏
            
            self.logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
            
            if query.data == "status":
                await self._show_status_inline(query)
            elif query.data == "help":
                await self._show_help_inline(query)
            elif query.data == "settings":
                await self._show_settings_inline(query)
            elif query.data == "history":
                await self._show_history_inline(query)
            elif query.data == "main_menu":
                await self._show_main_menu_inline(query)
            else:
                await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

    async def _show_status_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ inline —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower() == 'true'
        openai_key = bool(os.getenv('OPENAI_API_KEY'))
        ai_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if ai_enabled and openai_key else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        status_text = (
            "üü¢ <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>\\n\\n"
            f"üì± Telegram –±–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\\n"
            f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {ai_status}\\n"
            "üìä Jesse —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\\n"
            "üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\\n\\n"
            "<b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\\n"
            "‚Ä¢ ActiveScalper (5m)\\n"
            "‚Ä¢ BalancedTrader (15m)\\n"
            "‚Ä¢ QualityTrader (1h)\\n\\n"
            f"‚è∞ {current_time} | üìÖ {current_date}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=status_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_help_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ inline"""
        help_text = (
            "üìñ <b>–°–ü–†–ê–í–ö–ê</b>\\n\\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\\n"
            "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\n"
            "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\\n"
            "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º\\n"
            "‚Ä¢ /stats - –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\n\\n"
            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\\n"
            "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤\\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\\n"
            "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö\\n"
            "‚ö° –†–∞–±–æ—Ç–∞ 24/7\\n\\n"
            "<b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\\n"
            "‚Ä¢ ActiveScalper - –ë—ã—Å—Ç—Ä–æ\\n"
            "‚Ä¢ BalancedTrader - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ\\n"
            "‚Ä¢ QualityTrader - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=help_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_settings_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower() == 'true'
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´</b>\\n\\n"
            f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if ai_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\\n"
            "üìä –°—Ç—Ä–∞—Ç–µ–≥–∏–π: 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\\n"
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\\n"
            "‚ö° –†–µ–∂–∏–º: –¢–µ—Å—Ç–æ–≤—ã–π (Bybit Testnet)\\n\\n"
            "<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\\n"
            "‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: 5m, 15m, 1h\\n"
            "‚Ä¢ –°–∏–º–≤–æ–ª: BTCUSDT\\n"
            "‚Ä¢ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: –ê–∫—Ç–∏–≤–µ–Ω\\n\\n"
            "<i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª</i>"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=settings_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_history_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"""
        history_text = (
            "üìã <b>–ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö</b>\\n\\n"
            "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫:</b>\\n\\n"
            "1Ô∏è‚É£ <b>BUY BTCUSDT</b>\\n"
            "   üí∞ \\$43,250 ‚Üí \\$43,790 (+\\$12.34)\\n"
            "   ‚è∞ 10:30 | üéØ BalancedTrader\\n\\n"
            "2Ô∏è‚É£ <b>SELL BTCUSDT</b>\\n"
            "   üí∞ \\$43,890 ‚Üí \\$43,345 (+\\$23.45)\\n"
            "   ‚è∞ 09:15 | üéØ QualityTrader\\n\\n"
            "3Ô∏è‚É£ <b>BUY BTCUSDT</b>\\n"
            "   üí∞ \\$42,100 ‚Üí \\$41,975 (-\\$8.76)\\n"
            "   ‚è∞ 08:45 | üéØ ActiveScalper\\n\\n"
            "üìä <b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b> +\\$45.23\\n"
            "üìà <b>–í–∏–Ω—Ä–µ–π—Ç:</b> 66.7% (8/12)"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=history_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_main_menu_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        welcome_text = (
            "ü§ñ <b>AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\\n\\n"
            "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫!</b>\\n\\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\\n"
            "‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω\\n"
            "‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã\\n"
            "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\\n\\n"
            f"‚è∞ –í—Ä–µ–º—è: <code>{current_time}</code>\\n"
            f"üìÖ –î–∞—Ç–∞: <code>{current_date}</code>\\n\\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
            [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=welcome_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def send_notification(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        try:
            bot = Bot(self.bot_token)
            await bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="HTML"
            )
            await bot.close()
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        telegram_bot = TelegramBot()
        
        telegram_bot.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ AI Trading Bot (–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        telegram_bot.logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Application...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è python-telegram-bot 20.0+
        application = Application.builder().token(telegram_bot.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", telegram_bot.command_start))
        application.add_handler(CommandHandler("help", telegram_bot.command_help))
        application.add_handler(CommandHandler("status", telegram_bot.command_status))
        application.add_handler(CommandHandler("stats", telegram_bot.command_stats))
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(telegram_bot.handle_button))
        
        telegram_bot.logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        telegram_bot.logger.info("üéØ –ó–∞–ø—É—Å–∫ polling...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
EOF

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ü–û–õ–ù–´–ú —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "‚öñÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ Jesse –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è BALANCED TRADER..."\n\
git clone https://github.com/jesse-ai/project-template mybot\n\
cd mybot\n\
\n\
cp /home/.env .\n\
cp /home/routes.py .\n\
cp /home/plugins.py . 2>/dev/null || echo "plugins = []" > plugins.py\n\
\n\
# –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞\n\
if [ -d "/home/strategies" ]; then\n\
    rm -rf strategies\n\
    cp -r /home/strategies .\n\
    echo "‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã:"\n\
    ls -la strategies/\n\
else\n\
    echo "‚ùå –ü–∞–ø–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"\n\
fi\n\
\n\
# –ö–æ–ø–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\
cp -r /home/ai_analysis . 2>/dev/null || echo "‚ö†Ô∏è  AI analysis –Ω–µ –Ω–∞–π–¥–µ–Ω"\n\
cp -r /home/notifications . 2>/dev/null || echo "‚ö†Ô∏è  Notifications –Ω–µ –Ω–∞–π–¥–µ–Ω"\n\
cp -r /home/utils . 2>/dev/null || echo "‚ö†Ô∏è  Utils –Ω–µ –Ω–∞–π–¥–µ–Ω"\n\
cp /home/enhanced_strategy_base.py . 2>/dev/null || echo "‚ö†Ô∏è  Enhanced strategy base –Ω–µ –Ω–∞–π–¥–µ–Ω"\n\
\n\
# –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–õ–ù–´–ô bot_runner.py\n\
cp /home/bot_runner_complete.py ./bot_runner.py\n\
echo "‚úÖ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π bot_runner —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"\n\
\n\
cp /home/market_analyzer.py . 2>/dev/null || echo "‚ö†Ô∏è  Market analyzer –Ω–µ –Ω–∞–π–¥–µ–Ω"\n\
\n\
echo "üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env..."\n\
if [ -f ".env" ]; then\n\
    export $(grep -v "^#" .env | grep -v "^$" | xargs)\n\
    echo "POSTGRES_HOST=$POSTGRES_HOST"\n\
    echo "REDIS_HOST=$REDIS_HOST"\n\
    echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:0:10}..."\n\
    echo "OPENAI_API_KEY=${OPENAI_API_KEY:0:10}..."\n\
else\n\
    echo "‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"\n\
    exit 1\n\
fi\n\
\n\
echo "üîë === API –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==="\n\
if [ -n "$BYBIT_USDT_PERPETUAL_TESTNET_API_KEY" ]; then\n\
    echo "‚úÖ API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã!"\n\
    curl_result=$(curl -s -w "%{http_code}" "https://api-testnet.bybit.com/v5/market/time" -o /tmp/bybit_test.txt)\n\
    if [ "$curl_result" = "200" ]; then\n\
        echo "‚úÖ Bybit testnet –¥–æ—Å—Ç—É–ø–µ–Ω"\n\
    else\n\
        echo "‚ùå Bybit testnet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: $curl_result)"\n\
    fi\n\
else\n\
    echo "‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"\n\
fi\n\
\n\
echo "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."\n\
nc -z $POSTGRES_HOST $POSTGRES_PORT && echo "‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"\n\
nc -z $REDIS_HOST $REDIS_PORT && echo "‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"\n\
\n\
echo "ü§ñ === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û TELEGRAM –ë–û–¢–ê ==="\n\
if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then\n\
    echo "‚úÖ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞"\n\
    echo "Bot Token: ${TELEGRAM_BOT_TOKEN:0:10}..."\n\
    echo "Chat ID: $TELEGRAM_CHAT_ID"\n\
    echo ""\n\
    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç..."\n\
    \n\
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô –±–æ—Ç\n\
    python3 bot_runner.py > /tmp/telegram_bot_full.log 2>&1 &\n\
    TELEGRAM_PID=$!\n\
    echo "üì± –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID: $TELEGRAM_PID"\n\
    \n\
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫\n\
    sleep 5\n\
    if kill -0 $TELEGRAM_PID 2>/dev/null; then\n\
        echo "‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!"\n\
        echo "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /status, /stats"\n\
        echo "üîò –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: –≤–∫–ª—é—á–µ–Ω—ã"\n\
        echo "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –¥–æ—Å—Ç—É–ø–µ–Ω"\n\
        echo "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫: –¥–æ—Å—Ç—É–ø–Ω–∞"\n\
        echo "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–æ—Å—Ç—É–ø–Ω—ã"\n\
        \n\
        # –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\
        (\n\
          while true; do\n\
            sleep 60\n\
            if [ -n "$TELEGRAM_PID" ]; then\n\
              if kill -0 $TELEGRAM_PID 2>/dev/null; then\n\
                echo "‚úÖ $(date +%H:%M:%S) - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"\n\
              else\n\
                echo "‚ö†Ô∏è $(date +%H:%M:%S) - Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è"\n\
                echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"\n\
                tail -n 10 /tmp/telegram_bot_full.log\n\
                TELEGRAM_PID=""\n\
              fi\n\
            fi\n\
          done\n\
        ) &\n\
        \n\
    else\n\
        echo "‚ùå Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!"\n\
        echo "üìã –õ–æ–≥–∏ –∑–∞–ø—É—Å–∫–∞:"\n\
        cat /tmp/telegram_bot_full.log\n\
        echo ""\n\
        echo "üéØ Jesse –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ë–ï–ó Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"\n\
    fi\n\
else\n\
    echo "‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"\n\
fi\n\
\n\
echo ""\n\
echo "‚öñÔ∏è  === –ó–ê–ü–£–°–ö BALANCED TRADER ==="\n\
echo "üéØ –¶–ï–õ–¨: –ó–û–õ–û–¢–ê–Ø –°–ï–†–ï–î–ò–ù–ê –° –ü–û–õ–ù–´–ú TELEGRAM –ò–ù–¢–ï–†–§–ï–ô–°–û–ú!"\n\
echo "üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"\n\
echo "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: –í–∫–ª—é—á–µ–Ω"\n\
echo "üì± Telegram: –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"\n\
echo ""\n\
echo "üîç === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ ==="\n\
echo "üìä Jesse: –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É"\n\
if [ -n "$TELEGRAM_PID" ] && kill -0 $TELEGRAM_PID 2>/dev/null; then\n\
    echo "üì± Telegram: ‚úÖ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $TELEGRAM_PID)"\n\
    echo "   üéØ –ö–æ–º–∞–Ω–¥—ã: /start, /help, /status, /stats"\n\
    echo "   üîò –ö–Ω–æ–ø–∫–∏: –°—Ç–∞—Ç—É—Å, –ü–æ–º–æ—â—å, –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –ò—Å—Ç–æ—Ä–∏—è"\n\
    echo "   üìä –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π"\n\
else\n\
    echo "üì± Telegram: ‚ö†Ô∏è  –û—Ç–∫–ª—é—á–µ–Ω (Jesse —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)"\n\
fi\n\
if [ -n "$OPENAI_API_KEY" ]; then\n\
    echo "ü§ñ AI Analysis: ‚úÖ –í–∫–ª—é—á–µ–Ω —Å GPT-4"\n\
else\n\
    echo "ü§ñ AI Analysis: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω"\n\
fi\n\
echo ""\n\
echo "üéØ –°–∏—Å—Ç–µ–º–∞ —Å –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º –≥–æ—Ç–æ–≤–∞! –ó–∞–ø—É—Å–∫–∞–µ–º Jesse..."\n\
echo "üöÄ Telegram –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:"\n\
echo "   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"\n\
echo "   ‚Ä¢ –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é"\n\
echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"\n\
echo "   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"\n\
echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"\n\
echo "   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"\n\
echo ""\n\
\n\
# –ì–õ–ê–í–ù–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º Jesse –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞\n\
exec jesse run\n\
' > /setup_and_run.sh && chmod +x /setup_and_run.sh

# –≠–∫—Å–ø–æ–Ω–∏—Ä—É–µ–º –ø–æ—Ä—Ç (–¥–ª—è Jesse web interface)
EXPOSE 9000

CMD ["/setup_and_run.sh"]
