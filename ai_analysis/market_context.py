# ai_analysis/market_context.py
import aiohttp
import asyncio
import numpy as np
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import logging
import json


class MarketContextCollector:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.cache = {}  # –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        logging.info("üìä –°–±–æ—Ä—â–∏–∫ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def collect_context(self, symbol: str, timeframe: str, candles_data: np.ndarray) -> Dict[str, Any]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15m)  
            candles_data: –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –∏–∑ Jesse
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä—ã–Ω–æ—á–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            context = {
                'timestamp': datetime.now().isoformat(),
                'symbol': symbol,
                'timeframe': timeframe
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –∏–∑ Jesse
            if len(candles_data) > 0:
                context.update(await self._analyze_candles(candles_data))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.update(await self._get_market_sentiment(symbol))
            context.update(await self._calculate_volatility_metrics(candles_data))
            context.update(await self._analyze_volume_profile(candles_data))
            
            return context
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return self._get_default_context(symbol, timeframe)
    
    async def _analyze_candles(self, candles: np.ndarray) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        try:
            if len(candles) < 20:
                return {'candle_analysis': 'insufficient_data'}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            recent_candles = candles[-20:]
            closes = recent_candles[:, 4].astype(float)  # –¶–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            highs = recent_candles[:, 2].astype(float)   # –ú–∞–∫—Å–∏–º—É–º—ã
            lows = recent_candles[:, 3].astype(float)    # –ú–∏–Ω–∏–º—É–º—ã
            volumes = recent_candles[:, 5].astype(float) # –û–±—ä–µ–º—ã
            
            return {
                'price_trend': self._determine_price_trend(closes),
                'support_resistance': self._find_support_resistance(highs, lows),
                'candle_patterns': self._identify_candle_patterns(recent_candles),
                'momentum': self._calculate_momentum(closes),
                'volume_trend': self._analyze_volume_trend(volumes)
            }
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–µ–π: {e}")
            return {'candle_analysis': 'error'}
    
    def _determine_price_trend(self, closes: np.ndarray) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–¥
        """
        if len(closes) < 5:
            return 'UNKNOWN'
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 5
        recent_avg = np.mean(closes[-5:])
        previous_avg = np.mean(closes[-10:-5])
        
        change_percent = (recent_avg - previous_avg) / previous_avg * 100
        
        if change_percent > 2:
            return 'STRONG_UPTREND'
        elif change_percent > 0.5:
            return 'UPTREND'
        elif change_percent < -2:
            return 'STRONG_DOWNTREND'
        elif change_percent < -0.5:
            return 'DOWNTREND'
        else:
            return 'SIDEWAYS'
    
    def _find_support_resistance(self, highs: np.ndarray, lows: np.ndarray) -> Dict[str, float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        """
        try:
            current_price = highs[-1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞–∫—Å–∏–º—É–º –∫–∞–∫ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            
            # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
            resistance_levels = []
            support_levels = []
            
            for i in range(2, len(highs) - 2):
                # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                if highs[i] > highs[i-1] and highs[i] > highs[i+1] and highs[i] > highs[i-2] and highs[i] > highs[i+2]:
                    resistance_levels.append(highs[i])
                
                # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
                if lows[i] < lows[i-1] and lows[i] < lows[i+1] and lows[i] < lows[i-2] and lows[i] < lows[i+2]:
                    support_levels.append(lows[i])
            
            # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
            resistance_levels = sorted(resistance_levels, key=lambda x: abs(x - current_price))
            support_levels = sorted(support_levels, key=lambda x: abs(x - current_price))
            
            return {
                'nearest_resistance': resistance_levels[0] if resistance_levels else current_price * 1.02,
                'nearest_support': support_levels[0] if support_levels else current_price * 0.98,
                'resistance_strength': len([r for r in resistance_levels if abs(r - current_price) / current_price < 0.05]),
                'support_strength': len([s for s in support_levels if abs(s - current_price) / current_price < 0.05])
            }
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {}
    
    def _identify_candle_patterns(self, candles: np.ndarray) -> List[str]:
        """
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        """
        patterns = []
        
        if len(candles) < 3:
            return patterns
        
        try:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
            last_3 = candles[-3:]
            
            for i, candle in enumerate(last_3):
                open_price = float(candle[1])
                high_price = float(candle[2])
                low_price = float(candle[3])
                close_price = float(candle[4])
                
                body = abs(close_price - open_price)
                total_range = high_price - low_price
                
                if total_range == 0:
                    continue
                
                body_ratio = body / total_range
                
                # –î–æ–¥–∂–∏
                if body_ratio < 0.1:
                    patterns.append(f'DOJI_{i}')
                
                # –ú–æ–ª–æ—Ç/–ø–æ–≤–µ—à–µ–Ω–Ω—ã–π
                upper_shadow = high_price - max(open_price, close_price)
                lower_shadow = min(open_price, close_price) - low_price
                
                if lower_shadow > body * 2 and upper_shadow < body * 0.5:
                    patterns.append(f'HAMMER_{i}')
                
                if upper_shadow > body * 2 and lower_shadow < body * 0.5:
                    patterns.append(f'SHOOTING_STAR_{i}')
                
                # –ë–æ–ª—å—à–∏–µ —Ç–µ–ª–∞
                if body_ratio > 0.7:
                    if close_price > open_price:
                        patterns.append(f'BIG_GREEN_{i}')
                    else:
                        patterns.append(f'BIG_RED_{i}')
            
            return patterns
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return []
    
    def _calculate_momentum(self, closes: np.ndarray) -> Dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–æ–º–µ–Ω—Ç—É–º
        """
        try:
            if len(closes) < 10:
                return {}
            
            # –ú–æ–º–µ–Ω—Ç—É–º –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            momentum_5 = (closes[-1] - closes[-6]) / closes[-6] * 100
            momentum_10 = (closes[-1] - closes[-11]) / closes[-11] * 100
            
            # –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            roc = (closes[-1] - closes[-5]) / closes[-5] * 100
            
            return {
                'momentum_5': momentum_5,
                'momentum_10': momentum_10,
                'rate_of_change': roc,
                'momentum_direction': 'BULLISH' if momentum_5 > 0 and momentum_10 > 0 else 'BEARISH' if momentum_5 < 0 and momentum_10 < 0 else 'MIXED'
            }
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–æ–º–µ–Ω—Ç—É–º–∞: {e}")
            return {}
    
    def _analyze_volume_trend(self, volumes: np.ndarray) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –æ–±—ä–µ–º–æ–≤
        """
        try:
            if len(volumes) < 10:
                return {}
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä–µ–º—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏
            recent_volume_avg = np.mean(volumes[-5:])
            previous_volume_avg = np.mean(volumes[-10:-5])
            
            volume_change = (recent_volume_avg - previous_volume_avg) / previous_volume_avg * 100
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ –≤—ã–±–æ—Ä–∫–µ
            max_volume = np.max(volumes)
            current_volume = volumes[-1]
            
            return {
                'volume_trend': 'INCREASING' if volume_change > 20 else 'DECREASING' if volume_change < -20 else 'STABLE',
                'volume_change_percent': volume_change,
                'volume_vs_max': (current_volume / max_volume * 100) if max_volume > 0 else 0,
                'volume_spike': current_volume > recent_volume_avg * 1.5
            }
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤: {e}")
            return {}
    
    async def _get_market_sentiment(self, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Fear & Greed Index,
        # –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç—ã, social sentiment –∏ —Ç.–¥.
        
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return {
            'sentiment': 'NEUTRAL',  # BULLISH, BEARISH, NEUTRAL
            'sentiment_score': 50,   # 0-100
            'sentiment_source': 'default'
        }
    
    async def _calculate_volatility_metrics(self, candles: np.ndarray) -> Dict[str, Any]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            if len(candles) < 20:
                return {'volatility': 'UNKNOWN'}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
            recent_candles = candles[-20:]
            closes = recent_candles[:, 4].astype(float)
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
            returns = np.diff(closes) / closes[:-1] * 100
            volatility = np.std(returns)
            
            # –°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            highs = recent_candles[:, 2].astype(float)
            lows = recent_candles[:, 3].astype(float)
            
            true_ranges = []
            for i in range(1, len(recent_candles)):
                tr1 = highs[i] - lows[i]
                tr2 = abs(highs[i] - closes[i-1])
                tr3 = abs(lows[i] - closes[i-1])
                true_ranges.append(max(tr1, tr2, tr3))
            
            atr = np.mean(true_ranges)
            atr_percent = (atr / closes[-1]) * 100
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if volatility > 3:
                vol_level = 'HIGH'
            elif volatility > 1:
                vol_level = 'MEDIUM'
            else:
                vol_level = 'LOW'
            
            return {
                'volatility': vol_level,
                'volatility_percent': volatility,
                'atr': atr,
                'atr_percent': atr_percent
            }
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'volatility': 'UNKNOWN'}
    
    async def _analyze_volume_profile(self, candles: np.ndarray) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –æ–±—ä–µ–º–∞
        """
        try:
            if len(candles) < 10:
                return {}
            
            recent_candles = candles[-10:]
            volumes = recent_candles[:, 5].astype(float)
            
            # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
            avg_volume = np.mean(volumes)
            current_volume = volumes[-1]
            
            # –û–±—ä–µ–º –≤—ã—à–µ/–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            above_avg_count = len([v for v in volumes if v > avg_volume])
            
            return {
                'avg_volume': avg_volume,
                'current_volume': current_volume,
                'volume_ratio': (current_volume / avg_volume) if avg_volume > 0 else 1,
                'above_average_frequency': (above_avg_count / len(volumes)) * 100
            }
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞: {e}")
            return {}
    
    def _get_default_context(self, symbol: str, timeframe: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        """
        return {
            'timestamp': datetime.now().isoformat(),
            'symbol': symbol,
            'timeframe': timeframe,
            'sentiment': 'NEUTRAL',
            'volatility': 'MEDIUM',
            'data_quality': 'LIMITED',
            'error': 'Failed to collect full context'
        }
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
