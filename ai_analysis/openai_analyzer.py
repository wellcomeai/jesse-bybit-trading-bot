# ai_analysis/openai_analyzer.py
import openai
import json
import os
from typing import Dict, Any, Optional
import asyncio
from datetime import datetime
import logging


class OpenAIAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
    """
    
    def __init__(self):
        self.client = openai.AsyncOpenAI(
            api_key=os.getenv('OPENAI_API_KEY')
        )
        self.model = os.getenv('OPENAI_MODEL', 'gpt-4')
        self.max_retries = 3
        self.timeout = 30
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not os.getenv('OPENAI_API_KEY'):
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        logging.info(f"ü§ñ OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {self.model}")
    
    async def analyze_signal(self, signal_data: Dict[str, Any], market_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ OpenAI
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ –æ —Å–∏–≥–Ω–∞–ª–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            market_data: –†—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            Dict —Å –∞–Ω–∞–ª–∏–∑–æ–º –ò–ò –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            prompt = self._build_analysis_prompt(signal_data, market_data)
            
            for attempt in range(self.max_retries):
                try:
                    response = await self.client.chat.completions.create(
                        model=self.model,
                        messages=[
                            {
                                "role": "system",
                                "content": self._get_system_prompt()
                            },
                            {
                                "role": "user", 
                                "content": prompt
                            }
                        ],
                        temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                        max_tokens=1500,
                        timeout=self.timeout
                    )
                    
                    analysis_text = response.choices[0].message.content
                    parsed_analysis = self._parse_ai_response(analysis_text)
                    
                    logging.info(f"‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    return parsed_analysis
                    
                except openai.RateLimitError:
                    logging.warning(f"‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI, –æ–∂–∏–¥–∞–Ω–∏–µ... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                except openai.APITimeoutError:
                    logging.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç OpenAI API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    if attempt == self.max_retries - 1:
                        raise
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    if attempt == self.max_retries - 1:
                        raise
                    await asyncio.sleep(1)
            
            return None
            
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def _get_system_prompt(self) -> str:
        """
        –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        """
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏ –¥–∞—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
    "recommendation": "BUY|SELL|HOLD|AVOID",
    "confidence": 0-100,
    "risk_level": "LOW|MEDIUM|HIGH",
    "key_factors": {
        "bullish": ["—Ñ–∞–∫—Ç–æ—Ä1", "—Ñ–∞–∫—Ç–æ—Ä2"],
        "bearish": ["—Ñ–∞–∫—Ç–æ—Ä1", "—Ñ–∞–∫—Ç–æ—Ä2"]
    },
    "market_analysis": "–∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
    "strategy_assessment": "–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
    "risk_warnings": ["–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ1", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ2"],
    "target_zones": {
        "entry_optimal": "—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞",
        "stop_loss": "—Å—Ç–æ–ø-–ª–æ—Å—Å", 
        "take_profit_1": "–ø–µ—Ä–≤–∞—è —Ü–µ–ª—å",
        "take_profit_2": "–≤—Ç–æ—Ä–∞—è —Ü–µ–ª—å"
    },
    "summary": "–∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
}

–ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:
- –û–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—à–µ –≤—Å–µ–≥–æ
- –£—á–∏—Ç—ã–≤–∞–π –≤–µ—Å—å —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
- –ù–µ –±–æ–π—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å AVOID –ø—Ä–∏ –ø–ª–æ—Ö–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
- Confidence = —Ä–µ–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ
- Risk_level –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏"""

    def _build_analysis_prompt(self, signal_data: Dict[str, Any], market_data: Dict[str, Any]) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∏–≥–Ω–∞–ª–µ
        strategy = signal_data.get('strategy', 'Unknown')
        signal_type = signal_data.get('signal_type', 'Unknown')
        reason = signal_data.get('reason', 'Unknown')
        price = signal_data.get('price', 0)
        symbol = signal_data.get('symbol', 'Unknown')
        timeframe = signal_data.get('timeframe', 'Unknown')
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = signal_data.get('indicators', {})
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        recent_candles = signal_data.get('candles_data', {}).get('recent_candles', [])
        
        # –†—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        market_sentiment = market_data.get('sentiment', 'NEUTRAL')
        volatility = market_data.get('volatility', 'MEDIUM')
        
        prompt = f"""–ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê:

=== –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï ===
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}
–°–∏–≥–Ω–∞–ª: {signal_type} –Ω–∞ {symbol}
–¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:,.2f}
–ü—Ä–∏—á–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞: {reason}
–í—Ä–µ–º—è: {datetime.fromtimestamp(signal_data.get('timestamp', 0)).strftime('%Y-%m-%d %H:%M:%S')}

=== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ==="""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for indicator, value in indicators.items():
            if isinstance(value, (int, float)):
                prompt += f"\n{indicator.upper()}: {value:.2f}"
        
        prompt += f"\n\n=== –†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø ==="
        prompt += f"\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞: {market_sentiment}"
        prompt += f"\n–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–∞—Ö (–∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑)
        if recent_candles:
            prompt += f"\n\n=== –ü–û–°–õ–ï–î–ù–ò–ï {len(recent_candles)} –°–í–ï–ß–ï–ô ==="
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            for i, candle in enumerate(recent_candles[-5:]):
                open_price = candle.get('open', 0)
                close_price = candle.get('close', 0)
                high_price = candle.get('high', 0)
                low_price = candle.get('low', 0)
                volume = candle.get('volume', 0)
                
                change = ((close_price - open_price) / open_price * 100) if open_price > 0 else 0
                candle_type = "üü¢" if change > 0 else "üî¥" if change < 0 else "‚ö™"
                
                prompt += f"\n{candle_type} #{i+1}: O${open_price:.2f} H${high_price:.2f} L${low_price:.2f} C${close_price:.2f} ({change:+.2f}%) Vol:{volume:.0f}"
        
        prompt += f"\n\n=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ ==="
        additional_data = signal_data.get('additional_data', {})
        if additional_data:
            for key, value in additional_data.items():
                prompt += f"\n{key}: {value}"
        
        prompt += f"\n\n–ü–†–û–í–ï–î–ò –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –≠–¢–û–ì–û –°–ò–ì–ù–ê–õ–ê –ò –í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –í –§–û–†–ú–ê–¢–ï JSON!"
        
        return prompt
    
    def _parse_ai_response(self, response_text: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ò–ò –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}')
            
            if start_idx == -1 or end_idx == -1:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                return self._create_fallback_response(response_text)
            
            json_text = response_text[start_idx:end_idx + 1]
            parsed = json.loads(json_text)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['recommendation', 'confidence', 'risk_level', 'summary']
            for field in required_fields:
                if field not in parsed:
                    parsed[field] = self._get_default_value(field)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            parsed = self._normalize_response(parsed)
            
            return parsed
            
        except json.JSONDecodeError as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ò–ò: {e}")
            return self._create_fallback_response(response_text)
        
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
            return self._create_fallback_response(response_text)
    
    def _create_fallback_response(self, original_text: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON
        """
        return {
            "recommendation": "HOLD",
            "confidence": 50,
            "risk_level": "MEDIUM",
            "key_factors": {
                "bullish": [],
                "bearish": []
            },
            "market_analysis": "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "strategy_assessment": "–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "risk_warnings": ["–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"],
            "target_zones": {},
            "summary": "–ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞.",
            "raw_response": original_text[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
    
    def _get_default_value(self, field: str) -> Any:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—è
        """
        defaults = {
            "recommendation": "HOLD",
            "confidence": 50,
            "risk_level": "MEDIUM",
            "summary": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è",
            "key_factors": {"bullish": [], "bearish": []},
            "market_analysis": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
            "strategy_assessment": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
            "risk_warnings": [],
            "target_zones": {}
        }
        return defaults.get(field, "Unknown")
    
    def _normalize_response(self, response: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è recommendation
        if response.get('recommendation'):
            rec = str(response['recommendation']).upper()
            if rec not in ['BUY', 'SELL', 'HOLD', 'AVOID']:
                response['recommendation'] = 'HOLD'
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è confidence
        try:
            confidence = int(response.get('confidence', 50))
            response['confidence'] = max(0, min(100, confidence))
        except (ValueError, TypeError):
            response['confidence'] = 50
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è risk_level
        if response.get('risk_level'):
            risk = str(response['risk_level']).upper()
            if risk not in ['LOW', 'MEDIUM', 'HIGH']:
                response['risk_level'] = 'MEDIUM'
        
        return response
