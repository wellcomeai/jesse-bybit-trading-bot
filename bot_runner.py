# bot_runner.py - –ì–û–¢–û–í–ê–Ø –ö –î–ï–ü–õ–û–Æ –í–ï–†–°–ò–Ø
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª–∏ asyncio.run() –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —É–ø—Ä–æ—Å—Ç–∏–ª–∏ –ª–æ–≥–∏–∫—É

import os
import logging
import time
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('/tmp/telegram_bot_simple.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

async def command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger = logging.getLogger(__name__)
    
    try:
        user_info = f"{update.effective_user.username} (ID: {update.effective_chat.id})"
        logger.info(f"üöÄ /start –æ—Ç {user_info}")
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        message_text = (
            "ü§ñ <b>AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\n\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            "‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã\n" 
            "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
            f"üìÖ {current_date}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(
            message_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}")
        try:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except:
            pass

async def command_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üìñ /help –∫–æ–º–∞–Ω–¥–∞")
        
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ AI Trading Bot</b>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        )
        
        await update.message.reply_text(help_text, parse_mode="HTML")
        logger.info("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /help: {e}")

async def command_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üìä /status –∫–æ–º–∞–Ω–¥–∞")
        
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        status_text = (
            "üü¢ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            "‚úÖ Telegram –±–æ—Ç: –†–∞–±–æ—Ç–∞–µ—Ç\n"
            "‚úÖ Jesse —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: –ê–∫—Ç–∏–≤–µ–Ω\n"
            "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: –î–æ—Å—Ç—É–ø–µ–Ω\n"
            "üìä –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\n\n"
            f"‚è∞ {current_time}\n"
            f"üóì {current_date}"
        )
        
        await update.message.reply_text(status_text, parse_mode="HTML")
        logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /status: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ê"""
    logger = setup_logging()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
            return
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞")
        logger.info(f"Bot token: {bot_token[:10]}...")
        logger.info(f"Chat ID: {chat_id}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", command_start))
        application.add_handler(CommandHandler("help", command_help))
        application.add_handler(CommandHandler("status", command_status))
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú asyncio.run()!
        # –°—Ç–∞—Ä—ã–π –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ª–æ–º–∞–ª –≤—Å–µ:
        # asyncio.run(test_bot())  # ‚Üê –≠–¢–û –°–û–ó–î–ê–í–ê–õ–û –ö–û–ù–§–õ–ò–ö–¢!
        
        # –ù–æ–≤—ã–π –∫–æ–¥: –ø–æ–∑–≤–æ–ª—è–µ–º run_polling —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π event loop
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        application.run_polling(drop_pending_updates=True)
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
