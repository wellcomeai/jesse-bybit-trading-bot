# bot_runner.py - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è python-telegram-bot 20.0+
import os
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('/tmp/telegram_bot_simple.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

async def command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger = logging.getLogger(__name__)
    
    try:
        user_info = f"{update.effective_user.username} (ID: {update.effective_chat.id})"
        logger.info(f"üöÄ /start –æ—Ç {user_info}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è python-telegram-bot 20.0+
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)  # ‚Üê –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
        
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        message_text = (
            "ü§ñ <b>AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\n\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            "‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã\n" 
            "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
            f"üìÖ {current_date}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(
            message_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}")
        try:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except:
            pass

async def command_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üìñ /help –∫–æ–º–∞–Ω–¥–∞")
        
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ AI Trading Bot</b>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await update.message.reply_text(
            help_text, 
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        logger.info("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /help: {e}")

async def command_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üìä /status –∫–æ–º–∞–Ω–¥–∞")
        
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        ai_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if os.getenv('AI_ANALYSIS_ENABLED') == 'true' else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        telegram_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"  # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        
        status_text = (
            "üü¢ <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>\n\n"
            f"üì± Telegram –±–æ—Ç: {telegram_status}\n"
            f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {ai_status}\n"
            "üìä Jesse —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            "üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\n\n"
            "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
            "‚Ä¢ ActiveScalper (BTCUSDT, 5m)\n"
            "‚Ä¢ BalancedTrader (BTCUSDT, 15m)\n"
            "‚Ä¢ QualityTrader (BTCUSDT, 1h)\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
            f"üìÖ {current_date}"
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await update.message.reply_text(
            status_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /status: {e}")

# –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (CallbackQueryHandler)
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    logger = logging.getLogger(__name__)
    
    try:
        query = update.callback_query
        
        # –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading" —Å –∫–Ω–æ–ø–∫–∏
        await query.answer()
        
        logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
        
        if query.data == "status":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            await show_status(query)
            
        elif query.data == "help":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            await show_help(query)
            
        elif query.data == "main_menu":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(query)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

async def show_status(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    current_time = datetime.now().strftime("%H:%M:%S")
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    ai_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if os.getenv('AI_ANALYSIS_ENABLED') == 'true' else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    status_text = (
        "üü¢ <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>\n\n"
        f"üì± Telegram –±–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
        f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {ai_status}\n"
        "üìä Jesse —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
        "üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\n\n"
        "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
        "‚Ä¢ ActiveScalper (BTCUSDT, 5m)\n"
        "‚Ä¢ BalancedTrader (BTCUSDT, 15m)\n"
        "‚Ä¢ QualityTrader (BTCUSDT, 1h)\n\n"
        f"‚è∞ {current_time} | üìÖ {current_date}"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await query.edit_message_text(
        text=status_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def show_help(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üìñ <b>–°–ü–†–ê–í–ö–ê AI Trading Bot</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
        "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
        "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö\n\n"
        "<b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
        "‚Ä¢ ActiveScalper (5m) - –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏\n"
        "‚Ä¢ BalancedTrader (15m) - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n"
        "‚Ä¢ QualityTrader (1h) - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await query.edit_message_text(
        text=help_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def show_main_menu(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    current_time = datetime.now().strftime("%H:%M:%S")
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    message_text = (
        "ü§ñ <b>AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã\n" 
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n\n"
        f"‚è∞ –í—Ä–µ–º—è: {current_time}\n"
        f"üìÖ {current_date}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await query.edit_message_text(
        text=message_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger = setup_logging()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
            return
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (python-telegram-bot 20.0+)")
        logger.info(f"Bot token: {bot_token[:10]}...")
        logger.info(f"Chat ID: {chat_id}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", command_start))
        application.add_handler(CommandHandler("help", command_help))
        application.add_handler(CommandHandler("status", command_status))
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_button))
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–∫–æ–º–∞–Ω–¥—ã + –∫–Ω–æ–ø–∫–∏)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        application.run_polling(drop_pending_updates=True)
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
