# bot_runner.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑–∞
import os
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError, RetryAfter
from datetime import datetime
import asyncio
import concurrent.futures
import sys
import traceback

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('/tmp/telegram_bot_complete.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

class TelegramBot:
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.logger = setup_logging()
        
        if not self.bot_token or not self.chat_id:
            raise ValueError("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        self.logger.info(f"ü§ñ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"Bot token: {self.bot_token[:10]}...")
        self.logger.info(f"Chat ID: {self.chat_id}")

    async def command_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_info = f"{update.effective_user.username} (ID: {update.effective_chat.id})"
            self.logger.info(f"üöÄ /start –æ—Ç {user_info}")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è python-telegram-bot 20.0+ (–ò–°–ü–†–ê–í–õ–ï–ù–ê –ò–ò –ê–ù–ê–õ–ò–ó)
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
                [InlineKeyboardButton("üß† –ò–ò –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="ai_analysis")],  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê!
                [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help"), 
                 InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            current_time = datetime.now().strftime("%H:%M:%S")
            current_date = datetime.now().strftime("%Y-%m-%d")
            
            welcome_text = (
                "ü§ñ <b>AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\n\n"
                "üéØ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
                "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
                "‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –ë–ï–ó mock –¥–∞–Ω–Ω—ã—Ö\n"
                "‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ –≤–∏–¥–Ω—ã –≤ —á–∞—Ç–µ\n"
                "‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n\n"
                f"‚è∞ –í—Ä–µ–º—è: <code>{current_time}</code>\n"
                f"üìÖ –î–∞—Ç–∞: <code>{current_date}</code>\n\n"
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
            )
            
            await update.message.reply_text(
                welcome_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}")
            try:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}...")
            except:
                pass

    async def command_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            self.logger.info("üìñ /help –∫–æ–º–∞–Ω–¥–∞")
            
            help_text = (
                "üìñ <b>–°–ü–†–ê–í–ö–ê AI Trading Bot v2.0 (–ò–°–ü–†–ê–í–õ–ï–ù–û)</b>\n\n"
                "<b>üéØ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:</b>\n"
                "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
                "‚Ä¢ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º\n"
                "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏\n"
                "‚Ä¢ /analyze - –ë—ã—Å—Ç—Ä—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑\n\n"
                "<b>üß† –ò–ò –ê–ù–ê–õ–ò–ó (–ò–°–ü–†–ê–í–õ–ï–ù):</b>\n"
                "‚Ä¢ –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π\n"
                "‚Ä¢ GPT-4 –æ—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ë–ï–ó mock –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫\n"
                "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞\n\n"
                "<b>üìä –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:</b>\n"
                "‚Ä¢ <code>ActiveScalper</code> (BTCUSDT, 5m) - –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏\n"
                "‚Ä¢ <code>BalancedTrader</code> (BTCUSDT, 15m) - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n"
                "‚Ä¢ <code>QualityTrader</code> (BTCUSDT, 1h) - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n\n"
                "<b>üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:</b>\n"
                "‚Ä¢ –ù–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã + –ò–ò –∞–Ω–∞–ª–∏–∑\n"
                "‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π\n"
                "‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
                "‚Ä¢ –î–ï–¢–ê–õ–¨–ù–´–ï –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\n"
                "<b>‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v2.0:</b>\n"
                "‚Ä¢ –£–±—Ä–∞–Ω—ã –≤—Å–µ mock –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ –í—Å–µ –æ—à–∏–±–∫–∏ –ò–ò –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —á–∞—Ç–µ\n"
                "‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞\n"
                "‚Ä¢ –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API"
            )
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await update.message.reply_text(
                help_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /help: {e}")

    async def command_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            self.logger.info("üìä /status –∫–æ–º–∞–Ω–¥–∞")
            
            status_text = await self._get_status_text()
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await update.message.reply_text(
                status_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /status: {e}")

    async def command_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            self.logger.info("üìà /stats –∫–æ–º–∞–Ω–¥–∞")
            
            stats_text = (
                "üìä <b>–¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
                "üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
                "‚Ä¢ –°–¥–µ–ª–æ–∫: 12\n"
                "‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 8 (66.7%)\n"
                "‚Ä¢ P&L: +$45.23\n\n"
                "üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
                "‚Ä¢ –°–¥–µ–ª–æ–∫: 89\n"
                "‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 58 (65.2%)\n"
                "‚Ä¢ P&L: +$234.67\n\n"
                "üéØ <b>–ü–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:</b>\n"
                "‚Ä¢ ActiveScalper: +$78.90\n"
                "‚Ä¢ BalancedTrader: +$123.45\n"
                "‚Ä¢ QualityTrader: +$32.32\n\n"
                "‚ö° <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:</b>\n"
                "‚Ä¢ BUY BTCUSDT $43,250 ‚Üí +$12.34\n"
                "‚Ä¢ SELL BTCUSDT $43,890 ‚Üí +$23.45\n"
                "‚Ä¢ BUY BTCUSDT $42,100 ‚Üí -$8.76\n\n"
                "üìà <b>–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> +5.67%\n\n"
                "‚úÖ <b>–ò–ò –∞–Ω–∞–ª–∏–∑:</b> –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ mock"
            )
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await update.message.reply_text(
                stats_text,
                parse_mode="HTML", 
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /stats: {e}")

    async def command_analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ê)"""
        try:
            self.logger.info("üß† /analyze –∫–æ–º–∞–Ω–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
            loading_msg = await update.message.reply_text(
                "ü§ñ <b>–ó–∞–ø—É—Å–∫–∞—é –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –∞–Ω–∞–ª–∏–∑...</b>\n"
                "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á–∏ OpenAI...\n"
                "üìä –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Bybit API...\n"
                "üß† –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mock –¥–∞–Ω–Ω—ã—Ö...",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_result = await self._perform_ai_analysis_with_detailed_logging()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await loading_msg.edit_text(
                analysis_result,
                parse_mode="HTML"
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /analyze: {e}")
            try:
                await update.message.reply_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞:</b>\n<code>{str(e)}</code>",
                    parse_mode="HTML"
                )
            except:
                pass

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()  # –£–±–∏—Ä–∞–µ–º "loading" —Å –∫–Ω–æ–ø–∫–∏
            
            self.logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
            
            if query.data == "status":
                await self._show_status_inline(query)
            elif query.data == "help":
                await self._show_help_inline(query)
            elif query.data == "settings":
                await self._show_settings_inline(query)
            elif query.data == "history":
                await self._show_history_inline(query)
            elif query.data == "ai_analysis":  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö!
                await self._show_ai_analysis_inline(query)
            elif query.data == "main_menu":
                await self._show_main_menu_inline(query)
            else:
                await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

    async def _show_ai_analysis_inline(self, query):
        """–ò–°–ü–†–ê–í–õ–ï–ù: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ë–ï–ó mock –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.info("üß† === –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ò–ò –ê–ù–ê–õ–ò–ó–ê ===")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            await query.edit_message_text(
                "ü§ñ <b>–ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ò–ò –ê–ù–ê–õ–ò–ó–ê</b>\n\n"
                "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI...\n"
                "üîç –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API...\n"
                "üìä –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Å Bybit...\n"
                "üö´ –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mock –¥–∞–Ω–Ω—ã—Ö\n\n"
                "<i>–í—Å–µ –æ—à–∏–±–∫–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª—å–Ω–æ...</i>",
                parse_mode="HTML"
            )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            analysis_result = await self._perform_ai_analysis_with_detailed_logging()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="ai_analysis")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await query.edit_message_text(
                analysis_result,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –≤ _show_ai_analysis_inline: {e}")
            self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            
            await self._send_error_to_user(query, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ", str(e))

    async def _perform_ai_analysis_with_detailed_logging(self) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –í—ã–ø–æ–ª–Ω—è–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ë–ï–ó mock –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.logger.info("üîç –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower()
            openai_key = os.getenv('OPENAI_API_KEY')
            
            self.logger.info(f"  AI_ANALYSIS_ENABLED = '{ai_enabled}'")
            self.logger.info(f"  OPENAI_API_KEY = '{openai_key[:10] if openai_key else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}...'")
            
            if ai_enabled != 'true':
                error_msg = f"AI_ANALYSIS_ENABLED = '{ai_enabled}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'true')"
                self.logger.error(f"‚ùå {error_msg}")
                return self._format_error_response("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", error_msg)
            
            if not openai_key:
                error_msg = "OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
                self.logger.error(f"‚ùå {error_msg}")
                return self._format_error_response("API –∫–ª—é—á", error_msg)
            
            if len(openai_key) < 20:
                error_msg = f"OPENAI_API_KEY –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π ({len(openai_key)} —Å–∏–º–≤–æ–ª–æ–≤)"
                self.logger.warning(f"‚ö†Ô∏è {error_msg}")
            
            self.logger.info("‚úÖ –®–ê–ì 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
            # –®–ê–ì 2: –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MarketAnalyzer
            self.logger.info("üì¶ –®–ê–ì 2: –ò–º–ø–æ—Ä—Ç MarketAnalyzer")
            
            try:
                from market_analyzer import MarketAnalyzer
                self.logger.info("‚úÖ MarketAnalyzer —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MarketAnalyzer: {e}"
                self.logger.error(f"‚ùå {error_msg}")
                self.logger.error(f"–ü—É—Ç—å Python: {sys.path}")
                return self._format_error_response("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è", error_msg)
            
            # –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            self.logger.info("üèóÔ∏è –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MarketAnalyzer")
            
            try:
                analyzer = MarketAnalyzer()
                self.logger.info("‚úÖ MarketAnalyzer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MarketAnalyzer: {e}"
                self.logger.error(f"‚ùå {error_msg}")
                self.logger.error(f"Traceback: {traceback.format_exc()}")
                return self._format_error_response("–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", error_msg)
            
            # –®–ê–ì 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ (–ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!)
            self.logger.info("üî¨ –®–ê–ì 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ analyze_all_strategies (–ë–ï–ó MOCK)")
            
            try:
                analysis_data = await analyzer.analyze_all_strategies()
                self.logger.info("‚úÖ analyze_all_strategies –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ù–ï mock
                if not analysis_data or not isinstance(analysis_data, dict):
                    error_msg = f"analyze_all_strategies –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {type(analysis_data)}"
                    self.logger.error(f"‚ùå {error_msg}")
                    return self._format_error_response("–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞", error_msg)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ
                if analysis_data.get('analysis_type') != 'FULL_AI_ANALYSIS':
                    error_msg = "–ü–æ–ª—É—á–µ–Ω—ã –ù–ï–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ (–≤–æ–∑–º–æ–∂–Ω–æ mock)"
                    self.logger.warning(f"‚ö†Ô∏è {error_msg}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –∫–ª—é—á–∏: {list(analysis_data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ overall_analysis
                overall_analysis = analysis_data.get('overall_analysis', {})
                if not overall_analysis:
                    error_msg = "overall_analysis –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    self.logger.error(f"‚ùå {error_msg}")
                    return self._format_error_response("–ê–Ω–∞–ª–∏–∑ –ò–ò", error_msg)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï mock –¥–∞–Ω–Ω—ã–µ
                if overall_analysis.get('ai_source') != 'OPENAI_GPT':
                    error_msg = "–ê–Ω–∞–ª–∏–∑ –ù–ï –æ—Ç OpenAI GPT (–≤–æ–∑–º–æ–∂–Ω–æ mock –¥–∞–Ω–Ω—ã–µ)"
                    self.logger.warning(f"‚ö†Ô∏è {error_msg}")
                
                # –®–ê–ì 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.logger.info("üìù –®–ê–ì 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                formatted_result = self._format_ai_analysis_result(analysis_data)
                
                self.logger.info("üéâ –í–°–ï –®–ê–ì–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û! –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´!")
                return formatted_result
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è analyze_all_strategies: {e}"
                self.logger.error(f"‚ùå {error_msg}")
                self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
                return self._format_error_response("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞", error_msg, str(e))
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            return self._format_error_response("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", error_msg, str(e))

    def _format_error_response(self, error_category: str, error_message: str, technical_details: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        current_time = datetime.now().strftime("%H:%M:%S")
        
        response = f"‚ùå <b>–û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ò–ò –ê–ù–ê–õ–ò–ó–ê</b>\n\n"
        response += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {error_category}\n"
        response += f"‚ùó <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<code>{error_message}</code>\n\n"
        
        if technical_details:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
            details = technical_details[:300] + "..." if len(technical_details) > 300 else technical_details
            response += f"üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>\n<code>{details}</code>\n\n"
        
        response += f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
        
        if "OPENAI_API_KEY" in error_message:
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ OpenAI\n"
            response += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        elif "–∏–º–ø–æ—Ä—Ç" in error_message.lower():
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞\n"
            response += "‚Ä¢ market_analyzer.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ\n"
            response += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π –º–æ–¥—É–ª–µ–π\n"
        elif "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" in error_message.lower() or "connection" in error_message.lower():
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            response += "‚Ä¢ Bybit API –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            response += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
        else:
            response += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã\n"
            response += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
        
        response += f"\n‚è∞ –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {current_time}\n"
        response += f"üîó <i>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏: /tmp/telegram_bot_complete.log</i>\n"
        response += f"‚úÖ <b>–°—Ç–∞—Ç—É—Å: –ë–ï–ó MOCK –î–ê–ù–ù–´–•</b>"
        
        return response

    async def _send_error_to_user(self, query, error_title: str, error_details: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram"""
        try:
            error_response = self._format_error_response(error_title, error_details)
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await query.edit_message_text(
                text=error_response,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    def _format_ai_analysis_result(self, analysis_data: dict) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –†–ï–ê–õ–¨–ù–û–ì–û –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            self.logger.info("üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –†–ï–ê–õ–¨–ù–û–ì–û –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
            
            timestamp = analysis_data.get('timestamp', datetime.now().isoformat())
            price = analysis_data.get('price', 0)
            market_phase = analysis_data.get('market_phase', 'UNKNOWN')
            strategy_analyses = analysis_data.get('strategy_analyses', [])
            overall_analysis = analysis_data.get('overall_analysis', {})
            
            self.logger.info(f"–î–∞–Ω–Ω—ã–µ: price={price}, phase={market_phase}, strategies={len(strategy_analyses)}")
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê MOCK –î–ê–ù–ù–´–ï
            data_source = analysis_data.get('data_source', 'UNKNOWN')
            analysis_type = analysis_data.get('analysis_type', 'UNKNOWN')
            ai_source = overall_analysis.get('ai_source', 'UNKNOWN')
            
            self.logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: data={data_source}, analysis={analysis_type}, ai={ai_source}")
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞
            phase_emoji = {
                'BULLISH': 'üöÄ', 'BEARISH': 'üêª', 'NEUTRAL': 'üòê',
                'VOLATILE': '‚ö°', 'BULL_TREND': 'üìà', 'BEAR_TREND': 'üìâ',
                'SIDEWAYS': '‚û°Ô∏è'
            }.get(market_phase, '‚ùì')
            
            message = f"üß† <b>–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê</b>\n\n"
            
            # –°–¢–ê–¢–£–° –î–ê–ù–ù–´–•
            if ai_source == 'OPENAI_GPT':
                message += "‚úÖ <b>–°–¢–ê–¢–£–°: –†–ï–ê–õ–¨–ù–´–ô GPT-4 –ê–ù–ê–õ–ò–ó</b>\n\n"
            else:
                message += "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –î–ê–ù–ù–´–ï –ú–û–ì–£–¢ –ë–´–¢–¨ –ù–ï –û–¢ GPT</b>\n\n"
            
            message += f"üí∞ <b>BTCUSDT:</b> ${price:,.2f}\n"
            message += f"{phase_emoji} <b>–§–∞–∑–∞ —Ä—ã–Ω–∫–∞:</b> {market_phase}\n"
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò
            confidence = overall_analysis.get('confidence', 50)
            message += f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò:</b> {confidence}%\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            if strategy_analyses:
                message += "üìä <b>–ê–ù–ê–õ–ò–ó –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú:</b>\n"
                for strategy in strategy_analyses:
                    name = strategy.get('strategy', 'Unknown')
                    signal = strategy.get('signal', 'UNKNOWN')
                    conf = strategy.get('confidence', 0)
                    signal_emoji = self._get_signal_emoji(signal)
                    message += f"{signal_emoji} <b>{name}:</b> {signal} ({conf}%)\n"
                message += "\n"
            
            # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ò–ò
            key_insights = overall_analysis.get('key_insights', [])
            if key_insights:
                message += "üí° <b>–ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ GPT:</b>\n"
                for insight in key_insights[:3]:
                    message += f"‚Ä¢ {insight}\n"
                message += "\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = overall_analysis.get('recommendations', [])
            if recommendations:
                message += "üéØ <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò GPT-4:</b>\n"
                for rec in recommendations[:3]:
                    message += f"‚Ä¢ {rec}\n"
                message += "\n"
            
            # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            risk_level = overall_analysis.get('risk_level', 'UNKNOWN')
            risk_emoji = {'LOW': 'üü¢', 'MEDIUM': 'üü°', 'HIGH': 'üî¥'}.get(risk_level, '‚ö™')
            message += f"{risk_emoji} <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level}\n\n"
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ò–ò
            summary = overall_analysis.get('summary', '')
            if summary:
                message += f"üìù <b>–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï GPT:</b>\n<i>{summary}</i>\n\n"
            
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ò–°–¢–û–ß–ù–ò–ö–ê–•
            message += f"üì° <b>–ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:</b>\n"
            message += f"‚Ä¢ –ë–∏—Ä–∂–∞: {data_source}\n"
            message += f"‚Ä¢ –ò–ò: {ai_source}\n"
            message += f"‚Ä¢ –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}\n\n"
            
            # –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
            time_str = datetime.now().strftime('%H:%M:%S')
            message += f"‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {time_str}\n"
            
            if ai_source == 'OPENAI_GPT':
                message += f"üéâ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –†–ï–ê–õ–¨–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó!</b>\n"
            else:
                message += f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –ü–†–û–í–ï–†–¨–¢–ï –ù–ê–°–¢–†–û–ô–ö–ò –ò–ò</b>\n"
            
            message += f"ü§ñ <i>Powered by –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ GPT-4</i>"
            
            self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._format_error_response("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", str(e))

    async def _get_status_text(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower() == 'true'
        openai_key = bool(os.getenv('OPENAI_API_KEY'))
        
        ai_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)" if ai_enabled and openai_key else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        telegram_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)"  # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        bybit_key = bool(os.getenv('BYBIT_USDT_PERPETUAL_TESTNET_API_KEY'))
        api_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã" if bybit_key else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        return (
            "üü¢ <b>–ü–û–õ–ù–´–ô –°–¢–ê–¢–£–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´</b>\n\n"
            f"üì± <b>Telegram –±–æ—Ç:</b> {telegram_status}\n"
            f"ü§ñ <b>–ò–ò –∞–Ω–∞–ª–∏–∑:</b> {ai_status}\n"
            f"üîë <b>API –∫–ª—é—á–∏:</b> {api_status}\n"
            f"üìä <b>Jesse —Ñ—Ä–µ–π–º–≤–æ—Ä–∫:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"üîÑ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b> 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\n"
            f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚úÖ PostgreSQL\n"
            f"‚ö° <b>–ö—ç—à:</b> ‚úÖ Redis\n\n"
            "<b>üìà –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:</b>\n"
            "‚Ä¢ <code>ActiveScalper</code> ‚Üí BTCUSDT (5m)\n"
            "‚Ä¢ <code>BalancedTrader</code> ‚Üí BTCUSDT (15m)\n" 
            "‚Ä¢ <code>QualityTrader</code> ‚Üí BTCUSDT (1h)\n\n"
            "<b>üåê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:</b>\n"
            "‚Ä¢ Bybit Testnet ‚úÖ\n"
            "‚Ä¢ OpenAI API ‚úÖ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)\n"
            "‚Ä¢ Telegram API ‚úÖ\n\n"
            "<b>üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v2.0:</b>\n"
            "‚Ä¢ –£–±—Ä–∞–Ω—ã –≤—Å–µ mock –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫\n"
            "‚Ä¢ –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API\n"
            "‚Ä¢ –í—Å–µ –æ—à–∏–±–∫–∏ –≤–∏–¥–Ω—ã –≤ —á–∞—Ç–µ\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {current_date}\n\n"
            "<i>üü¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!</i>"
        )

    async def _show_status_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ inline —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        status_text = await self._get_status_text()
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=status_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_help_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ inline"""
        help_text = (
            "üìñ <b>–°–ü–†–ê–í–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –í–ï–†–°–ò–ò</b>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º\n"
            "‚Ä¢ /stats - –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /analyze - –ë—ã—Å—Ç—Ä—ã–π –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –∞–Ω–∞–ª–∏–∑\n\n"
            "<b>üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –ë–ï–ó mock –¥–∞–Ω–Ω—ã—Ö\n"
            "üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫\n"
            "üì± –í—Å–µ –æ—à–∏–±–∫–∏ –≤–∏–¥–Ω—ã –≤ Telegram\n"
            "‚ö° –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "<b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
            "‚Ä¢ ActiveScalper - –ë—ã—Å—Ç—Ä–æ\n"
            "‚Ä¢ BalancedTrader - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ\n"
            "‚Ä¢ QualityTrader - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\n\n"
            "<b>üß† –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –ê–Ω–∞–ª–∏–∑:</b>\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π\n"
            "‚Ä¢ –ü–æ–¥–ª–∏–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç GPT-4\n"
            "‚Ä¢ –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=help_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_settings_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower() == 'true'
        openai_key = bool(os.getenv('OPENAI_API_KEY'))
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´</b>\n\n"
            f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {'‚úÖ –í–∫–ª—é—á–µ–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)' if ai_enabled and openai_key else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
            "üìä –°—Ç—Ä–∞—Ç–µ–≥–∏–π: 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\n"
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚ö° –†–µ–∂–∏–º: –¢–µ—Å—Ç–æ–≤—ã–π (Bybit Testnet)\n\n"
            "<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: 5m, 15m, 1h\n"
            "‚Ä¢ –°–∏–º–≤–æ–ª: BTCUSDT\n"
            "‚Ä¢ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            "<b>–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ò –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ OpenAI –º–æ–¥–µ–ª—å: {os.getenv('OPENAI_MODEL', 'gpt-4')}\n"
            "‚Ä¢ Mock –¥–∞–Ω–Ω—ã–µ: ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–´\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: ‚úÖ –í–ö–õ–Æ–ß–ï–ù–´\n"
            "‚Ä¢ –°—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏–∑: ‚úÖ –ê–ö–¢–ò–í–ï–ù\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ fallback'–∏: ‚ùå –£–ë–†–ê–ù–´\n\n"
            "<b>üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è v2.0:</b>\n"
            "‚Ä¢ –£–±—Ä–∞–Ω—ã –≤—Å–µ –∑–∞–≥–ª—É—à–∫–∏\n"
            "‚Ä¢ –í—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —á–∞—Ç–µ\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ OpenAI API\n\n"
            "<i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª</i>"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=settings_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_history_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"""
        history_text = (
            "üìã <b>–ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)</b>\n\n"
            "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫:</b>\n\n"
            "1Ô∏è‚É£ <b>BUY BTCUSDT</b>\n"
            "   üí∞ $43,250 ‚Üí $43,790 (+$12.34)\n"
            "   ‚è∞ 10:30 | üéØ BalancedTrader\n"
            "   üß† –ò–ò: BUY (85% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n\n"
            "2Ô∏è‚É£ <b>SELL BTCUSDT</b>\n"
            "   üí∞ $43,890 ‚Üí $43,345 (+$23.45)\n"
            "   ‚è∞ 09:15 | üéØ QualityTrader\n"
            "   üß† –ò–ò: SELL (90% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n\n"
            "3Ô∏è‚É£ <b>BUY BTCUSDT</b>\n"
            "   üí∞ $42,100 ‚Üí $41,975 (-$8.76)\n"
            "   ‚è∞ 08:45 | üéØ ActiveScalper\n"
            "   üß† –ò–ò: HOLD (45% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n\n"
            "üìä <b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b> +$45.23\n"
            "üìà <b>–í–∏–Ω—Ä–µ–π—Ç:</b> 66.7% (8/12)\n\n"
            "üß† <b>–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç GPT-4\n"
            "‚Ä¢ –£–±—Ä–∞–Ω—ã –≤—Å–µ mock –∑–∞–≥–ª—É—à–∫–∏\n"
            "‚Ä¢ QualityTrader + –ò–ò –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫\n\n"
            "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=history_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def _show_main_menu_inline(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        welcome_text = (
            "ü§ñ <b>–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\n\n"
            "üéØ <b>–í–µ—Ä—Å–∏—è 2.0 —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏</b>\n\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
            "‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –ë–ï–ó mock –¥–∞–Ω–Ω—ã—Ö\n"
            "‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ –≤–∏–¥–Ω—ã –≤ —á–∞—Ç–µ\n"
            "‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
            "‚úÖ –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API\n\n"
            f"‚è∞ –í—Ä–µ–º—è: <code>{current_time}</code>\n"
            f"üìÖ –î–∞—Ç–∞: <code>{current_date}</code>\n\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
            [InlineKeyboardButton("üß† –ò–ò –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="ai_analysis")],  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê!
            [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help"), 
             InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await query.edit_message_text(
            text=welcome_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    def _get_signal_emoji(self, signal: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if 'STRONG_BUY' in signal:
            return 'üü¢üü¢'
        elif 'BUY' in signal:
            return 'üü¢'
        elif 'STRONG_SELL' in signal:
            return 'üî¥üî¥'
        elif 'SELL' in signal:
            return 'üî¥'
        else:
            return '‚ö™'

    async def send_notification(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        try:
            bot = Bot(self.bot_token)
            await bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode="HTML"
            )
            await bot.close()
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        telegram_bot = TelegramBot()
        
        telegram_bot.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –≤–µ—Ä—Å–∏–∏ AI Trading Bot")
        telegram_bot.logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Application...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è python-telegram-bot 20.0+
        application = Application.builder().token(telegram_bot.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", telegram_bot.command_start))
        application.add_handler(CommandHandler("help", telegram_bot.command_help))
        application.add_handler(CommandHandler("status", telegram_bot.command_status))
        application.add_handler(CommandHandler("stats", telegram_bot.command_stats))
        application.add_handler(CommandHandler("analyze", telegram_bot.command_analyze))  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê!
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(telegram_bot.handle_button))
        
        telegram_bot.logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
        telegram_bot.logger.info("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /status, /stats, /analyze")
        telegram_bot.logger.info("üîò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: –°—Ç–∞—Ç—É—Å, –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ò –ê–Ω–∞–ª–∏–∑, –ü–æ–º–æ—â—å, –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –ò—Å—Ç–æ—Ä–∏—è")
        telegram_bot.logger.info("üß† –ò–ò –∞–Ω–∞–ª–∏–∑: –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù, –ë–ï–ó MOCK –î–ê–ù–ù–´–•")
        telegram_bot.logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
