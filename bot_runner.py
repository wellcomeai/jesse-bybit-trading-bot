# bot_runner.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
import os
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError, RetryAfter
from datetime import datetime
import asyncio
import concurrent.futures
import sys
import traceback

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('/tmp/telegram_bot_complete.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

class TelegramBot:
    """Telegram –±–æ—Ç —Å –î–ï–¢–ê–õ–¨–ù–´–ú –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.logger = setup_logging()
        
        if not self.bot_token or not self.chat_id:
            raise ValueError("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        self.logger.info(f"ü§ñ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _show_ai_analysis_inline(self, query):
        """–ò–°–ü–†–ê–í–õ–ï–ù: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            self.logger.info("üß† === –ù–ê–ß–ê–õ–û –ò–ò –ê–ù–ê–õ–ò–ó–ê ===")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            await query.edit_message_text(
                "ü§ñ <b>–ó–ê–ü–£–°–ö –ò–ò –ê–ù–ê–õ–ò–ó–ê –†–´–ù–ö–ê</b>\n\n"
                "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...\n"
                "üîç –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ OpenAI API...\n"
                "üìä –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Å Bybit...\n\n"
                "<i>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è...</i>",
                parse_mode="HTML"
            )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            analysis_result = await self._perform_ai_analysis_with_detailed_logging()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="ai_analysis")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await query.edit_message_text(
                analysis_result,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            self.logger.info("‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –≤ _show_ai_analysis_inline: {e}")
            self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            
            await self._send_error_to_user(query, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ", str(e))

    async def _perform_ai_analysis_with_detailed_logging(self) -> str:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –í—ã–ø–æ–ª–Ω—è–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.logger.info("üîç –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower()
            openai_key = os.getenv('OPENAI_API_KEY')
            
            self.logger.info(f"  AI_ANALYSIS_ENABLED = '{ai_enabled}'")
            self.logger.info(f"  OPENAI_API_KEY = '{openai_key[:10] if openai_key else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}...'")
            
            if ai_enabled != 'true':
                error_msg = f"AI_ANALYSIS_ENABLED = '{ai_enabled}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'true')"
                self.logger.error(f"‚ùå {error_msg}")
                return self._format_error_response("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", error_msg)
            
            if not openai_key:
                error_msg = "OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
                self.logger.error(f"‚ùå {error_msg}")
                return self._format_error_response("API –∫–ª—é—á", error_msg)
            
            if len(openai_key) < 20:
                error_msg = f"OPENAI_API_KEY –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π ({len(openai_key)} —Å–∏–º–≤–æ–ª–æ–≤)"
                self.logger.warning(f"‚ö†Ô∏è {error_msg}")
            
            self.logger.info("‚úÖ –®–ê–ì 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
            # –®–ê–ì 2: –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MarketAnalyzer
            self.logger.info("üì¶ –®–ê–ì 2: –ò–º–ø–æ—Ä—Ç MarketAnalyzer")
            
            try:
                from market_analyzer import MarketAnalyzer
                self.logger.info("‚úÖ MarketAnalyzer —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MarketAnalyzer: {e}"
                self.logger.error(f"‚ùå {error_msg}")
                self.logger.error(f"–ü—É—Ç—å Python: {sys.path}")
                return self._format_error_response("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è", error_msg)
            
            # –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            self.logger.info("üèóÔ∏è –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MarketAnalyzer")
            
            try:
                analyzer = MarketAnalyzer()
                self.logger.info("‚úÖ MarketAnalyzer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MarketAnalyzer: {e}"
                self.logger.error(f"‚ùå {error_msg}")
                self.logger.error(f"Traceback: {traceback.format_exc()}")
                return self._format_error_response("–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", error_msg)
            
            # –®–ê–ì 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            self.logger.info("üî¨ –®–ê–ì 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ analyze_all_strategies")
            
            try:
                analysis_data = await analyzer.analyze_all_strategies()
                self.logger.info("‚úÖ analyze_all_strategies –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                if not analysis_data or not isinstance(analysis_data, dict):
                    error_msg = f"analyze_all_strategies –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {type(analysis_data)}"
                    self.logger.error(f"‚ùå {error_msg}")
                    return self._format_error_response("–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞", error_msg)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –∫–ª—é—á–∏: {list(analysis_data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ overall_analysis
                overall_analysis = analysis_data.get('overall_analysis', {})
                if not overall_analysis:
                    self.logger.warning("‚ö†Ô∏è overall_analysis –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # –®–ê–ì 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.logger.info("üìù –®–ê–ì 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                formatted_result = self._format_ai_analysis_result(analysis_data)
                
                self.logger.info("‚úÖ –í–°–ï –®–ê–ì–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                return formatted_result
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è analyze_all_strategies: {e}"
                self.logger.error(f"‚ùå {error_msg}")
                self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
                return self._format_error_response("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞", error_msg, str(e))
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            return self._format_error_response("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", error_msg, str(e))

    def _format_error_response(self, error_category: str, error_message: str, technical_details: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        current_time = datetime.now().strftime("%H:%M:%S")
        
        response = f"‚ùå <b>–û–®–ò–ë–ö–ê –ò–ò –ê–ù–ê–õ–ò–ó–ê</b>\n\n"
        response += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {error_category}\n"
        response += f"‚ùó <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<code>{error_message}</code>\n\n"
        
        if technical_details:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
            details = technical_details[:300] + "..." if len(technical_details) > 300 else technical_details
            response += f"üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>\n<code>{details}</code>\n\n"
        
        response += f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
        
        if "OPENAI_API_KEY" in error_message:
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ OpenAI\n"
            response += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
        elif "–∏–º–ø–æ—Ä—Ç" in error_message.lower():
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞\n"
            response += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π –º–æ–¥—É–ª–µ–π\n"
        elif "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" in error_message.lower() or "connection" in error_message.lower():
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            response += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
        else:
            response += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã\n"
        
        response += f"\n‚è∞ –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {current_time}\n"
        response += f"üîó <i>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–º. –≤ –∫–æ–Ω—Å–æ–ª–∏/—Ñ–∞–π–ª–∞—Ö</i>"
        
        return response

    async def _send_error_to_user(self, query, error_title: str, error_details: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram"""
        try:
            error_response = self._format_error_response(error_title, error_details)
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await query.edit_message_text(
                text=error_response,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    def _format_ai_analysis_result(self, analysis_data: dict) -> str:
        """–û–ë–ù–û–í–õ–ï–ù: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.info("üìù –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
            
            timestamp = analysis_data.get('timestamp', datetime.now().isoformat())
            price = analysis_data.get('price', 0)
            market_phase = analysis_data.get('market_phase', 'UNKNOWN')
            strategy_analyses = analysis_data.get('strategy_analyses', [])
            overall_analysis = analysis_data.get('overall_analysis', {})
            
            self.logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: price={price}, phase={market_phase}, strategies={len(strategy_analyses)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ mock
            if isinstance(overall_analysis, dict):
                summary = overall_analysis.get('summary', '')
                if '–±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑' in summary.lower() or 'mock' in summary.lower():
                    self.logger.warning("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ MOCK –î–ê–ù–ù–´–ï –í –ê–ù–ê–õ–ò–ó–ï!")
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞
            phase_emoji = {
                'BULLISH': 'üöÄ', 'BEARISH': 'üêª', 'NEUTRAL': 'üòê',
                'VOLATILE': '‚ö°', 'BULL_TREND': 'üìà', 'BEAR_TREND': 'üìâ',
                'SIDEWAYS': '‚û°Ô∏è'
            }.get(market_phase, '‚ùì')
            
            message = f"üß† <b>–†–ï–ê–õ–¨–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê</b>\n\n"
            message += f"üí∞ <b>BTCUSDT:</b> ${price:,.2f}\n"
            message += f"{phase_emoji} <b>–§–∞–∑–∞ —Ä—ã–Ω–∫–∞:</b> {market_phase}\n"
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò
            confidence = overall_analysis.get('confidence', 50)
            message += f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò:</b> {confidence}%\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            if strategy_analyses:
                message += "üìä <b>–ê–ù–ê–õ–ò–ó –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú:</b>\n"
                for strategy in strategy_analyses:
                    name = strategy.get('strategy', 'Unknown')
                    signal = strategy.get('signal', 'UNKNOWN')
                    conf = strategy.get('confidence', 0)
                    signal_emoji = self._get_signal_emoji(signal)
                    message += f"{signal_emoji} <b>{name}:</b> {signal} ({conf}%)\n"
                message += "\n"
            
            # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ò–ò
            key_insights = overall_analysis.get('key_insights', [])
            if key_insights:
                message += "üí° <b>–ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ GPT:</b>\n"
                for insight in key_insights[:3]:
                    message += f"‚Ä¢ {insight}\n"
                message += "\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = overall_analysis.get('recommendations', [])
            if recommendations:
                message += "üéØ <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò GPT-4:</b>\n"
                for rec in recommendations[:3]:
                    message += f"‚Ä¢ {rec}\n"
                message += "\n"
            
            # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            risk_level = overall_analysis.get('risk_level', 'UNKNOWN')
            risk_emoji = {'LOW': 'üü¢', 'MEDIUM': 'üü°', 'HIGH': 'üî¥'}.get(risk_level, '‚ö™')
            message += f"{risk_emoji} <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level}\n\n"
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ò–ò
            summary = overall_analysis.get('summary', '')
            if summary:
                message += f"üìù <b>–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï GPT:</b>\n<i>{summary}</i>\n\n"
            
            # –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–æ —ç—Ç–æ –ù–ï mock
            time_str = datetime.now().strftime('%H:%M:%S')
            message += f"‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {time_str}\n"
            message += f"‚úÖ <b>–°–¢–ê–¢–£–°: –†–ï–ê–õ–¨–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó</b>\n"
            message += f"ü§ñ <i>Powered by GPT-4 & Jesse Framework</i>"
            
            self.logger.info("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._format_error_response("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", str(e))

    def _get_signal_emoji(self, signal: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if 'STRONG_BUY' in signal:
            return 'üü¢üü¢'
        elif 'BUY' in signal:
            return 'üü¢'
        elif 'STRONG_SELL' in signal:
            return 'üî¥üî¥'
        elif 'SELL' in signal:
            return 'üî¥'
        else:
            return '‚ö™'

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    async def command_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
                [InlineKeyboardButton("üß† –ò–ò –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="ai_analysis")],
                [InlineKeyboardButton("üìà –ü–æ–º–æ—â—å", callback_data="help"), 
                 InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            welcome_text = (
                "ü§ñ <b>AI Trading Bot –∞–∫—Ç–∏–≤–µ–Ω!</b>\n\n"
                "üéØ <b>–° –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫</b>\n\n"
                "‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—à–∏–±–∫–∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–Ω—ã\n"
                "‚úÖ Mock –¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω—ã\n"
                "‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n\n"
                f"‚è∞ –í—Ä–µ–º—è: <code>{datetime.now().strftime('%H:%M:%S')}</code>\n\n"
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
            )
            
            await update.message.reply_text(
                welcome_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}")

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()
            
            self.logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
            
            if query.data == "ai_analysis":
                await self._show_ai_analysis_inline(query)
            elif query.data == "status":
                await self._show_status_inline(query)
            # ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        telegram_bot = TelegramBot()
        telegram_bot.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û AI Trading Bot")
        
        application = Application.builder().token(telegram_bot.bot_token).build()
        
        application.add_handler(CommandHandler("start", telegram_bot.command_start))
        application.add_handler(CallbackQueryHandler(telegram_bot.handle_button))
        
        telegram_bot.logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã - –û–®–ò–ë–ö–ò –ò–ò –ê–ù–ê–õ–ò–ó–ê –¢–ï–ü–ï–†–¨ –í–ò–î–ù–´")
        
        application.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
