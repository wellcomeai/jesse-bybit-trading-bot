# enhanced_strategy_base.py - –ì–û–¢–û–í–ê–Ø –ö –î–ï–ü–õ–û–Æ –í–ï–†–°–ò–Ø
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–ò –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö, –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å Jesse event loop

from jesse.strategies import Strategy
import threading
import time
import os
import logging
from typing import Dict, Any, Optional


class EnhancedStrategy(Strategy):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º
    –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Jesse Strategy, –¥–æ–±–∞–≤–ª—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    """
    
    def __init__(self):
        super().__init__()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.enable_ai_analysis = self._check_ai_enabled()
        self.enable_notifications = self._check_telegram_enabled()
        
        # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ (–∏–∑–±–µ–≥–∞–µ–º —Å–ø–∞–º–∞)
        self.last_analysis_time = {}
        self.min_analysis_gap = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self.enable_ai_analysis:
            self.log("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –í–ö–õ–Æ–ß–ï–ù")
        else:
            self.log("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –û–¢–ö–õ–Æ–ß–ï–ù")
            
        if self.enable_notifications:
            self.log("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–ö–õ–Æ–ß–ï–ù–´")
        else:
            self.log("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–´")
    
    def _check_ai_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            ai_enabled = os.getenv('AI_ANALYSIS_ENABLED', 'false').lower() in ('true', '1', 'yes')
            openai_key = bool(os.getenv('OPENAI_API_KEY'))
            return ai_enabled and openai_key
        except Exception:
            return False
    
    def _check_telegram_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram"""
        try:
            telegram_enabled = os.getenv('TELEGRAM_ENABLED', 'false').lower() in ('true', '1', 'yes')
            bot_token = bool(os.getenv('TELEGRAM_BOT_TOKEN'))
            chat_id = bool(os.getenv('TELEGRAM_CHAT_ID'))
            return telegram_enabled and bot_token and chat_id
        except Exception:
            return False
    
    def _trigger_ai_analysis_async(self, signal_type: str, reason: str, additional_data: Dict = None):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å Jesse
        """
        if not self.enable_ai_analysis:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∞–Ω–∞–ª–∏–∑–æ–≤
        strategy_name = self.__class__.__name__
        current_time = time.time()
        
        if (strategy_name in self.last_analysis_time and 
            current_time - self.last_analysis_time[strategy_name] < self.min_analysis_gap):
            self.log(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ ({self.min_analysis_gap}—Å)")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            signal_data = self._collect_signal_data(signal_type, reason, additional_data)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º daemon –ø–æ—Ç–æ–∫–µ
        def run_analysis_in_thread():
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                import asyncio
                
                # –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô event loop —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                async def perform_analysis():
                    try:
                        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        from ai_analysis.openai_analyzer import OpenAIAnalyzer
                        from ai_analysis.market_context import MarketContextCollector
                        
                        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
                        analyzer = OpenAIAnalyzer()
                        context_collector = MarketContextCollector()
                        
                        self.log(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")
                        
                        # –°–æ–±–∏—Ä–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        market_data = await context_collector.collect_context(
                            symbol=self.symbol,
                            timeframe=self.timeframe,
                            candles_data=self.candles
                        )
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑
                        ai_analysis = await analyzer.analyze_signal(signal_data, market_data)
                        
                        if ai_analysis:
                            recommendation = ai_analysis.get('recommendation', 'UNKNOWN')
                            confidence = ai_analysis.get('confidence', 0)
                            self.log(f"‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {recommendation} ({confidence}%)")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                            if self.enable_notifications:
                                await self._send_notification_async(signal_data, ai_analysis)
                        else:
                            self.log("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        self.last_analysis_time[strategy_name] = current_time
                        
                    except Exception as e:
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —ç—Ç–æ–º event loop
                loop.run_until_complete(perform_analysis())
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}")
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º event loop
                try:
                    loop.close()
                except Exception:
                    pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ daemon –ø–æ—Ç–æ–∫–µ (–∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
        analysis_thread = threading.Thread(
            target=run_analysis_in_thread, 
            daemon=True,
            name=f"AI_Analysis_{strategy_name}_{int(current_time)}"
        )
        analysis_thread.start()
        
        self.log(f"üöÄ –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ: {analysis_thread.name}")
    
    async def _send_notification_async(self, signal_data: Dict, ai_analysis: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram"""
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
            from notifications.telegram_bot import TelegramNotifier
            from notifications.message_formatter import MessageFormatter
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            notifier = TelegramNotifier()
            formatter = MessageFormatter()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = formatter.format_analysis_message(signal_data, ai_analysis)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            success = await notifier.send_message_safe(message)
            
            if success:
                self.log("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _collect_signal_data(self, signal_type: str, reason: str, additional_data: Dict = None) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            return {
                'strategy': self.__class__.__name__,
                'signal_type': signal_type,  # 'LONG', 'SHORT', 'EXIT'
                'reason': reason,
                'price': float(self.close),
                'timestamp': int(time.time()),
                'symbol': self.symbol,
                'timeframe': self.timeframe,
                'exchange': self.exchange,
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                'candles_data': {
                    'recent_candles': self._get_recent_candles_data(20),
                    'current_volume': float(self.candles[-1, 5]) if len(self.candles) > 0 else 0,
                },
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
                'indicators': self._get_current_indicators(),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                'additional_data': additional_data or {}
            }
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return {
                'strategy': self.__class__.__name__,
                'signal_type': signal_type,
                'reason': reason,
                'price': float(self.close) if hasattr(self, 'close') else 0,
                'timestamp': int(time.time()),
                'symbol': getattr(self, 'symbol', 'UNKNOWN'),
                'timeframe': getattr(self, 'timeframe', 'UNKNOWN'),
                'exchange': getattr(self, 'exchange', 'UNKNOWN'),
                'error': 'Failed to collect full data'
            }
    
    def _get_recent_candles_data(self, count: int = 20) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π"""
        try:
            if not hasattr(self, 'candles') or len(self.candles) == 0:
                return []
            
            actual_count = min(count, len(self.candles))
            candles_list = []
            
            for i in range(-actual_count, 0):
                candle = self.candles[i]
                candles_list.append({
                    'timestamp': int(candle[0]) if len(candle) > 0 else 0,
                    'open': float(candle[1]) if len(candle) > 1 else 0,
                    'high': float(candle[2]) if len(candle) > 2 else 0,
                    'low': float(candle[3]) if len(candle) > 3 else 0,
                    'close': float(candle[4]) if len(candle) > 4 else 0,
                    'volume': float(candle[5]) if len(candle) > 5 else 0,
                })
            
            return candles_list
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {e}")
            return []
    
    def _get_current_indicators(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö)"""
        indicators = {}
        
        try:
            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if hasattr(self, 'rsi'):
                indicators['rsi'] = float(self.rsi)
            if hasattr(self, 'ema21'):
                indicators['ema21'] = float(self.ema21)
            if hasattr(self, 'ema50'):
                indicators['ema50'] = float(self.ema50)
            if hasattr(self, 'bb_upper'):
                indicators['bb_upper'] = float(self.bb_upper)
            if hasattr(self, 'bb_lower'):
                indicators['bb_lower'] = float(self.bb_lower)
            if hasattr(self, 'atr'):
                indicators['atr'] = float(self.atr)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if hasattr(self, 'close'):
                indicators['current_price'] = float(self.close)
                
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        
        return indicators
    
    # === –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –í–•–û–î–ê ===
    
    def go_long(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º go_long –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É Jesse
            super().go_long()
            self.log(f"üìà LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–∞ {self.symbol} –ø–æ —Ü–µ–Ω–µ {self.close}")
            
            # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.enable_ai_analysis:
                self._trigger_ai_analysis_async(
                    signal_type='LONG',
                    reason=getattr(self, 'entry_reason', 'Strategy signal'),
                    additional_data={
                        'entry_price': float(self.close),
                        'position_size': getattr(self, '_position_size', 0)
                    }
                )
            else:
                self.log("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–∞")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ go_long: {e}")
            # –ù–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª–µ –µ—Å–ª–∏ –ò–ò –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–º–∞–ª—Å—è
    
    def go_short(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º go_short –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É Jesse
            super().go_short()
            self.log(f"üìâ SHORT –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–∞ {self.symbol} –ø–æ —Ü–µ–Ω–µ {self.close}")
            
            # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.enable_ai_analysis:
                self._trigger_ai_analysis_async(
                    signal_type='SHORT',
                    reason=getattr(self, 'entry_reason', 'Strategy signal'),
                    additional_data={
                        'entry_price': float(self.close),
                        'position_size': getattr(self, '_position_size', 0)
                    }
                )
            else:
                self.log("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–∞")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ go_short: {e}")
            # –ù–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª–µ –µ—Å–ª–∏ –ò–ò –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–º–∞–ª—Å—è
    
    def on_close_position(self, order):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(super(), 'on_close_position'):
                super().on_close_position(order)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            pnl = float(self.position.pnl) if hasattr(self, 'position') and self.position else 0
            self.log(f"üèÅ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ {self.symbol}. P&L: ${pnl:.2f}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ (–µ—Å–ª–∏ –ò–ò –≤–∫–ª—é—á–µ–Ω)
            if self.enable_ai_analysis:
                self._trigger_ai_analysis_async(
                    signal_type='EXIT',
                    reason='Position closed',
                    additional_data={
                        'exit_price': float(order.price) if hasattr(order, 'price') else float(self.close),
                        'pnl': pnl,
                        'exit_reason': 'TP_SL_or_Manual'
                    }
                )
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_close_position: {e}")
            # –ù–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∑–∞–∫—Ä—ã—Ç–∏—é –ø–æ–∑–∏—Ü–∏–∏
