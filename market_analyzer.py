# market_analyzer.py - –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import asyncio
from typing import Dict, Any, List
import requests
import numpy as np
from datetime import datetime
import logging
import traceback
import os

class MarketAnalyzer:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö fallback'–æ–≤ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategies = [
            {'name': 'ActiveScalper', 'timeframe': '5m'},
            {'name': 'BalancedTrader', 'timeframe': '15m'}, 
            {'name': 'QualityTrader', 'timeframe': '1h'}
        ]
        
        self.logger.info("üèóÔ∏è MarketAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ë–ï–ó mock –¥–∞–Ω–Ω—ã—Ö)")

    async def analyze_all_strategies(self) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –∞–Ω–∞–ª–∏–∑ –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö fallback'–æ–≤"""
        try:
            self.logger.info("üöÄ === –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê –í–°–ï–• –°–¢–†–ê–¢–ï–ì–ò–ô ===")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            self.logger.info("üìä –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Bybit")
            current_data = await self._get_current_market_data_safe()
            
            if not current_data or current_data.get('price', 0) == 0:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ Bybit")
            
            self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –ø–æ–ª—É—á–µ–Ω—ã: —Ü–µ–Ω–∞ ${current_data['price']:,.2f}")
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            self.logger.info("üéØ –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            strategy_analyses = []
            
            for strategy in self.strategies:
                self.logger.info(f"  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {strategy['name']}...")
                analysis = self._analyze_strategy_sync(strategy, current_data)
                strategy_analyses.append(analysis)
                self.logger.info(f"  ‚úÖ {strategy['name']}: {analysis['signal']} ({analysis['confidence']}%)")
            
            # 3. –ò–ò –∞–Ω–∞–ª–∏–∑ (–ö–†–ò–¢–ò–ß–ù–û: –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö fallback'–æ–≤!)
            self.logger.info("üß† –®–ê–ì 3: –ó–∞–ø—É—Å–∫ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ (OpenAI)")
            overall_analysis = await self._get_ai_market_overview_strict(strategy_analyses, current_data)
            
            if not overall_analysis or 'error' in overall_analysis:
                # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ! –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É!
                error_msg = overall_analysis.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞') if overall_analysis else '–ò–ò –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                raise Exception(f"–û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {error_msg}")
            
            self.logger.info(f"‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {overall_analysis.get('market_phase', 'UNKNOWN')}")
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'timestamp': current_data['timestamp'],
                'price': current_data['price'],
                'strategy_analyses': strategy_analyses,
                'overall_analysis': overall_analysis,
                'market_phase': self._determine_market_phase(strategy_analyses),
                'recommendations': overall_analysis.get('recommendations', []),
                'data_source': 'REAL_API_DATA',  # –ú–∞—Ä–∫–µ—Ä —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ
                'analysis_type': 'FULL_AI_ANALYSIS'  # –ú–∞—Ä–∫–µ—Ä —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω—ã–π
            }
            
            self.logger.info("üéâ === –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===")
            return result
            
        except Exception as e:
            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ! 
            self.logger.error(f"‚ùå –û–®–ò–ë–ö–ê –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            self.logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ù–ï mock –¥–∞–Ω–Ω—ã–µ!
            raise Exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ MarketAnalyzer: {e}")

    async def _get_current_market_data_safe(self) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Bybit —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            self.logger.info("üåê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Bybit API...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            response = requests.get(
                'https://api-testnet.bybit.com/v5/market/kline',
                params={
                    'category': 'linear',
                    'symbol': 'BTCUSDT',
                    'interval': '5',
                    'limit': 50
                },
                timeout=15  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            )
            
            self.logger.info(f"üì° –û—Ç–≤–µ—Ç Bybit API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            if response.status_code != 200:
                raise Exception(f"Bybit API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
            data = response.json()
            self.logger.info(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}")
            
            if data.get('retCode') != 0:
                error_msg = data.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Bybit API')
                raise Exception(f"–û—à–∏–±–∫–∞ Bybit API: {error_msg} (–∫–æ–¥: {data.get('retCode')})")
            
            candles = data['result']['list']
            self.logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")
            
            if not candles:
                raise Exception("Bybit API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            candle_data = []
            for i, candle in enumerate(candles[:20]):
                try:
                    candle_data.append([
                        int(candle[0]),      # timestamp
                        float(candle[1]),    # open
                        float(candle[2]),    # high
                        float(candle[3]),    # low
                        float(candle[4]),    # close
                        float(candle[5])     # volume
                    ])
                except (ValueError, IndexError) as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ {i}: {e}")
            
            if not candle_data:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ –∏–∑ Bybit")
            
            candles_array = np.array(candle_data)
            current_price = float(candles[0][4])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            if len(candles) >= 10:
                old_price = float(candles[10][4])
                change_24h = ((current_price - old_price) / old_price) * 100
            else:
                change_24h = 0
            
            result = {
                'timestamp': candles[0][0],
                'price': current_price,
                'candles': candles_array,
                'volume_24h': sum([float(c[5]) for c in candles[:20]]),
                'change_24h': change_24h,
                'data_source': 'BYBIT_TESTNET_API'
            }
            
            self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: —Ü–µ–Ω–∞=${current_price:,.2f}, –∏–∑–º.24—á={change_24h:+.2f}%")
            return result
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Bybit: {e}")
            # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Bybit: {e}")

    def _analyze_strategy_sync(self, strategy: Dict, market_data: Dict) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        candles = market_data['candles']
        current_price = market_data['price']
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if strategy['name'] == 'ActiveScalper':
            signal = self._get_scalper_signal(current_price, candles)
            confidence = 75 if 'BUY' in signal else 60
        elif strategy['name'] == 'BalancedTrader':
            signal = self._get_balanced_signal(current_price, market_data['change_24h'])
            confidence = 70 if abs(market_data['change_24h']) < 3 else 50
        elif strategy['name'] == 'QualityTrader':
            signal = self._get_quality_signal(current_price, market_data['volume_24h'])
            confidence = 80 if market_data['volume_24h'] > 500000 else 40
        else:
            signal = 'NEUTRAL'
            confidence = 50
        
        return {
            'strategy': strategy['name'],
            'timeframe': strategy['timeframe'],
            'signal': signal,
            'confidence': confidence,
            'current_price': current_price
        }

    def _get_scalper_signal(self, price: float, candles: np.ndarray) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∫–∞–ª—å–ø–µ—Ä–∞"""
        if len(candles) < 5:
            return 'NEUTRAL'
        
        recent_closes = candles[-5:, 4]
        avg_price = np.mean(recent_closes)
        
        if price > avg_price * 1.002:
            return 'BUY'
        elif price < avg_price * 0.998:
            return 'SELL'
        else:
            return 'NEUTRAL'

    def _get_balanced_signal(self, price: float, change_24h: float) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if change_24h > 2:
            return 'BUY'
        elif change_24h < -2:
            return 'SELL'
        else:
            return 'HOLD'

    def _get_quality_signal(self, price: float, volume_24h: float) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if volume_24h > 800000:
            if price > 43000:
                return 'STRONG_BUY'
            else:
                return 'BUY'
        elif volume_24h < 300000:
            return 'NEUTRAL'
        else:
            return 'HOLD'

    async def _get_ai_market_overview_strict(self, strategy_analyses: List, market_data: Dict) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç—Ä–æ–≥–∏–π –ò–ò –∞–Ω–∞–ª–∏–∑ –ë–ï–ó fallback'–æ–≤ –Ω–∞ mock"""
        try:
            self.logger.info("üß† –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–æ–≥–æ–≥–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI –∫–ª—é—á–∞
            openai_key = os.getenv('OPENAI_API_KEY')
            if not openai_key:
                raise Exception("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            self.logger.info(f"üîë OpenAI –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(openai_key)})")
            
            # –†–ï–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            import aiohttp
            
            prompt = self._build_market_analysis_prompt(strategy_analyses, market_data)
            self.logger.info(f"üìù –ü—Ä–æ–º–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            headers = {
                'Authorization': f'Bearer {openai_key}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                'model': os.getenv('OPENAI_MODEL', 'gpt-4'),
                'messages': [
                    {
                        "role": "system", 
                        "content": self._get_market_analysis_system_prompt()
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                'temperature': 0.3,
                'max_tokens': 1500
            }
            
            self.logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI API (–º–æ–¥–µ–ª—å: {payload['model']})")
            
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post('https://api.openai.com/v1/chat/completions', 
                                      headers=headers, json=payload) as response:
                    
                    self.logger.info(f"üì° –û—Ç–≤–µ—Ç OpenAI: —Å—Ç–∞—Ç—É—Å {response.status}")
                    
                    if response.status == 401:
                        raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI API - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                    elif response.status == 429:
                        raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI API")
                    elif response.status == 500:
                        raise Exception("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OpenAI")
                    elif response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"OpenAI API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                    
                    data = await response.json()
                    self.logger.info("‚úÖ –û—Ç–≤–µ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                    
                    if 'choices' not in data or not data['choices']:
                        raise Exception("OpenAI API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ choices")
                    
                    ai_text = data['choices'][0]['message']['content']
                    self.logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç GPT (–¥–ª–∏–Ω–∞: {len(ai_text)})")
                    
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                    parsed_analysis = self._parse_ai_response_strict(ai_text)
                    
                    if not parsed_analysis or 'error' in parsed_analysis:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç GPT: {parsed_analysis}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑
                    parsed_analysis['ai_source'] = 'OPENAI_GPT'
                    parsed_analysis['analysis_type'] = 'REAL_AI'
                    parsed_analysis['timestamp'] = datetime.now().isoformat()
                    
                    self.logger.info("‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                    return parsed_analysis
                    
        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –í–ê–ñ–ù–û: –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ!
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π
            return {
                'error': str(e),
                'error_type': 'AI_ANALYSIS_FAILED',
                'timestamp': datetime.now().isoformat()
            }

    def _build_market_analysis_prompt(self, strategy_analyses: List, market_data: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
        price = market_data.get('price', 0)
        change_24h = market_data.get('change_24h', 0)
        volume_24h = market_data.get('volume_24h', 0)
        
        prompt = f"""–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê BTC:

=== –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï ===
–¶–µ–Ω–∞: ${price:,.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {change_24h:+.2f}%
–û–±—ä–µ–º 24—á: {volume_24h:,.0f}
–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Bybit Testnet API

=== –ê–ù–ê–õ–ò–ó –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú ==="""

        for analysis in strategy_analyses:
            prompt += f"""

{analysis['strategy']} ({analysis['timeframe']}):
- –°–∏–≥–Ω–∞–ª: {analysis['signal']}
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']}%"""

        prompt += f"""

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ BTC –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–Ω–µ JSON.
"""
        
        return prompt

    def _get_market_analysis_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤.

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ BTC –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
    "market_phase": "BULLISH|BEARISH|NEUTRAL|VOLATILE",
    "confidence": 0-100,
    "key_insights": ["–∏–Ω—Å–∞–π—Ç1", "–∏–Ω—Å–∞–π—Ç2", "–∏–Ω—Å–∞–π—Ç3"],
    "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è3"],
    "risk_level": "LOW|MEDIUM|HIGH",
    "summary": "–∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
}

–ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –≤–Ω–µ JSON. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON."""

    def _parse_ai_response_strict(self, response_text: str) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç—Ä–æ–≥–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ fallback'–æ–≤"""
        try:
            import json
            
            self.logger.info("üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT...")
            self.logger.info(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response_text[:200]}...")
            
            # –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}')
            
            if start_idx == -1 or end_idx == -1:
                raise ValueError(f"JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ GPT. –ù–∞—á–∞–ª–æ: {start_idx}, –∫–æ–Ω–µ—Ü: {end_idx}")
            
            json_text = response_text[start_idx:end_idx + 1]
            self.logger.info(f"üéØ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON: {json_text}")
            
            parsed = json.loads(json_text)
            self.logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –∫–ª—é—á–∏: {list(parsed.keys())}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['market_phase', 'confidence', 'summary']
            missing_fields = [field for field in required_fields if field not in parsed]
            
            if missing_fields:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ GPT: {missing_fields}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            if not isinstance(parsed.get('confidence'), (int, float)) or not (0 <= parsed['confidence'] <= 100):
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ confidence: {parsed.get('confidence')}")
            
            self.logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ GPT –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return parsed
                
        except json.JSONDecodeError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            raise Exception(error_msg)
        
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ GPT: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            raise Exception(error_msg)

    def _determine_market_phase(self, strategy_analyses: List) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â—É—é —Ñ–∞–∑—É —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        buy_signals = sum(1 for analysis in strategy_analyses if 'BUY' in analysis['signal'])
        sell_signals = sum(1 for analysis in strategy_analyses if 'SELL' in analysis['signal'])
        
        if buy_signals > sell_signals + 1:
            return "BULLISH"
        elif sell_signals > buy_signals + 1:
            return "BEARISH"
        else:
            return "NEUTRAL"
