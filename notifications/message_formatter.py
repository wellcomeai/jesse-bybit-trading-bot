# notifications/message_formatter.py
"""
–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
"""
from datetime import datetime
from typing import Dict, Any


class MessageFormatter:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    
    def __init__(self):
        self.max_message_length = 4096  # –õ–∏–º–∏—Ç Telegram
    
    def format_analysis_message(self, signal_data: Dict[str, Any], ai_analysis: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        strategy = signal_data.get('strategy', 'Unknown')
        signal_type = signal_data.get('signal_type', 'Unknown')
        symbol = signal_data.get('symbol', 'Unknown')
        price = signal_data.get('price', 0)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ò–ò
        recommendation = ai_analysis.get('recommendation', 'UNKNOWN')
        confidence = ai_analysis.get('confidence', 0)
        risk_level = ai_analysis.get('risk_level', 'UNKNOWN')
        summary = ai_analysis.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_emoji = {
            'BUY': 'üöÄ',
            'SELL': 'üìâ', 
            'HOLD': '‚è≥',
            'AVOID': '‚õî'
        }.get(recommendation, '‚ùì')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        signal_emoji = 'üü¢' if signal_type == 'LONG' else 'üî¥' if signal_type == 'SHORT' else 'üü°'
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∏—Å–∫–∞
        risk_emoji = {
            'LOW': 'üü¢',
            'MEDIUM': 'üü°',
            'HIGH': 'üî¥'
        }.get(risk_level, '‚ö™')
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"ü§ñ <b>–ò–ò –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–ê</b>\n\n"
        
        message += f"{signal_emoji} <b>{signal_type}</b> ‚Ä¢ {symbol}\n"
        message += f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{strategy}</code>\n"
        message += f"üí∞ –¶–µ–Ω–∞: <b>${price:,.2f}</b>\n"
        message += f"‚è∞ –í—Ä–µ–º—è: {datetime.fromtimestamp(signal_data.get('timestamp', 0)).strftime('%H:%M:%S')}\n\n"
        
        message += f"üß† <b>–ò–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø</b>\n"
        message += f"{rec_emoji} <b>{recommendation}</b>\n"
        message += f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{confidence}%</b>\n"
        message += f"{risk_emoji} –†–∏—Å–∫: <b>{risk_level}</b>\n\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        key_factors = ai_analysis.get('key_factors', {})
        bullish = key_factors.get('bullish', [])
        bearish = key_factors.get('bearish', [])
        
        if bullish or bearish:
            message += f"üìà <b>–ê–ù–ê–õ–ò–ó –§–ê–ö–¢–û–†–û–í</b>\n"
            
            if bullish:
                message += f"üü¢ <b>–ó–∞:</b>\n"
                for factor in bullish[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–∞–∫—Ç–æ—Ä–∞
                    message += f"  ‚Ä¢ {factor}\n"
            
            if bearish:
                message += f"üî¥ <b>–ü—Ä–æ—Ç–∏–≤:</b>\n"
                for factor in bearish[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–∞–∫—Ç–æ—Ä–∞
                    message += f"  ‚Ä¢ {factor}\n"
            
            message += "\n"
        
        # –¶–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
        target_zones = ai_analysis.get('target_zones', {})
        if target_zones:
            message += f"üéØ <b>–¶–ï–õ–ï–í–´–ï –£–†–û–í–ù–ò</b>\n"
            
            if 'stop_loss' in target_zones:
                message += f"üõë Stop Loss: <code>{target_zones['stop_loss']}</code>\n"
            if 'take_profit_1' in target_zones:
                message += f"üéØ Take Profit 1: <code>{target_zones['take_profit_1']}</code>\n"
            if 'take_profit_2' in target_zones:
                message += f"üéØ Take Profit 2: <code>{target_zones['take_profit_2']}</code>\n"
            
            message += "\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
        risk_warnings = ai_analysis.get('risk_warnings', [])
        if risk_warnings:
            message += f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø</b>\n"
            for warning in risk_warnings[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                message += f"  ‚Ä¢ {warning}\n"
            message += "\n"
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        message += f"üìù <b>–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï</b>\n"
        message += f"<i>{summary}</i>\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = signal_data.get('indicators', {})
        if indicators:
            message += f"üìä <b>–ò–ù–î–ò–ö–ê–¢–û–†–´</b>\n"
            indicator_count = 0
            for name, value in indicators.items():
                if indicator_count >= 4:  # –ú–∞–∫—Å–∏–º—É–º 4 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                    break
                if isinstance(value, (int, float)):
                    message += f"{name.upper()}: <code>{value:.2f}</code> "
                    indicator_count += 1
            message += "\n\n"
        
        # –ü–æ–¥–ø–∏—Å—å
        message += f"üîó <i>Powered by AI Trading Bot</i>"
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > self.max_message_length:
            message = message[:self.max_message_length - 50] + "\n\n<i>... —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ</i>"
        
        return message
    
    def format_market_analysis(self, market_report: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞
        """
        analysis = market_report.get('overall_analysis', {})
        price = market_report.get('price', 0)
        change_24h = market_report.get('change_24h', 0)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞
        phase_emoji = {
            'BULL_TREND': 'üöÄ',
            'BEAR_TREND': 'üêª', 
            'SIDEWAYS': '‚û°Ô∏è',
            'VOLATILE': '‚ö°',
            'BULLISH': 'üìà',
            'BEARISH': 'üìâ',
            'NEUTRAL': 'üòê',
            'UNKNOWN': '‚ùì'
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∏—Å–∫–∞
        risk_emoji = {
            'LOW': 'üü¢',
            'MEDIUM': 'üü°', 
            'HIGH': 'üî¥'
        }.get(analysis.get('risk_level', 'UNKNOWN'), '‚ö™')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        change_emoji = 'üìà' if change_24h > 0 else 'üìâ' if change_24h < 0 else '‚û°Ô∏è'
        
        message = f"üìä <b>–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê BTC</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        message += f"üí∞ –¶–µ–Ω–∞: <b>${price:,.2f}</b>\n"
        message += f"{change_emoji} 24—á: <b>{change_24h:+.2f}%</b>\n"
        
        # –§–∞–∑–∞ —Ä—ã–Ω–∫–∞
        market_phase = analysis.get('market_phase', 'UNKNOWN')
        phase_icon = phase_emoji.get(market_phase, '‚ùì')
        message += f"üìà –§–∞–∑–∞: <b>{market_phase}</b> {phase_icon}\n"
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫
        confidence = analysis.get('confidence', 0)
        message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{confidence}%</b>\n"
        message += f"{risk_emoji} –†–∏—Å–∫: <b>{analysis.get('risk_level', 'UNKNOWN')}</b>\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        strategy_analyses = market_report.get('strategy_analyses', [])
        if strategy_analyses:
            message += f"üîç <b>–ê–ù–ê–õ–ò–ó –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú</b>\n"
            
            for strategy in strategy_analyses:
                signal = strategy.get('signal', 'UNKNOWN')
                confidence_str = strategy.get('confidence', 0)
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                if 'STRONG_BUY' in signal:
                    signal_emoji = 'üü¢üü¢'
                elif 'BUY' in signal:
                    signal_emoji = 'üü¢'
                elif 'STRONG_SELL' in signal:
                    signal_emoji = 'üî¥üî¥'
                elif 'SELL' in signal:
                    signal_emoji = 'üî¥'
                else:
                    signal_emoji = '‚ö™'
                
                message += f"{signal_emoji} <b>{strategy.get('strategy', 'Unknown')}</b> "
                message += f"({strategy.get('timeframe', '?')}): "
                message += f"{signal} ({confidence_str}%)\n"
            
            message += "\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        key_insights = analysis.get('key_insights', [])
        if key_insights:
            message += f"üí° <b>–ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´</b>\n"
            for insight in key_insights[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3
                message += f"‚Ä¢ {insight}\n"
            message += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = analysis.get('recommendations', [])
        if recommendations:
            message += f"üìã <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò–ò</b>\n"
            for rec in recommendations[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3
                message += f"‚Ä¢ {rec}\n"
            message += "\n"
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        summary = analysis.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        if summary:
            message += f"üìù <b>–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï</b>\n"
            message += f"<i>{summary}</i>\n\n"
        
        # –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
        timestamp = market_report.get('timestamp', datetime.now().isoformat())
        try:
            if isinstance(timestamp, str) and timestamp.isdigit():
                time_str = datetime.fromtimestamp(int(timestamp) / 1000).strftime('%H:%M:%S')
            else:
                time_str = datetime.now().strftime('%H:%M:%S')
        except:
            time_str = datetime.now().strftime('%H:%M:%S')
        
        message += f"‚è∞ –ê–Ω–∞–ª–∏–∑ –Ω–∞: {time_str}"
        message += f"\nüîó <i>Powered by AI Trading Bot</i>"
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > self.max_message_length:
            message = message[:self.max_message_length - 100] + "\n\n<i>... –æ—Ç—á–µ—Ç –æ–±—Ä–µ–∑–∞–Ω</i>"
        
        return message
    
    def format_trade_update(self, trade_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
        """
        status = trade_data.get('status', 'UNKNOWN')
        symbol = trade_data.get('symbol', 'Unknown')
        pnl = trade_data.get('pnl', 0)
        strategy = trade_data.get('strategy', 'Unknown')
        
        status_emoji = {
            'OPENED': 'üéØ',
            'CLOSED': 'üèÅ',
            'STOPPED': 'üõë',
            'PROFIT': '‚úÖ',
            'LOSS': '‚ùå'
        }.get(status, 'üìä')
        
        message = f"{status_emoji} <b>–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–î–ï–õ–ö–ò</b>\n\n"
        message += f"üìà {symbol}\n"
        message += f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <code>{strategy}</code>\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        
        if pnl != 0:
            pnl_emoji = 'üí∞' if pnl > 0 else 'üí∏'
            message += f"{pnl_emoji} P&L: <b>${pnl:.2f}</b>\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        entry_price = trade_data.get('entry_price')
        exit_price = trade_data.get('exit_price')
        
        if entry_price:
            message += f"üìç –í—Ö–æ–¥: <code>${entry_price:.2f}</code>\n"
        if exit_price:
            message += f"üö™ –í—ã—Ö–æ–¥: <code>${exit_price:.2f}</code>\n"
        
        duration = trade_data.get('duration')
        if duration:
            hours = duration // 3600
            minutes = (duration % 3600) // 60
            if hours > 0:
                message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º\n"
            else:
                message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}–º\n"
        
        message += f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        return message
    
    def format_daily_summary(self, summary_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
        """
        date = summary_data.get('date', datetime.now().strftime('%Y-%m-%d'))
        total_trades = summary_data.get('total_trades', 0)
        profitable_trades = summary_data.get('profitable_trades', 0)
        total_pnl = summary_data.get('total_pnl', 0)
        strategies = summary_data.get('strategies', {})
        
        win_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
        
        message = f"üìä <b>–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê</b>\n\n"
        message += f"üìÖ –î–∞—Ç–∞: <b>{date}</b>\n"
        message += f"üéØ –°–¥–µ–ª–æ–∫: <b>{total_trades}</b>\n"
        message += f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: <b>{profitable_trades}</b>\n"
        message += f"üìà –í–∏–Ω—Ä–µ–π—Ç: <b>{win_rate:.1f}%</b>\n"
        
        pnl_emoji = 'üí∞' if total_pnl >= 0 else 'üí∏'
        message += f"{pnl_emoji} –û–±—â–∏–π P&L: <b>${total_pnl:.2f}</b>\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        if strategies:
            message += f"\nüìà <b>–ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú</b>\n"
            for strategy_name, stats in strategies.items():
                strategy_pnl = stats.get('pnl', 0)
                strategy_trades = stats.get('trades', 0)
                strategy_emoji = 'üü¢' if strategy_pnl > 0 else 'üî¥' if strategy_pnl < 0 else '‚ö™'
                
                message += f"{strategy_emoji} <b>{strategy_name}</b>: "
                message += f"{strategy_trades} —Å–¥–µ–ª–æ–∫, "
                message += f"${strategy_pnl:.2f}\n"
        
        # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∏
        best_trade = summary_data.get('best_trade')
        worst_trade = summary_data.get('worst_trade')
        
        if best_trade or worst_trade:
            message += f"\nüèÜ <b>–≠–ö–°–¢–†–ï–ú–´</b>\n"
            
            if best_trade:
                message += f"‚úÖ –õ—É—á—à–∞—è: <b>+${best_trade:.2f}</b>\n"
            
            if worst_trade:
                message += f"‚ùå –•—É–¥—à–∞—è: <b>${worst_trade:.2f}</b>\n"
        
        return message
    
    def format_error_alert(self, error_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        error_type = error_data.get('type', 'UNKNOWN')
        error_message = error_data.get('message', 'Unknown error')
        timestamp = error_data.get('timestamp', datetime.now().isoformat())
        strategy = error_data.get('strategy', 'System')
        severity = error_data.get('severity', 'ERROR')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_emoji = {
            'CRITICAL': 'üö®',
            'ERROR': '‚ùå',
            'WARNING': '‚ö†Ô∏è',
            'INFO': '‚ÑπÔ∏è'
        }.get(severity, '‚ùì')
        
        message = f"{severity_emoji} <b>–°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
        message += f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: <code>{strategy}</code>\n"
        message += f"üìã –¢–∏–ø: <code>{error_type}</code>\n"
        message += f"üîç –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: <b>{severity}</b>\n"
        message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n<i>{error_message}</i>\n\n"
        
        # –í—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        try:
            if isinstance(timestamp, str):
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime('%Y-%m-%d %H:%M:%S')
            else:
                time_str = str(timestamp)
        except:
            time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        message += f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
        if severity in ['CRITICAL', 'ERROR']:
            message += f"\nüîß <b>–¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï</b>\n"
            message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã\n"
            message += f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            if error_type == 'API_ERROR':
                message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏\n"
        
        return message
    
    def format_system_status(self, status_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        """
        strategies_status = status_data.get('strategies', {})
        ai_status = status_data.get('ai_enabled', False)
        api_status = status_data.get('api_connected', False)
        uptime = status_data.get('uptime', 0)
        
        message = f"ü§ñ <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>\n\n"
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        api_emoji = '‚úÖ' if api_status else '‚ùå'
        ai_emoji = '‚úÖ' if ai_status else '‚ùå'
        
        message += f"{api_emoji} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: {'–ê–∫—Ç–∏–≤–Ω–æ' if api_status else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
        message += f"{ai_emoji} –ò–ò –∞–Ω–∞–ª–∏–∑: {'–í–∫–ª—é—á–µ–Ω' if ai_status else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if uptime > 0:
            hours = uptime // 3600
            minutes = (uptime % 3600) // 60
            message += f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º\n"
        
        # –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        if strategies_status:
            message += f"\nüìä <b>–°–¢–†–ê–¢–ï–ì–ò–ò</b>\n"
            for strategy, info in strategies_status.items():
                status = info.get('status', 'unknown')
                trades_today = info.get('trades_today', 0)
                
                status_emoji = 'üü¢' if status == 'active' else 'üü°' if status == 'paused' else 'üî¥'
                message += f"{status_emoji} <b>{strategy}</b>: {trades_today} —Å–¥–µ–ª–æ–∫\n"
        
        message += f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        return message
