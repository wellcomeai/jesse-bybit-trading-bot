# notifications/telegram_bot.py - –ì–û–¢–û–í–ê–Ø –ö –î–ï–ü–õ–û–Æ –í–ï–†–°–ò–Ø
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ event loop, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏

import asyncio
import os
import logging
import threading
from datetime import datetime
from typing import Dict, Any, Optional
import concurrent.futures

from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError, RetryAfter


class TelegramNotifier:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Telegram –±–æ—Ç –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop
    –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    """
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not self.bot_token or not self.chat_id:
            raise ValueError("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        self.bot: Optional[Bot] = None
        self.application: Optional[Application] = None
        self.running = False
        self.bot_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        self.logger.info("üì± TelegramNotifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"Bot token: {self.bot_token[:10]}...")
        self.logger.info(f"Chat ID: {self.chat_id}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.max_retries = 3
        self.retry_delay = 2
        self.message_timeout = 10
    
    def start_bot(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop
        """
        if self.running:
            self.logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        def run_bot_thread():
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            try:
                self.running = True
                self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∑–≤–æ–ª—è–µ–º run_polling() —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π event loop
                # –ù–ï —Å–æ–∑–¥–∞–µ–º event loop –≤—Ä—É—á–Ω—É—é!
                
                # –°–æ–∑–¥–∞–µ–º Application
                self.application = Application.builder().token(self.bot_token).build()
                self.bot = self.application.bot
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
                self.application.add_handler(CommandHandler("start", self._command_start))
                self.application.add_handler(CommandHandler("help", self._command_help))
                self.application.add_handler(CommandHandler("status", self._command_status))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                self.application.add_handler(CallbackQueryHandler(self._handle_button, pattern="^(status|help|main_menu)$"))
                
                self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º polling –∏ –ø–æ–∑–≤–æ–ª—è–µ–º –µ–º—É —Å–æ–∑–¥–∞—Ç—å event loop
                self.application.run_polling(
                    drop_pending_updates=True,
                    allowed_updates=Update.ALL_TYPES
                )
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            finally:
                self.running = False
                self.logger.info("üõë –ü–æ—Ç–æ–∫ Telegram –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ daemon –ø–æ—Ç–æ–∫–µ
        self.bot_thread = threading.Thread(target=run_bot_thread, daemon=True, name="TelegramBot")
        self.bot_thread.start()
        
        self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if self.application and self.running:
            try:
                self.application.stop_running()
                self.running = False
                self.logger.info("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
    
    async def _command_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_info = f"{update.effective_user.username} (ID: {update.effective_chat.id})"
            self.logger.info(f"üöÄ /start –æ—Ç {user_info}")
            
            keyboard = self._get_main_keyboard()
            
            welcome_text = (
                "ü§ñ <b>AI Trading Bot</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥—É.\n\n"
                "üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
                "üîπ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                "üîπ –°–ª–µ–∂—É –∑–∞ –≤–∞—à–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await update.message.reply_text(
                welcome_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.logger.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}")
            try:
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}...")
            except:
                pass
    
    async def _command_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            self.logger.info("üìñ /help –∫–æ–º–∞–Ω–¥–∞")
            
            help_text = (
                "üìñ <b>–°–ü–†–ê–í–ö–ê AI Trading Bot</b>\n\n"
                "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                "<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
                "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
                "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n"
                "üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π\n\n"
                "<b>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
                "‚Ä¢ ActiveScalper (5m) - –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏\n"
                "‚Ä¢ BalancedTrader (15m) - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n"
                "‚Ä¢ QualityTrader (1h) - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
            )
            
            keyboard = self._get_main_keyboard()
            
            await update.message.reply_text(
                help_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.logger.info("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /help: {e}")
    
    async def _command_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            self.logger.info("üìä /status –∫–æ–º–∞–Ω–¥–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            ai_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if os.getenv('AI_ANALYSIS_ENABLED') == 'true' else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            telegram_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if self.running else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
            status_text = (
                "üü¢ <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>\n\n"
                f"üì± Telegram –±–æ—Ç: {telegram_status}\n"
                f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {ai_status}\n"
                "üìä Jesse —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                "üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: 3 –∞–∫—Ç–∏–≤–Ω—ã–µ\n\n"
                "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
                "‚Ä¢ ActiveScalper (BTCUSDT, 5m)\n"
                "‚Ä¢ BalancedTrader (BTCUSDT, 15m)\n"
                "‚Ä¢ QualityTrader (BTCUSDT, 1h)\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d')}"
            )
            
            keyboard = self._get_main_keyboard()
            
            await update.message.reply_text(
                status_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ /status: {e}")
    
    async def _handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "status":
                await self._command_status(update, context)
            elif query.data == "help":
                await self._command_help(update, context)
            elif query.data == "main_menu":
                await query.edit_message_text(
                    "ü§ñ <b>AI Trading Bot</b>\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode='HTML',
                    reply_markup=self._get_main_keyboard()
                )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
    
    def _get_main_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
            [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
    
    async def send_message_safe(self, text: str, parse_mode: str = 'HTML') -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop
        """
        for attempt in range(self.max_retries):
            try:
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π Bot –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                bot = Bot(self.bot_token)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    parse_mode=parse_mode
                )
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await bot.close()
                
                if attempt > 0:
                    self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                
                return True
                
            except RetryAfter as e:
                wait_time = e.retry_after
                self.logger.warning(f"‚è∞ Rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                await asyncio.sleep(wait_time)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay * (attempt + 1))
        
        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    def send_message_sync(self, text: str, parse_mode: str = 'HTML') -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ Jesse —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
        """
        def send_in_thread():
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    return loop.run_until_complete(self.send_message_safe(text, parse_mode))
                finally:
                    loop.close()
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
            future = executor.submit(send_in_thread)
            try:
                return future.result(timeout=self.message_timeout)
            except concurrent.futures.TimeoutError:
                self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                return False
    
    async def send_analysis_notification(self, signal_data: Dict[str, Any], ai_analysis: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ò–ò –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from notifications.message_formatter import MessageFormatter
            
            formatter = MessageFormatter()
            message = formatter.format_analysis_message(signal_data, ai_analysis)
            
            return await self.send_message_safe(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
    
    async def send_trade_notification(self, trade_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        try:
            from notifications.message_formatter import MessageFormatter
            
            formatter = MessageFormatter()
            message = formatter.format_trade_update(trade_data)
            
            return await self.send_message_safe(message)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            test_message = (
                f"ü§ñ <b>–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚úÖ AI Trading Bot –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            )
            
            success = await self.send_message_safe(test_message)
            
            if success:
                self.logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Telegram —É—Å–ø–µ—à–µ–Ω")
            else:
                self.logger.error("‚ùå –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Telegram –Ω–µ—É–¥–∞—á–µ–Ω")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False


# === –§–ê–ë–†–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

def create_telegram_notifier() -> Optional[TelegramNotifier]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TelegramNotifier
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤)
    """
    try:
        notifier = TelegramNotifier()
        return notifier
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å TelegramNotifier: {e}")
        return None


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
_global_notifier = None

def get_telegram_notifier() -> Optional[TelegramNotifier]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramNotifier"""
    global _global_notifier
    
    if _global_notifier is None:
        _global_notifier = create_telegram_notifier()
    
    return _global_notifier
