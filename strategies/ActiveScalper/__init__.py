# strategies/ActiveScalper/__init__.py
from jesse.strategies import Strategy
import jesse.indicators as ta


class ActiveScalper(EnhancedStrategy):
    """
    –ê–ö–¢–ò–í–ù–ê–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø
    –¶–µ–ª—å: 5-6 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
    –õ–æ–≥–∏–∫–∞: –ë—ã—Å—Ç—Ä—ã–µ EMA –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã + Bollinger Bands + Volume
    """
    
    def __init__(self):
        super().__init__()
        
        # === –°–ö–û–†–û–°–¢–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
        self.ema_fast = 8           # –ë—ã—Å—Ç—Ä–∞—è EMA
        self.ema_medium = 13        # –°—Ä–µ–¥–Ω—è—è EMA  
        self.ema_slow = 21          # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
        self.bb_period = 20         # Bollinger Bands
        self.bb_std = 2             # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ BB
        self.volume_ma_period = 10  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—ä—ë–º–∞
        self.rsi_period = 7         # –ë—ã—Å—Ç—Ä—ã–π RSI
        
        # === –ê–ì–†–ï–°–°–ò–í–ù–´–ï –£–°–õ–û–í–ò–Ø –í–•–û–î–ê ===
        self.min_volume_ratio = 1.1      # –û–±—ä—ë–º —Ö–æ—Ç—è –±—ã 1.1x —Å—Ä–µ–¥–Ω–µ–≥–æ
        self.candle_body_min = 0.15      # –ú–∏–Ω–∏–º—É–º 0.15% —Ä–∞–∑–º–µ—Ä —Å–≤–µ—á–∏
        self.bb_squeeze_threshold = 0.02 # –°–∂–∞—Ç–∏–µ BB (<2% –æ—Ç —Ü–µ–Ω—ã)
        
        # === –ë–´–°–¢–†–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò ===
        self.risk_percent = 1.5          # –ü–æ–≤—ã—à–µ–Ω —Ä–∏—Å–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.quick_tp_percent = 0.8      # –ë—ã—Å—Ç—Ä—ã–π –¢–ü 0.8%
        self.quick_sl_percent = 0.5      # –ë—ã—Å—Ç—Ä—ã–π –°–õ 0.5%
        self.scalp_tp_percent = 1.2      # –û–±—ã—á–Ω—ã–π –¢–ü 1.2%
        self.scalp_sl_percent = 0.8      # –û–±—ã—á–Ω—ã–π –°–õ 0.8%
        self.max_holding_minutes = 120   # –ú–∞–∫—Å–∏–º—É–º 2 —á–∞—Å–∞ (24 —Å–≤–µ—á–∏ –ø–æ 5 –º–∏–Ω)
        
        # === –£–°–õ–û–í–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
        self.min_gap_minutes = 10        # –ú–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ (2 —Å–≤–µ—á–∏)
        self.max_daily_trades = 8        # –ú–∞–∫—Å–∏–º—É–º 8 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
        self.max_consecutive_losses = 3   # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ 3 —É–±—ã—Ç–∫–æ–≤
        
        # === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
        self.entry_bar = None
        self.last_trade_bar = None
        self.daily_trades_count = 0
        self.last_day = None
        self.consecutive_losses = 0
        self.position_type = None
        
        self.log(f"=== ACTIVE SCALPER INITIALIZED ===")
        self.log(f"Timeframe: 5m | Target: 5-6 trades/day")
        self.log(f"EMA: {self.ema_fast}/{self.ema_medium}/{self.ema_slow}")
        self.log(f"Risk: {self.risk_percent}% | Quick TP: {self.quick_tp_percent}% | SL: {self.quick_sl_percent}%")

    # === –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
    @property
    def ema8(self):
        return ta.ema(self.candles, period=self.ema_fast)
    
    @property
    def ema13(self):
        return ta.ema(self.candles, period=self.ema_medium)
    
    @property
    def ema21(self):
        return ta.ema(self.candles, period=self.ema_slow)
    
    @property
    def bb_upper(self):
        return ta.bollinger_bands(self.candles, period=self.bb_period, devup=self.bb_std)[0]
    
    @property
    def bb_middle(self):
        return ta.bollinger_bands(self.candles, period=self.bb_period, devup=self.bb_std)[1]
    
    @property
    def bb_lower(self):
        return ta.bollinger_bands(self.candles, period=self.bb_period, devup=self.bb_std)[2]
    
    @property
    def bb_width(self):
        """–®–∏—Ä–∏–Ω–∞ Bollinger Bands –≤ % –æ—Ç —Ü–µ–Ω—ã"""
        return ((self.bb_upper - self.bb_lower) / self.bb_middle) * 100
    
    @property
    def volume_ma(self):
        return ta.sma(self.candles[:, 5], period=self.volume_ma_period)
    
    @property
    def rsi_fast(self):
        return ta.rsi(self.candles, period=self.rsi_period)
    
    @property
    def current_volume(self):
        return self.candles[-1, 5]
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    def _update_daily_counter(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        current_day = self.index // 288  # 288 —Å–≤–µ—á–µ–π –ø–æ 5 –º–∏–Ω = 1 –¥–µ–Ω—å
        if self.last_day != current_day:
            self.daily_trades_count = 0
            self.last_day = current_day
    
    def _is_ema_bullish(self):
        """EMA –≤ –±—ã—á—å–µ–º –ø–æ—Ä—è–¥–∫–µ"""
        return self.ema8 > self.ema13 > self.ema21
    
    def _is_ema_bearish(self):
        """EMA –≤ –º–µ–¥–≤–µ–∂—å–µ–º –ø–æ—Ä—è–¥–∫–µ"""
        return self.ema8 < self.ema13 < self.ema21
    
    def _is_ema_crossover_bullish(self):
        """–ë—ã—á–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä EMA8 –Ω–∞–¥ EMA13"""
        if self.index < 2:
            return False
        prev_ema8 = ta.ema(self.candles[:-1], period=self.ema_fast)
        prev_ema13 = ta.ema(self.candles[:-1], period=self.ema_medium)
        
        was_below = prev_ema8 <= prev_ema13
        now_above = self.ema8 > self.ema13
        return was_below and now_above
    
    def _is_ema_crossover_bearish(self):
        """–ú–µ–¥–≤–µ–∂–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä EMA8 –ø–æ–¥ EMA13"""
        if self.index < 2:
            return False
        prev_ema8 = ta.ema(self.candles[:-1], period=self.ema_fast)
        prev_ema13 = ta.ema(self.candles[:-1], period=self.ema_medium)
        
        was_above = prev_ema8 >= prev_ema13
        now_below = self.ema8 < self.ema13
        return was_above and now_below
    
    def _is_bb_squeeze(self):
        """Bollinger Bands —Å–∂–∞—Ç—ã (–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)"""
        return self.bb_width < self.bb_squeeze_threshold
    
    def _is_bb_expansion(self):
        """Bollinger Bands —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è (–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)"""
        return self.bb_width > self.bb_squeeze_threshold * 2
    
    def _has_volume_support(self):
        """–ï—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—ä—ë–º–æ–º"""
        return self.current_volume > (self.volume_ma * self.min_volume_ratio)
    
    def _is_strong_candle(self):
        """–°–∏–ª—å–Ω–∞—è —Å–≤–µ—á–∞"""
        body_percent = abs(self.close - self.open) / self.open * 100
        return body_percent >= self.candle_body_min
    
    def _can_trade(self):
        """–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–Ω—è
        self._update_daily_counter()
        
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if self.index < max(self.ema_slow, self.bb_period) + 5:
            return False
        
        # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
        if self.position.is_open:
            return False
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫
        if self.daily_trades_count >= self.max_daily_trades:
            return False
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥
        if self.consecutive_losses >= self.max_consecutive_losses:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if (self.last_trade_bar is not None and 
            (self.index - self.last_trade_bar) < (self.min_gap_minutes // 5)):
            return False
        
        return True

    # === –£–°–õ–û–í–ò–Ø –í–•–û–î–ê ===
    def should_long(self) -> bool:
        """
        –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è LONG (–¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏):
        
        –°—Ü–µ–Ω–∞—Ä–∏–π 1: EMA Crossover + Volume
        –°—Ü–µ–Ω–∞—Ä–∏–π 2: BB Bounce –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã  
        –°—Ü–µ–Ω–∞—Ä–∏–π 3: BB Breakout –≤–≤–µ—Ä—Ö
        –°—Ü–µ–Ω–∞—Ä–∏–π 4: RSI Oversold Recovery
        """
        if not self._can_trade():
            return False
        
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        volume_ok = self._has_volume_support()
        strong_candle = self._is_strong_candle()
        green_candle = self.close > self.open
        
        # === –°–¶–ï–ù–ê–†–ò–ô 1: EMA CROSSOVER ===
        scenario1 = (self._is_ema_crossover_bullish() and 
                    volume_ok and 
                    self.close > self.ema21)
        
        # === –°–¶–ï–ù–ê–†–ò–ô 2: BB BOUNCE ===
        scenario2 = (self.close <= self.bb_lower * 1.002 and  # –ö–∞—Å–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π BB
                    green_candle and
                    volume_ok and
                    self._is_ema_bullish())
        
        # === –°–¶–ï–ù–ê–†–ò–ô 3: BB BREAKOUT ===  
        scenario3 = (self.close > self.bb_upper and
                    self._is_bb_expansion() and
                    volume_ok and
                    strong_candle)
        
        # === –°–¶–ï–ù–ê–†–ò–ô 4: RSI RECOVERY ===
        scenario4 = (self.rsi_fast < 30 and  # –ë—ã–ª–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ
                    self.close > self.open and  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                    volume_ok and
                    self.close > self.ema13)
        
        if scenario1:
            self.log(f"üü¢ LONG: EMA Crossover | Price: ${self.close:.2f}")
            self.entry_reason = "EMA_CROSS"
            return True
        elif scenario2:
            self.log(f"üü¢ LONG: BB Bounce | Price: ${self.close:.2f}")
            self.entry_reason = "BB_BOUNCE"
            return True
        elif scenario3:
            self.log(f"üü¢ LONG: BB Breakout | Price: ${self.close:.2f}")
            self.entry_reason = "BB_BREAKOUT"
            return True
        elif scenario4:
            self.log(f"üü¢ LONG: RSI Recovery | Price: ${self.close:.2f}")
            self.entry_reason = "RSI_RECOVERY"
            return True
        
        return False
    
    def should_short(self) -> bool:
        """
        –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è SHORT (–¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏):
        
        –°—Ü–µ–Ω–∞—Ä–∏–π 1: EMA Crossover + Volume
        –°—Ü–µ–Ω–∞—Ä–∏–π 2: BB Bounce –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        –°—Ü–µ–Ω–∞—Ä–∏–π 3: BB Breakout –≤–Ω–∏–∑
        S—Ü–µ–Ω–∞—Ä–∏–π 4: RSI Overbought Decline
        """
        if not self._can_trade():
            return False
        
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        volume_ok = self._has_volume_support()
        strong_candle = self._is_strong_candle()
        red_candle = self.close < self.open
        
        # === –°–¶–ï–ù–ê–†–ò–ô 1: EMA CROSSOVER ===
        scenario1 = (self._is_ema_crossover_bearish() and
                    volume_ok and
                    self.close < self.ema21)
        
        # === –°–¶–ï–ù–ê–†–ò–ô 2: BB BOUNCE ===
        scenario2 = (self.close >= self.bb_upper * 0.998 and  # –ö–∞—Å–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π BB
                    red_candle and
                    volume_ok and
                    self._is_ema_bearish())
        
        # === –°–¶–ï–ù–ê–†–ò–ô 3: BB BREAKOUT ===
        scenario3 = (self.close < self.bb_lower and
                    self._is_bb_expansion() and
                    volume_ok and
                    strong_candle)
        
        # === –°–¶–ï–ù–ê–†–ò–ô 4: RSI DECLINE ===
        scenario4 = (self.rsi_fast > 70 and  # –ë—ã–ª–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–æ
                    self.close < self.open and  # –°–Ω–∏–∂–µ–Ω–∏–µ
                    volume_ok and
                    self.close < self.ema13)
        
        if scenario1:
            self.log(f"üî¥ SHORT: EMA Crossover | Price: ${self.close:.2f}")
            self.entry_reason = "EMA_CROSS"
            return True
        elif scenario2:
            self.log(f"üî¥ SHORT: BB Bounce | Price: ${self.close:.2f}")
            self.entry_reason = "BB_BOUNCE"
            return True
        elif scenario3:
            self.log(f"üî¥ SHORT: BB Breakout | Price: ${self.close:.2f}")
            self.entry_reason = "BB_BREAKOUT"
            return True
        elif scenario4:
            self.log(f"üî¥ SHORT: RSI Decline | Price: ${self.close:.2f}")
            self.entry_reason = "RSI_DECLINE"
            return True
        
        return False
    
    def should_cancel_entry(self) -> bool:
        return False
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
    def _calculate_position_size(self, entry_price, stop_loss_price):
        """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        risk_amount = self.available_margin * (self.risk_percent / 100)
        price_diff = abs(entry_price - stop_loss_price)
        
        if price_diff > 0:
            qty = risk_amount / price_diff
            max_qty = (self.available_margin * 0.9) / entry_price
            return min(qty, max_qty, 0.5)  # –ú–∞–∫—Å–∏–º—É–º 0.5 BTC
        else:
            return 0.001
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"""
        entry_price = self.close
        
        # –í—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
        if hasattr(self, 'entry_reason'):
            if self.entry_reason in ['BB_BREAKOUT', 'EMA_CROSS']:
                # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è breakout
                tp_percent = self.scalp_tp_percent
                sl_percent = self.scalp_sl_percent
            else:
                # –ë—ã—Å—Ç—Ä—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è bounce/recovery  
                tp_percent = self.quick_tp_percent
                sl_percent = self.quick_sl_percent
        else:
            tp_percent = self.quick_tp_percent
            sl_percent = self.quick_sl_percent
        
        stop_loss_price = entry_price * (1 - sl_percent / 100)
        take_profit_price = entry_price * (1 + tp_percent / 100)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.buy = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'LONG'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        self.log(f"=== LONG #{self.daily_trades_count} ===")
        self.log(f"Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty:.4f} @ ${entry_price:.2f}")
        self.log(f"SL: ${stop_loss_price:.2f} (-{sl_percent}%)")
        self.log(f"TP: ${take_profit_price:.2f} (+{tp_percent}%)")
        self.log(f"Vol: {self.current_volume/self.volume_ma:.1f}x | RSI: {self.rsi_fast:.1f}")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"""
        entry_price = self.close
        
        # –í—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
        if hasattr(self, 'entry_reason'):
            if self.entry_reason in ['BB_BREAKOUT', 'EMA_CROSS']:
                tp_percent = self.scalp_tp_percent
                sl_percent = self.scalp_sl_percent
            else:
                tp_percent = self.quick_tp_percent
                sl_percent = self.quick_sl_percent
        else:
            tp_percent = self.quick_tp_percent
            sl_percent = self.quick_sl_percent
        
        stop_loss_price = entry_price * (1 + sl_percent / 100)
        take_profit_price = entry_price * (1 - tp_percent / 100)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.sell = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'SHORT'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        self.log(f"=== SHORT #{self.daily_trades_count} ===")
        self.log(f"Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty:.4f} @ ${entry_price:.2f}")
        self.log(f"SL: ${stop_loss_price:.2f} (+{sl_percent}%)")
        self.log(f"TP: ${take_profit_price:.2f} (-{tp_percent}%)")
        self.log(f"Vol: {self.current_volume/self.volume_ma:.1f}x | RSI: {self.rsi_fast:.1f}")
    
    def update_position(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π"""
        if not self.position.is_open:
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–∫–∞–ª—å–ø–∏–Ω–≥ = –±—ã—Å—Ç—Ä–æ)
        if self.entry_bar and (self.index - self.entry_bar) >= (self.max_holding_minutes // 5):
            self.liquidate()
            self.log(f"‚è∞ Time exit after {self.max_holding_minutes} min")
            self.log(f"P&L: ${self.position.pnl:.2f}")
            self._reset_position()
    
    def _reset_position(self):
        """–°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏"""
        self.entry_bar = None
        self.position_type = None
        if hasattr(self, 'entry_reason'):
            delattr(self, 'entry_reason')
    
    def on_close_position(self, order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        pnl = self.position.pnl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —É–±—ã—Ç–∫–æ–≤
        if pnl < 0:
            self.consecutive_losses += 1
            self.log(f"‚ùå Loss: ${pnl:.2f} | Consecutive: {self.consecutive_losses}")
        else:
            self.consecutive_losses = 0
            self.log(f"‚úÖ Profit: ${pnl:.2f} | Reset losses")
        
        self.log(f"üîö Closed @ ${order.price:.2f} | Daily trades: {self.daily_trades_count}")
        self._reset_position()
    
    def before(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ (24 —Å–≤–µ—á–∏ –ø–æ 5 –º–∏–Ω)"""
        if self.index % 24 == 0 and self.index >= self.bb_period:
            self._update_daily_counter()
            
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            ema_trend = "üìà" if self._is_ema_bullish() else "üìâ" if self._is_ema_bearish() else "‚ÜîÔ∏è"
            bb_state = "üü∞" if self._is_bb_squeeze() else "üìä" if self._is_bb_expansion() else "‚ö™"
            vol_state = "üîä" if self.current_volume > self.volume_ma * 1.5 else "üîâ"
            
            self.log(f"üìä {self.index//24*2}h: ${self.close:.2f}")
            self.log(f"   {ema_trend} RSI:{self.rsi_fast:.0f} {bb_state} {vol_state}")
            self.log(f"   Daily trades: {self.daily_trades_count}/8 | Losses: {self.consecutive_losses}")
            
            if self.position.is_open:
                minutes_held = (self.index - self.entry_bar) * 5 if self.entry_bar else 0
                self.log(f"   Position: {self.position_type} {minutes_held}min | P&L: ${self.position.pnl:.2f}")
