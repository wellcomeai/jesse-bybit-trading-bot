# strategies/AdaptiveMomentum/__init__.py
from jesse.strategies import Strategy
import jesse.indicators as ta
import numpy as np


class AdaptiveMomentum(Strategy):
    """
    Adaptive Momentum Strategy –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞
    –¢–æ—Ä–≥—É–µ—Ç —Å–∏–ª—å–Ω—ã–µ –∏–º–ø—É–ª—å—Å—ã –Ω–∞ –æ–±—ä—ë–º–µ, –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —Ü–∏–∫–ª–∞–º
    """
    
    def __init__(self):
        super().__init__()
        
        # === –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
        self.ema_fast = 21          # –ë—ã—Å—Ç—Ä–∞—è EMA –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
        self.ema_slow = 50          # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
        self.rsi_period = 14        # RSI –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.volume_ma_period = 20  # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
        self.atr_period = 14        # ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        # === –ü–û–†–û–ì–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ===
        self.min_candle_strength = 1.5    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–≤–µ—á–∏ –≤ %
        self.volume_multiplier = 1.3      # –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ 1.3x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        self.rsi_overbought = 75          # RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
        self.rsi_oversold = 25            # RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò ===
        self.risk_percent = 0.8           # –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
        self.atr_stop_multiplier = 2.5    # –°—Ç–æ–ø-–ª–æ—Å—Å = 2.5x ATR
        self.min_rr_ratio = 2.0           # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        self.max_holding_hours = 48       # –ú–∞–∫—Å–∏–º—É–º —á–∞—Å–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏
        
        # === –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨ ===
        self.market_regime_period = 100   # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
        self.bull_threshold = 0.02        # –ü–æ—Ä–æ–≥ –±—ã—á—å–µ–≥–æ —Ä—ã–Ω–∫–∞ (+2% –∑–∞ –ø–µ—Ä–∏–æ–¥)
        self.bear_threshold = -0.02       # –ü–æ—Ä–æ–≥ –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Ä—ã–Ω–∫–∞ (-2% –∑–∞ –ø–µ—Ä–∏–æ–¥)
        
        # === –°–û–°–¢–û–Ø–ù–ò–ï ===
        self.entry_bar = None
        self.position_type = None
        self.market_regime = "NEUTRAL"    # BULL, BEAR, NEUTRAL
        self.consecutive_losses = 0
        self.last_regime_update = 0
        
        self.log(f"=== ADAPTIVE MOMENTUM INITIALIZED ===")
        self.log(f"EMA: {self.ema_fast}/{self.ema_slow}")
        self.log(f"Risk: {self.risk_percent}% per trade")
        self.log(f"ATR Stop: {self.atr_stop_multiplier}x ATR")

    # === –°–í–û–ô–°–¢–í–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í ===
    @property
    def ema21(self):
        return ta.ema(self.candles, period=self.ema_fast)
    
    @property
    def ema50(self):
        return ta.ema(self.candles, period=self.ema_slow)
    
    @property
    def rsi(self):
        return ta.rsi(self.candles, period=self.rsi_period)
    
    @property
    def volume_ma(self):
        return ta.sma(self.candles[:, 5], period=self.volume_ma_period)  # Volume
    
    @property
    def atr(self):
        return ta.atr(self.candles, period=self.atr_period)
    
    @property
    def current_volume(self):
        return self.candles[-1, 5]  # –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º
    
    # === –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê ===
    def _update_market_regime(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞: BULL/BEAR/NEUTRAL"""
        if self.index - self.last_regime_update < 24:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
            return
            
        if self.index < self.market_regime_period:
            return
            
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        price_change = (self.close - self.candles[-self.market_regime_period, 4]) / self.candles[-self.market_regime_period, 4]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
        if price_change > self.bull_threshold:
            self.market_regime = "BULL"
        elif price_change < self.bear_threshold:
            self.market_regime = "BEAR"
        else:
            self.market_regime = "NEUTRAL"
            
        self.last_regime_update = self.index
        self.log(f"üîÑ Market regime: {self.market_regime} (change: {price_change*100:.1f}%)")
    
    def _is_strong_bullish_candle(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –±—ã—á—å–µ–π —Å–≤–µ—á–∏"""
        # –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Å–≤–µ—á–∏
        body_size = (self.close - self.open) / self.open * 100
        
        # –°–≤–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–æ–π
        is_green = self.close > self.open
        is_strong = body_size >= self.min_candle_strength
        
        return is_green and is_strong
    
    def _is_strong_bearish_candle(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –º–µ–¥–≤–µ–∂—å–µ–π —Å–≤–µ—á–∏"""
        # –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Å–≤–µ—á–∏
        body_size = abs(self.close - self.open) / self.open * 100
        
        # –°–≤–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Å–Ω–æ–π –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–æ–π
        is_red = self.close < self.open
        is_strong = body_size >= self.min_candle_strength
        
        return is_red and is_strong
    
    def _has_volume_spike(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞"""
        return self.current_volume > (self.volume_ma * self.volume_multiplier)
    
    def _get_trend_direction(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"""
        if self.close > self.ema21 > self.ema50:
            return "UP"
        elif self.close < self.ema21 < self.ema50:
            return "DOWN"
        else:
            return "SIDEWAYS"
    
    def _can_trade(self):
        """–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if self.index < max(self.ema_slow, self.market_regime_period):
            return False
            
        # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if self.position.is_open:
            return False
            
        # –ù–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥
        if self.consecutive_losses >= 4:
            return False
            
        return True
    
    def _should_long_by_regime(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª–æ–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        if self.market_regime == "BULL":
            return True  # –í –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ –ª–æ–Ω–≥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif self.market_regime == "BEAR":
            return self.rsi < 30  # –í –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ –ª–æ–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        else:
            return True  # –í –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    
    def _should_short_by_regime(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —à–æ—Ä—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        if self.market_regime == "BEAR":
            return True  # –í –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ —à–æ—Ä—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif self.market_regime == "BULL":
            return self.rsi > 70  # –í –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ —à–æ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
        else:
            return True  # –í –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã

    # === –£–°–õ–û–í–ò–Ø –í–•–û–î–ê ===
    def should_long(self) -> bool:
        """
        –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG:
        1. –°–∏–ª—å–Ω–∞—è –∑–µ–ª—ë–Ω–∞—è —Å–≤–µ—á–∞ (>1.5%)
        2. –í—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞ (>1.3x —Å—Ä–µ–¥–Ω–µ–≥–æ)
        3. –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (—Ü–µ–Ω–∞ > EMA21 > EMA50)
        4. RSI –Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω (<75)
        5. –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–æ–Ω–≥–∏
        """
        if not self._can_trade():
            return False
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
        self._update_market_regime()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        strong_candle = self._is_strong_bullish_candle()
        volume_spike = self._has_volume_spike()
        trend_up = self._get_trend_direction() == "UP"
        rsi_ok = self.rsi < self.rsi_overbought
        regime_allows = self._should_long_by_regime()
        
        if strong_candle and volume_spike and trend_up and rsi_ok and regime_allows:
            candle_strength = (self.close - self.open) / self.open * 100
            self.log(f"üü¢ LONG SIGNAL:")
            self.log(f"   Candle: +{candle_strength:.2f}%")
            self.log(f"   Volume: {self.current_volume/self.volume_ma:.1f}x avg")
            self.log(f"   RSI: {self.rsi:.1f}")
            self.log(f"   Market: {self.market_regime}")
            return True
            
        return False
    
    def should_short(self) -> bool:
        """
        –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT:
        1. –°–∏–ª—å–Ω–∞—è –∫—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ (>1.5%)
        2. –í—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞ (>1.3x —Å—Ä–µ–¥–Ω–µ–≥–æ)
        3. –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (—Ü–µ–Ω–∞ < EMA21 < EMA50)
        4. RSI –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (>25)
        5. –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —à–æ—Ä—Ç—ã
        """
        if not self._can_trade():
            return False
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
        self._update_market_regime()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        strong_candle = self._is_strong_bearish_candle()
        volume_spike = self._has_volume_spike()
        trend_down = self._get_trend_direction() == "DOWN"
        rsi_ok = self.rsi > self.rsi_oversold
        regime_allows = self._should_short_by_regime()
        
        if strong_candle and volume_spike and trend_down and rsi_ok and regime_allows:
            candle_strength = abs(self.close - self.open) / self.open * 100
            self.log(f"üî¥ SHORT SIGNAL:")
            self.log(f"   Candle: -{candle_strength:.2f}%")
            self.log(f"   Volume: {self.current_volume/self.volume_ma:.1f}x avg")
            self.log(f"   RSI: {self.rsi:.1f}")
            self.log(f"   Market: {self.market_regime}")
            return True
            
        return False
    
    def should_cancel_entry(self) -> bool:
        return False
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
    def _calculate_position_size(self, entry_price, stop_loss_price):
        """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
        risk_amount = self.available_margin * (self.risk_percent / 100)
        price_diff = abs(entry_price - stop_loss_price)
        
        if price_diff > 0:
            qty = risk_amount / price_diff
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            max_qty = (self.available_margin * 0.8) / entry_price
            return min(qty, max_qty, 0.1)  # –ú–∞–∫—Å–∏–º—É–º 0.1 BTC –∑–∞ —Å–¥–µ–ª–∫—É
        else:
            return 0.001
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        atr_stop = self.atr * self.atr_stop_multiplier
        stop_loss_price = entry_price - atr_stop
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        risk_amount = entry_price - stop_loss_price
        take_profit_price = entry_price + (risk_amount * self.min_rr_ratio)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.buy = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'LONG'
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log(f"=== LONG POSITION OPENED ===")
        self.log(f"Size: {qty:.4f} BTC @ ${entry_price:.2f}")
        self.log(f"Stop Loss: ${stop_loss_price:.2f} (ATR: {atr_stop:.2f})")
        self.log(f"Take Profit: ${take_profit_price:.2f} (R:R = 1:{self.min_rr_ratio})")
        self.log(f"Risk: ${qty * risk_amount:.2f}")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        atr_stop = self.atr * self.atr_stop_multiplier
        stop_loss_price = entry_price + atr_stop
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        risk_amount = stop_loss_price - entry_price
        take_profit_price = entry_price - (risk_amount * self.min_rr_ratio)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.sell = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'SHORT'
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log(f"=== SHORT POSITION OPENED ===")
        self.log(f"Size: {qty:.4f} BTC @ ${entry_price:.2f}")
        self.log(f"Stop Loss: ${stop_loss_price:.2f} (ATR: {atr_stop:.2f})")
        self.log(f"Take Profit: ${take_profit_price:.2f} (R:R = 1:{self.min_rr_ratio})")
        self.log(f"Risk: ${qty * risk_amount:.2f}")
    
    def update_position(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π"""
        if not self.position.is_open:
            return
            
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if self.entry_bar and (self.index - self.entry_bar) >= self.max_holding_hours:
            self.liquidate()
            self.log(f"üïê Position closed by time limit ({self.max_holding_hours}h)")
            self.log(f"Final P&L: ${self.position.pnl:.2f}")
            self._reset_position()
    
    def _reset_position(self):
        """–°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏"""
        self.entry_bar = None
        self.position_type = None
    
    def on_close_position(self, order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        pnl = self.position.pnl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if pnl < 0:
            self.consecutive_losses += 1
            self.log(f"‚ùå Loss: ${pnl:.2f} | Consecutive losses: {self.consecutive_losses}")
        else:
            self.consecutive_losses = 0
            self.log(f"‚úÖ Profit: ${pnl:.2f} | Reset loss counter")
        
        self.log(f"üîö Position closed @ ${order.price:.2f}")
        self.log(f"Market regime was: {self.market_regime}")
        
        self._reset_position()
    
    def before(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.index % 24 == 0 and self.index >= self.ema_slow:
            trend = self._get_trend_direction()
            vol_ratio = self.current_volume / self.volume_ma if self.volume_ma > 0 else 1
            
            self.log(f"üìä Hour {self.index}: ${self.close:.2f}")
            self.log(f"   Trend: {trend} | RSI: {self.rsi:.1f} | Vol: {vol_ratio:.1f}x")
            self.log(f"   Market: {self.market_regime} | Losses: {self.consecutive_losses}")
            
            if self.position.is_open:
                hours_held = self.index - self.entry_bar if self.entry_bar else 0
                self.log(f"   Position: {self.position_type} {hours_held}h | P&L: ${self.position.pnl:.2f}")
