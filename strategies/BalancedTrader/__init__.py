# strategies/BalancedTrader/__init__.py
from jesse.strategies import Strategy
import jesse.indicators as ta


class BalancedTrader(Strategy):
    """
    BALANCED TRADER v2.0 - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞
    –¶–µ–ª—å: 3-5 —Å–¥–µ–ª–æ–∫ –≤ –Ω–µ–¥–µ–ª—é —Å –≤–∏–Ω—Ä–µ–π—Ç–æ–º 55-65%
    –¢–∞–π–º—Ñ—Ä–µ–π–º: 15 –º–∏–Ω—É—Ç (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º)
    
    –£–ª—É—á—à–µ–Ω–∏—è v2.0:
    - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ (ConflictingRules)
    - –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
    - –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–µ–Ω–∏—è long/short
    - –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self):
        super().__init__()
        
        # === –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
        self.ema_fast = 9           # –ë—ã—Å—Ç—Ä–∞—è EMA
        self.ema_slow = 21          # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
        self.rsi_period = 14        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RSI
        self.bb_period = 20         # Bollinger Bands
        self.bb_std = 2             # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        self.volume_ma_period = 14  # –û–±—ä—ë–º
        self.atr_period = 14        # ATR
        
        # === –£–õ–£–ß–®–ï–ù–ù–´–ï –£–°–õ–û–í–ò–Ø –í–•–û–î–ê ===
        self.rsi_oversold = 30      # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
        self.rsi_overbought = 70    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
        self.rsi_neutral_min = 40   # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
        self.rsi_neutral_max = 60   # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
        self.min_volume_ratio = 1.3 # –û–±—ä—ë–º 1.3x —Å—Ä–µ–¥–Ω–µ–≥–æ (—Å—Ç—Ä–æ–∂–µ)
        self.min_candle_body = 0.25 # –ú–∏–Ω–∏–º—É–º 0.25% —Ä–∞–∑–º–µ—Ä —Å–≤–µ—á–∏
        self.trend_strength_min = 0.4 # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
        
        # === –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –†–ò–°–ö–ò ===
        self.risk_percent = 1.0     # 1% —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
        self.stop_loss_atr = 1.8    # 1.8x ATR –¥–ª—è —Å—Ç–æ–ø–∞
        self.take_profit_atr = 3.6  # 3.6x ATR –¥–ª—è –ø—Ä–æ—Ñ–∏—Ç–∞ (1:2 R:R)
        self.max_holding_bars = 32  # –ú–∞–∫—Å–∏–º—É–º 8 —á–∞—Å–æ–≤ (32 —Å–≤–µ—á–∏ –ø–æ 15 –º–∏–Ω)
        
        # === –ê–ö–¢–ò–í–ù–û–°–¢–¨ ===
        self.max_daily_trades = 3   # –°–Ω–∏–∂–µ–Ω–æ –¥–æ 3 –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        self.min_gap_bars = 6       # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 1.5 —á–∞—Å–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        self.max_consecutive_losses = 3 # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ 3 —É–±—ã—Ç–∫–æ–≤
        
        # === –ù–û–í–´–ï –§–ò–õ–¨–¢–†–´ –ö–ê–ß–ï–°–¢–í–ê ===
        self.min_ema_separation = 0.2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É EMA –≤ %
        self.bb_squeeze_threshold = 1.5 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ BB –≤ %
        self.volume_spike_threshold = 2.0 # –ü–æ—Ä–æ–≥ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞
        
        # === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
        self.entry_bar = None
        self.position_type = None
        self.daily_trades_count = 0
        self.last_day = None
        self.last_trade_bar = None
        self.consecutive_losses = 0
        
        # === –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
        self.signal_strength = 0    # –°–∏–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (0-10)
        self.market_regime = "NEUTRAL" # BULL, BEAR, NEUTRAL
        
        self.log(f"=== BALANCED TRADER v2.0 INITIALIZED ===")
        self.log(f"Target: 3-5 trades per week (Improved Quality)")
        self.log(f"Timeframe: 15m | Risk: {self.risk_percent}% | R:R = 1:2")
        self.log(f"Max daily trades: {self.max_daily_trades} (Quality > Quantity)")

    # === –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
    @property
    def ema9(self):
        return ta.ema(self.candles, period=self.ema_fast)
    
    @property
    def ema21(self):
        return ta.ema(self.candles, period=self.ema_slow)
    
    @property
    def rsi(self):
        return ta.rsi(self.candles, period=self.rsi_period)
    
    @property
    def bb_upper(self):
        return ta.bollinger_bands(self.candles, period=self.bb_period, devup=self.bb_std)[0]
    
    @property
    def bb_middle(self):
        return ta.bollinger_bands(self.candles, period=self.bb_period, devup=self.bb_std)[1]
    
    @property
    def bb_lower(self):
        return ta.bollinger_bands(self.candles, period=self.bb_period, devup=self.bb_std)[2]
    
    @property
    def bb_width(self):
        """–®–∏—Ä–∏–Ω–∞ Bollinger Bands –≤ % –æ—Ç —Ü–µ–Ω—ã"""
        return ((self.bb_upper - self.bb_lower) / self.bb_middle) * 100
    
    @property
    def atr(self):
        return ta.atr(self.candles, period=self.atr_period)
    
    @property
    def volume_ma(self):
        return ta.sma(self.candles[:, 5], period=self.volume_ma_period)
    
    @property
    def current_volume(self):
        return self.candles[-1, 5]
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    def _update_daily_counter(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        current_day = self.index // 96  # 96 —Å–≤–µ—á–µ–π –ø–æ 15 –º–∏–Ω = 1 –¥–µ–Ω—å
        if self.last_day != current_day:
            if self.daily_trades_count > 0:
                self.log(f"üìÖ Day {current_day}: Had {self.daily_trades_count} trades yesterday")
            self.daily_trades_count = 0
            self.last_day = current_day
    
    def _update_market_regime(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞"""
        if self.index < 48:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–Ω—è –¥–∞–Ω–Ω—ã—Ö
            return
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è (48 —Å–≤–µ—á–µ–π)
        price_48h_ago = self.candles[-48, 4]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è 48 —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥
        price_change = (self.close - price_48h_ago) / price_48h_ago * 100
        
        if price_change > 3:
            self.market_regime = "BULL"
        elif price_change < -3:
            self.market_regime = "BEAR"
        else:
            self.market_regime = "NEUTRAL"
    
    def _get_ema_separation(self):
        """–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É EMA –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        return abs(self.ema9 - self.ema21) / self.ema21 * 100
    
    def _is_trending_up(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞"""
        price_above_ema = self.close > self.ema21
        ema_trending_up = self.ema9 > self.ema21
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
        trend_strength = (self.close - self.ema21) / self.ema21 * 100
        strong_enough = trend_strength > self.trend_strength_min
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ EMA
        ema_separation = self._get_ema_separation()
        good_separation = ema_separation > self.min_ema_separation
        
        return price_above_ema and ema_trending_up and strong_enough and good_separation
    
    def _is_trending_down(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞"""
        price_below_ema = self.close < self.ema21
        ema_trending_down = self.ema9 < self.ema21
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
        trend_strength = (self.ema21 - self.close) / self.ema21 * 100
        strong_enough = trend_strength > self.trend_strength_min
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ EMA
        ema_separation = self._get_ema_separation()
        good_separation = ema_separation > self.min_ema_separation
        
        return price_below_ema and ema_trending_down and strong_enough and good_separation
    
    def _has_volume_support(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—ä—ë–º–æ–º"""
        base_volume = self.current_volume > (self.volume_ma * self.min_volume_ratio)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞
        volume_spike = self.current_volume > (self.volume_ma * self.volume_spike_threshold)
        
        return base_volume or volume_spike
    
    def _is_good_candle(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–∏"""
        body_percent = abs(self.close - self.open) / self.open * 100
        body_ok = body_percent >= self.min_candle_body
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–µ—á–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–¥–∂–∏ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ)
        body_vs_range = abs(self.close - self.open) / (self.high - self.low)
        not_doji = body_vs_range > 0.3  # –¢–µ–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 30% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        
        return body_ok and not_doji
    
    def _bb_not_squeezed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Bollinger Bands –Ω–µ —Å–∂–∞—Ç—ã"""
        return self.bb_width > self.bb_squeeze_threshold
    
    def _near_bb_support(self):
        """–¶–µ–Ω–∞ –æ–∫–æ–ª–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"""
        distance_to_lower = (self.close - self.bb_lower) / self.close * 100
        return distance_to_lower < 0.5
    
    def _near_bb_resistance(self):
        """–¶–µ–Ω–∞ –æ–∫–æ–ª–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"""
        distance_to_upper = (self.bb_upper - self.close) / self.close * 100
        return distance_to_upper < 0.5
    
    def _can_trade(self):
        """–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self._update_daily_counter()
        self._update_market_regime()
        
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if self.index < max(self.ema_slow, self.bb_period, self.volume_ma_period, 48) + 10:
            return False
        
        # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
        if self.position.is_open:
            return False
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if self.daily_trades_count >= self.max_daily_trades:
            return False
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥
        if self.consecutive_losses >= self.max_consecutive_losses:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if (self.last_trade_bar is not None and 
            (self.index - self.last_trade_bar) < self.min_gap_bars):
            return False
        
        # BB –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∂–∞—Ç—ã (–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        if not self._bb_not_squeezed():
            return False
        
        return True
    
    def _calculate_signal_strength_long(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É LONG —Å–∏–≥–Ω–∞–ª–∞ (0-10)"""
        strength = 0
        
        # –¢—Ä–µ–Ω–¥ (0-3 –±–∞–ª–ª–æ–≤)
        if self._is_trending_up():
            strength += 3
        elif self.close > self.ema9 > self.ema21:
            strength += 1
        
        # RSI (0-2 –±–∞–ª–ª–∞)
        if self.rsi < self.rsi_neutral_min:
            strength += 2
        elif self.rsi < 50:
            strength += 1
        
        # –û–±—ä—ë–º (0-2 –±–∞–ª–ª–∞)
        vol_ratio = self.current_volume / self.volume_ma if self.volume_ma > 0 else 1
        if vol_ratio > self.volume_spike_threshold:
            strength += 2
        elif vol_ratio > self.min_volume_ratio:
            strength += 1
        
        # –°–≤–µ—á–∞ (0-2 –±–∞–ª–ª–∞)
        if self._is_good_candle() and self.close > self.open:
            strength += 2
        
        # BB –ø–æ–∑–∏—Ü–∏—è (0-1 –±–∞–ª–ª)
        if self._near_bb_support():
            strength += 1
        
        return strength
    
    def _calculate_signal_strength_short(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É SHORT —Å–∏–≥–Ω–∞–ª–∞ (0-10)"""
        strength = 0
        
        # –¢—Ä–µ–Ω–¥ (0-3 –±–∞–ª–ª–æ–≤)
        if self._is_trending_down():
            strength += 3
        elif self.close < self.ema9 < self.ema21:
            strength += 1
        
        # RSI (0-2 –±–∞–ª–ª–∞)
        if self.rsi > self.rsi_neutral_max:
            strength += 2
        elif self.rsi > 50:
            strength += 1
        
        # –û–±—ä—ë–º (0-2 –±–∞–ª–ª–∞)
        vol_ratio = self.current_volume / self.volume_ma if self.volume_ma > 0 else 1
        if vol_ratio > self.volume_spike_threshold:
            strength += 2
        elif vol_ratio > self.min_volume_ratio:
            strength += 1
        
        # –°–≤–µ—á–∞ (0-2 –±–∞–ª–ª–∞)
        if self._is_good_candle() and self.close < self.open:
            strength += 2
        
        # BB –ø–æ–∑–∏—Ü–∏—è (0-1 –±–∞–ª–ª)
        if self._near_bb_resistance():
            strength += 1
        
        return strength

    # === –£–õ–£–ß–®–ï–ù–ù–´–ï –£–°–õ–û–í–ò–Ø –í–•–û–î–ê –° –ó–ê–©–ò–¢–û–ô –û–¢ –ö–û–ù–§–õ–ò–ö–¢–û–í ===
    def should_long(self) -> bool:
        """
        –£–õ–£–ß–®–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è LONG —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:
        
        1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        2. –†–∞—Å—á—ë—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
        3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ = 6/10
        4. –í–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å SHORT —Å–∏–≥–Ω–∞–ª–∞–º–∏
        """
        if not self._can_trade():
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–æ–≤
        long_strength = self._calculate_signal_strength_long()
        short_strength = self._calculate_signal_strength_short()
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        # LONG –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Å–∏–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ SHORT
        if short_strength >= long_strength:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        if (long_strength - short_strength) < 2:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ LONG —Å–∏–≥–Ω–∞–ª–∞
        if long_strength < 6:
            return False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        rsi_allows_long = self.rsi < self.rsi_overbought
        market_allows = self.market_regime in ["BULL", "NEUTRAL"]
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if rsi_allows_long and market_allows:
            self.signal_strength = long_strength
            self.log(f"üü¢ LONG: Strength {long_strength}/10 vs SHORT {short_strength}/10")
            self.log(f"   Price: ${self.close:.2f} | RSI: {self.rsi:.1f} | Market: {self.market_regime}")
            self.entry_reason = f"STRENGTH_{long_strength}"
            return True
        
        return False
    
    def should_short(self) -> bool:
        """
        –£–õ–£–ß–®–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è SHORT —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:
        
        1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        2. –†–∞—Å—á—ë—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
        3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ = 6/10
        4. –í–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å LONG —Å–∏–≥–Ω–∞–ª–∞–º–∏
        """
        if not self._can_trade():
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–æ–≤
        long_strength = self._calculate_signal_strength_long()
        short_strength = self._calculate_signal_strength_short()
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        # SHORT –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Å–∏–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ LONG
        if long_strength >= short_strength:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        if (short_strength - long_strength) < 2:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ SHORT —Å–∏–≥–Ω–∞–ª–∞
        if short_strength < 6:
            return False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        rsi_allows_short = self.rsi > self.rsi_oversold
        market_allows = self.market_regime in ["BEAR", "NEUTRAL"]
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if rsi_allows_short and market_allows:
            self.signal_strength = short_strength
            self.log(f"üî¥ SHORT: Strength {short_strength}/10 vs LONG {long_strength}/10")
            self.log(f"   Price: ${self.close:.2f} | RSI: {self.rsi:.1f} | Market: {self.market_regime}")
            self.entry_reason = f"STRENGTH_{short_strength}"
            return True
        
        return False
    
    def should_cancel_entry(self) -> bool:
        return False
    
    # === –£–õ–£–ß–®–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
    def _calculate_position_size(self, entry_price, stop_loss_price):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        risk_amount = self.available_margin * (self.risk_percent / 100)
        price_diff = abs(entry_price - stop_loss_price)
        
        if price_diff > 0:
            qty = risk_amount / price_diff
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            strength_multiplier = min(self.signal_strength / 10.0, 0.8)
            max_qty = (self.available_margin * strength_multiplier) / entry_price
            
            return min(qty, max_qty, 0.15)  # –ú–∞–∫—Å–∏–º—É–º 0.15 BTC
        else:
            return 0.001
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π LONG –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å (—Å–∏–ª—å–Ω–µ–µ —Å–∏–≥–Ω–∞–ª = –±–ª–∏–∂–µ —Å—Ç–æ–ø)
        atr_value = self.atr
        stop_multiplier = self.stop_loss_atr * (10 - self.signal_strength) / 10
        stop_loss_price = entry_price - (atr_value * stop_multiplier)
        take_profit_price = entry_price + (atr_value * self.take_profit_atr)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.buy = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'LONG'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        risk_amount = qty * (entry_price - stop_loss_price)
        potential_profit = qty * (take_profit_price - entry_price)
        
        self.log(f"=== BALANCED LONG #{self.daily_trades_count} (v2.0) ===")
        self.log(f"Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty:.4f} @ ${entry_price:.2f}")
        self.log(f"SL: ${stop_loss_price:.2f} | TP: ${take_profit_price:.2f}")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"Signal Strength: {self.signal_strength}/10")
        self.log(f"RSI: {self.rsi:.1f} | Vol: {self.current_volume/self.volume_ma:.1f}x | BB: {self.bb_width:.1f}%")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π SHORT –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        atr_value = self.atr
        stop_multiplier = self.stop_loss_atr * (10 - self.signal_strength) / 10
        stop_loss_price = entry_price + (atr_value * stop_multiplier)
        take_profit_price = entry_price - (atr_value * self.take_profit_atr)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.sell = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'SHORT'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        risk_amount = qty * (stop_loss_price - entry_price)
        potential_profit = qty * (entry_price - take_profit_price)
        
        self.log(f"=== BALANCED SHORT #{self.daily_trades_count} (v2.0) ===")
        self.log(f"Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty:.4f} @ ${entry_price:.2f}")
        self.log(f"SL: ${stop_loss_price:.2f} | TP: ${take_profit_price:.2f}")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"Signal Strength: {self.signal_strength}/10")
        self.log(f"RSI: {self.rsi:.1f} | Vol: {self.current_volume/self.volume_ma:.1f}x | BB: {self.bb_width:.1f}%")
    
    def update_position(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π"""
        if not self.position.is_open:
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if self.entry_bar and (self.index - self.entry_bar) >= self.max_holding_bars:
            self.liquidate()
            self.log(f"‚è∞ Time exit after {self.max_holding_bars*15} minutes")
            self.log(f"P&L: ${self.position.pnl:.2f}")
            self._reset_position()
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã—Ö–æ–¥ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —É—Å–ª–æ–≤–∏–π (–Ω–æ–≤–æ–µ!)
        if self.entry_bar and (self.index - self.entry_bar) >= 8:  # –ú–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
            current_long_strength = self._calculate_signal_strength_long()
            current_short_strength = self._calculate_signal_strength_short()
            
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è - –≤—ã—Ö–æ–¥–∏–º
            if self.position_type == 'LONG' and current_short_strength > current_long_strength + 3:
                self.liquidate()
                self.log(f"üîÑ Long exit: Signal reversed (SHORT {current_short_strength} > LONG {current_long_strength})")
                self.log(f"P&L: ${self.position.pnl:.2f}")
                self._reset_position()
            elif self.position_type == 'SHORT' and current_long_strength > current_short_strength + 3:
                self.liquidate()
                self.log(f"üîÑ Short exit: Signal reversed (LONG {current_long_strength} > SHORT {current_short_strength})")
                self.log(f"P&L: ${self.position.pnl:.2f}")
                self._reset_position()
    
    def _reset_position(self):
        """–°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏"""
        self.entry_bar = None
        self.position_type = None
        self.signal_strength = 0
        if hasattr(self, 'entry_reason'):
            delattr(self, 'entry_reason')
    
    def on_close_position(self, order):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        pnl = self.position.pnl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —É–±—ã—Ç–∫–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        if pnl < 0:
            self.consecutive_losses += 1
            loss_percent = (pnl / self.available_margin) * 100
            self.log(f"‚ùå Loss: ${pnl:.2f} ({loss_percent:.2f}%) | Consecutive: {self.consecutive_losses}")
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ —É–±—ã—Ç–∫–æ–≤
            if self.consecutive_losses == 2:
                self.log("‚ö†Ô∏è 2 losses - increasing caution (higher signal strength required)")
            elif self.consecutive_losses >= 3:
                self.log("üõë 3+ losses - maximum caution mode")
        else:
            self.consecutive_losses = 0
            profit_percent = (pnl / self.available_margin) * 100
            self.log(f"‚úÖ Profit: ${pnl:.2f} ({profit_percent:.2f}%) | Reset losses")
        
        self.log(f"üîö Closed @ ${order.price:.2f} | Daily: {self.daily_trades_count}/{self.max_daily_trades}")
        self._reset_position()
    
    def before(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"""
        if self.index % 12 == 0 and self.index >= max(self.bb_period, 48):
            self._update_daily_counter()
            self._update_market_regime()
            
            # –†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–∏—Ö —Å–∏–ª —Å–∏–≥–Ω–∞–ª–æ–≤
            long_str = self._calculate_signal_strength_long()
            short_str = self._calculate_signal_strength_short()
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            trend_emoji = "üìà" if self._is_trending_up() else "üìâ" if self._is_trending_down() else "‚ÜîÔ∏è"
            
            vol_ratio = self.current_volume / self.volume_ma if self.volume_ma > 0 else 1
            vol_emoji = "üîä" if vol_ratio > 2 else "üîâ" if vol_ratio > 1.3 else "üîá"
            
            self.log(f"üìä {(self.index*15)//60}h: ${self.close:.2f} | {self.market_regime}")
            self.log(f"   {trend_emoji} RSI:{self.rsi:.0f} {vol_emoji} BB:{self.bb_width:.1f}%")
            self.log(f"   Signals: üü¢{long_str} üî¥{short_str} | Trades: {self.daily_trades_count}/3 | L: {self.consecutive_losses}")
            
            if self.position.is_open:
                minutes_held = (self.index - self.entry_bar) * 15 if self.entry_bar else 0
                self.log(f"   Position: {self.position_type} {minutes_held//60}h{minutes_held%60}m | P&L: ${self.position.pnl:.2f}")
