# strategies/QualityTrader/__init__.py
from jesse.strategies import Strategy
import jesse.indicators as ta
import numpy as np


class QualityTrader(Strategy):
    """
    QUALITY OVER QUANTITY STRATEGY
    –¶–µ–ª—å: 1-2 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –¥–µ–Ω—å —Å –≤–∏–Ω—Ä–µ–π—Ç–æ–º 65%+
    –õ–æ–≥–∏–∫–∞: –°—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è + –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ + —Ç—Ä–µ–Ω–¥-—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    """
    
    def __init__(self):
        super().__init__()
        
        # === –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
        self.ema_fast = 12          # –ë—ã—Å—Ç—Ä–∞—è EMA
        self.ema_slow = 26          # –ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA
        self.ema_trend = 50         # EMA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        self.rsi_period = 14        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RSI
        self.atr_period = 14        # ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        self.volume_ma_period = 20  # –û–±—ä—ë–º
        
        # === –°–¢–†–û–ì–ò–ï –£–°–õ–û–í–ò–Ø –í–•–û–î–ê ===
        self.min_trend_strength = 0.5    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –≤ %
        self.min_volume_ratio = 1.5      # –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1.5x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        self.rsi_overbought = 70         # RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å  
        self.rsi_oversold = 30           # RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
        self.min_candle_body = 0.3       # –ú–∏–Ω–∏–º—É–º 0.3% —Ä–∞–∑–º–µ—Ä —Å–≤–µ—á–∏
        self.trend_confirmation_bars = 3 # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ 3 —Å–≤–µ—á–∞—Ö
        
        # === –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò ===
        self.risk_percent = 0.5          # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
        self.atr_stop_multiplier = 2.0   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø
        self.min_rr_ratio = 2.5          # –í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        self.max_holding_hours = 24      # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
        
        # === –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ß–ï–°–¢–í–ê ===
        self.max_daily_trades = 2        # –ú–ê–ö–°–ò–ú–£–ú 2 –°–î–ï–õ–ö–ò –í –î–ï–ù–¨!
        self.min_gap_hours = 4           # –ú–∏–Ω–∏–º—É–º 4 —á–∞—Å–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        self.max_consecutive_losses = 2  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ 2 —É–±—ã—Ç–∫–æ–≤
        self.min_profit_to_trade = 20    # –¢–æ—Ä–≥—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª >$20
        
        # === –§–ò–õ–¨–¢–†–´ –ö–ê–ß–ï–°–¢–í–ê ===
        self.require_trend_alignment = True   # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
        self.require_volume_confirmation = True # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º
        self.require_rsi_filter = True       # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π RSI —Ñ–∏–ª—å—Ç—Ä
        self.avoid_choppy_market = True      # –ò–∑–±–µ–≥–∞–µ–º –±–æ–∫–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
        
        # === –°–û–°–¢–û–Ø–ù–ò–ï ===
        self.entry_bar = None
        self.position_type = None
        self.daily_trades_count = 0
        self.last_day = None
        self.last_trade_bar = None
        self.consecutive_losses = 0
        self.market_regime = "UNKNOWN"
        
        self.log(f"=== QUALITY TRADER INITIALIZED ===")
        self.log(f"Philosophy: QUALITY > QUANTITY")
        self.log(f"Target: 1-2 high-quality trades per day")
        self.log(f"Risk: {self.risk_percent}% | Min R:R: {self.min_rr_ratio}")
        self.log(f"Max daily trades: {self.max_daily_trades}")

    # === –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
    @property
    def ema12(self):
        return ta.ema(self.candles, period=self.ema_fast)
    
    @property
    def ema26(self):
        return ta.ema(self.candles, period=self.ema_slow)
    
    @property
    def ema50(self):
        return ta.ema(self.candles, period=self.ema_trend)
    
    @property
    def rsi(self):
        return ta.rsi(self.candles, period=self.rsi_period)
    
    @property
    def atr(self):
        return ta.atr(self.candles, period=self.atr_period)
    
    @property
    def volume_ma(self):
        return ta.sma(self.candles[:, 5], period=self.volume_ma_period)
    
    @property
    def current_volume(self):
        return self.candles[-1, 5]
    
    # === –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê (–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô) ===
    def _get_trend_direction(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥ –ø–æ EMA50
        price_vs_ema50 = (self.close - self.ema50) / self.ema50 * 100
        
        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
        ema12_vs_ema26 = (self.ema12 - self.ema26) / self.ema26 * 100
        
        # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
        if price_vs_ema50 > self.min_trend_strength and ema12_vs_ema26 > 0:
            return "STRONG_UP"
        elif price_vs_ema50 < -self.min_trend_strength and ema12_vs_ema26 < 0:
            return "STRONG_DOWN"
        elif abs(price_vs_ema50) < self.min_trend_strength:
            return "SIDEWAYS"
        else:
            return "WEAK_TREND"
    
    def _confirm_trend_on_multiple_bars(self, direction):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–≤–µ—á–∞—Ö"""
        if self.index < self.trend_confirmation_bars:
            return False
            
        confirmations = 0
        for i in range(self.trend_confirmation_bars):
            if self.index >= i + 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ EMA –Ω–∞ –ø—Ä–æ—à–ª—ã—Ö —Å–≤–µ—á–∞—Ö
                past_candles = self.candles[:-i-1] if i > 0 else self.candles
                past_ema12 = ta.ema(past_candles, period=self.ema_fast)
                past_ema26 = ta.ema(past_candles, period=self.ema_slow)
                
                if direction == "UP" and past_ema12 > past_ema26:
                    confirmations += 1
                elif direction == "DOWN" and past_ema12 < past_ema26:
                    confirmations += 1
        
        return confirmations >= (self.trend_confirmation_bars - 1)
    
    def _is_market_choppy(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–∫–æ–≤–æ–π/—Ö–∞–æ—Ç–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
        if self.index < 10:
            return False
            
        recent_highs = self.candles[-10:, 2]  # High prices
        recent_lows = self.candles[-10:, 3]   # Low prices
        
        price_range = (max(recent_highs) - min(recent_lows)) / self.close * 100
        
        # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –º–µ–Ω—å—à–µ 2% - —Ä—ã–Ω–æ–∫ –±–æ–∫–æ–≤–æ–π
        return price_range < 2.0
    
    def _update_daily_counter(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        current_day = self.index // 24  # 24 —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ = 1 –¥–µ–Ω—å
        if self.last_day != current_day:
            self.daily_trades_count = 0
            self.last_day = current_day
            if current_day > 0:  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
                self.log(f"üìÖ New day {current_day}: Reset daily counter")
    
    def _has_quality_volume(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—ä—ë–º–∞"""
        if not self.require_volume_confirmation:
            return True
            
        volume_ratio = self.current_volume / self.volume_ma
        return volume_ratio >= self.min_volume_ratio
    
    def _is_strong_candle(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–≤–µ—á–∏"""
        body_percent = abs(self.close - self.open) / self.open * 100
        return body_percent >= self.min_candle_body
    
    def _calculate_potential_profit(self, entry_price, is_long=True):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å —Å–¥–µ–ª–∫–∏"""
        atr_value = self.atr
        stop_distance = atr_value * self.atr_stop_multiplier
        
        if is_long:
            stop_loss = entry_price - stop_distance
            take_profit = entry_price + (stop_distance * self.min_rr_ratio)
        else:
            stop_loss = entry_price + stop_distance
            take_profit = entry_price - (stop_distance * self.min_rr_ratio)
        
        risk_amount = self.available_margin * (self.risk_percent / 100)
        price_diff = abs(entry_price - stop_loss)
        
        if price_diff > 0:
            qty = risk_amount / price_diff
            potential_profit = qty * abs(take_profit - entry_price)
            return potential_profit
        
        return 0
    
    def _can_trade(self):
        """–°–¢–†–û–ì–ò–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self._update_daily_counter()
        
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if self.index < max(self.ema_trend, self.volume_ma_period, self.trend_confirmation_bars) + 10:
            return False
        
        # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
        if self.position.is_open:
            return False
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if self.daily_trades_count >= self.max_daily_trades:
            return False
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥
        if self.consecutive_losses >= self.max_consecutive_losses:
            self.log(f"‚è∏Ô∏è  Trading paused: {self.consecutive_losses} consecutive losses")
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if (self.last_trade_bar is not None and 
            (self.index - self.last_trade_bar) < self.min_gap_hours):
            return False
        
        # –ò–∑–±–µ–≥–∞–µ–º —Ö–∞–æ—Ç–∏—á–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
        if self.avoid_choppy_market and self._is_market_choppy():
            return False
        
        return True

    # === –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –£–°–õ–û–í–ò–Ø –í–•–û–î–ê ===
    def should_long(self) -> bool:
        """
        –°–¢–†–û–ì–ò–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è LONG:
        1. –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (EMA12 > EMA26 > EMA50)
        2. –¶–µ–Ω–∞ –≤—ã—à–µ EMA50 –Ω–∞ –º–∏–Ω–∏–º—É–º 0.5%
        3. RSI –≤ –∑–æ–Ω–µ 30-70 (–Ω–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ 3 —Å–≤–µ—á–∞—Ö
        5. –û–±—ä—ë–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ 1.5 —Ä–∞–∑–∞
        6. –°–∏–ª—å–Ω–∞—è –∑–µ–ª—ë–Ω–∞—è —Å–≤–µ—á–∞ (>0.3%)
        7. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å >$20
        """
        if not self._can_trade():
            return False
        
        # === –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê ===
        trend = self._get_trend_direction()
        if self.require_trend_alignment and trend != "STRONG_UP":
            return False
        
        trend_confirmed = self._confirm_trend_on_multiple_bars("UP")
        if not trend_confirmed:
            return False
        
        # === –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø ===
        ema_alignment = self.ema12 > self.ema26 > self.ema50
        price_above_trend = self.close > self.ema50
        
        # === RSI –§–ò–õ–¨–¢–† ===
        rsi_ok = True
        if self.require_rsi_filter:
            rsi_ok = self.rsi_oversold <= self.rsi <= self.rsi_overbought
        
        # === –û–ë–™–Å–ú –ò –°–í–ï–ß–ê ===
        volume_ok = self._has_quality_volume()
        strong_candle = self._is_strong_candle()
        green_candle = self.close > self.open
        
        # === –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–ò–ë–´–õ–¨ ===
        potential_profit = self._calculate_potential_profit(self.close, is_long=True)
        profit_ok = potential_profit >= self.min_profit_to_trade
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –£–°–õ–û–í–ò–Ø
        all_conditions = [
            ema_alignment,
            price_above_trend, 
            rsi_ok,
            volume_ok,
            strong_candle,
            green_candle,
            profit_ok
        ]
        
        if all(all_conditions):
            self.log(f"üü¢ HIGH-QUALITY LONG SIGNAL:")
            self.log(f"   Trend: {trend}")
            self.log(f"   Price: ${self.close:.2f} (EMA50: ${self.ema50:.2f})")
            self.log(f"   RSI: {self.rsi:.1f}")
            self.log(f"   Volume: {self.current_volume/self.volume_ma:.1f}x avg")
            self.log(f"   Potential profit: ${potential_profit:.2f}")
            self.log(f"   Daily trades: {self.daily_trades_count}/{self.max_daily_trades}")
            return True
        
        return False
    
    def should_short(self) -> bool:
        """
        –°–¢–†–û–ì–ò–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è SHORT:
        1. –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (EMA12 < EMA26 < EMA50)
        2. –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA50 –Ω–∞ –º–∏–Ω–∏–º—É–º 0.5%
        3. RSI –≤ –∑–æ–Ω–µ 30-70 (–Ω–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ 3 —Å–≤–µ—á–∞—Ö
        5. –û–±—ä—ë–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ 1.5 —Ä–∞–∑–∞
        6. –°–∏–ª—å–Ω–∞—è –∫—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ (>0.3%)
        7. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å >$20
        """
        if not self._can_trade():
            return False
        
        # === –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê ===
        trend = self._get_trend_direction()
        if self.require_trend_alignment and trend != "STRONG_DOWN":
            return False
        
        trend_confirmed = self._confirm_trend_on_multiple_bars("DOWN")
        if not trend_confirmed:
            return False
        
        # === –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø ===
        ema_alignment = self.ema12 < self.ema26 < self.ema50
        price_below_trend = self.close < self.ema50
        
        # === RSI –§–ò–õ–¨–¢–† ===
        rsi_ok = True
        if self.require_rsi_filter:
            rsi_ok = self.rsi_oversold <= self.rsi <= self.rsi_overbought
        
        # === –û–ë–™–Å–ú –ò –°–í–ï–ß–ê ===
        volume_ok = self._has_quality_volume()
        strong_candle = self._is_strong_candle()
        red_candle = self.close < self.open
        
        # === –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–ò–ë–´–õ–¨ ===
        potential_profit = self._calculate_potential_profit(self.close, is_long=False)
        profit_ok = potential_profit >= self.min_profit_to_trade
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –£–°–õ–û–í–ò–Ø
        all_conditions = [
            ema_alignment,
            price_below_trend,
            rsi_ok,
            volume_ok,
            strong_candle,
            red_candle,
            profit_ok
        ]
        
        if all(all_conditions):
            self.log(f"üî¥ HIGH-QUALITY SHORT SIGNAL:")
            self.log(f"   Trend: {trend}")
            self.log(f"   Price: ${self.close:.2f} (EMA50: ${self.ema50:.2f})")
            self.log(f"   RSI: {self.rsi:.1f}")
            self.log(f"   Volume: {self.current_volume/self.volume_ma:.1f}x avg")
            self.log(f"   Potential profit: ${potential_profit:.2f}")
            self.log(f"   Daily trades: {self.daily_trades_count}/{self.max_daily_trades}")
            return True
        
        return False
    
    def should_cancel_entry(self) -> bool:
        return False
    
    # === –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
    def _calculate_position_size(self, entry_price, stop_loss_price):
        """–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        risk_amount = self.available_margin * (self.risk_percent / 100)
        price_diff = abs(entry_price - stop_loss_price)
        
        if price_diff > 0:
            qty = risk_amount / price_diff
            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            max_qty = (self.available_margin * 0.7) / entry_price  # –¢–æ–ª—å–∫–æ 70% –∫–∞–ø–∏—Ç–∞–ª–∞
            return min(qty, max_qty, 0.1)  # –ú–∞–∫—Å–∏–º—É–º 0.1 BTC
        else:
            return 0.001
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π LONG –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        atr_value = self.atr
        stop_loss_price = entry_price - (atr_value * self.atr_stop_multiplier)
        
        # –í—ã—Å–æ–∫–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–º–∏–Ω–∏–º—É–º 1:2.5)
        risk_distance = entry_price - stop_loss_price
        take_profit_price = entry_price + (risk_distance * self.min_rr_ratio)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.buy = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'LONG'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã
        risk_amount = qty * risk_distance
        potential_profit = qty * (take_profit_price - entry_price)
        
        self.log(f"=== QUALITY LONG POSITION #{self.daily_trades_count} ===")
        self.log(f"Entry: {qty:.4f} BTC @ ${entry_price:.2f}")
        self.log(f"Stop Loss: ${stop_loss_price:.2f} (ATR: ${atr_value:.2f})")
        self.log(f"Take Profit: ${take_profit_price:.2f}")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"Risk:Reward = 1:{self.min_rr_ratio}")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π SHORT –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        atr_value = self.atr
        stop_loss_price = entry_price + (atr_value * self.atr_stop_multiplier)
        
        # –í—ã—Å–æ–∫–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–º–∏–Ω–∏–º—É–º 1:2.5)
        risk_distance = stop_loss_price - entry_price
        take_profit_price = entry_price - (risk_distance * self.min_rr_ratio)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.sell = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'SHORT'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã
        risk_amount = qty * risk_distance
        potential_profit = qty * (entry_price - take_profit_price)
        
        self.log(f"=== QUALITY SHORT POSITION #{self.daily_trades_count} ===")
        self.log(f"Entry: {qty:.4f} BTC @ ${entry_price:.2f}")
        self.log(f"Stop Loss: ${stop_loss_price:.2f} (ATR: ${atr_value:.2f})")
        self.log(f"Take Profit: ${take_profit_price:.2f}")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"Risk:Reward = 1:{self.min_rr_ratio}")
    
    def update_position(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π"""
        if not self.position.is_open:
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if self.entry_bar and (self.index - self.entry_bar) >= self.max_holding_hours:
            self.liquidate()
            self.log(f"‚è∞ Position closed by time limit ({self.max_holding_hours}h)")
            self.log(f"P&L: ${self.position.pnl:.2f}")
            self._reset_position()
    
    def _reset_position(self):
        """–°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏"""
        self.entry_bar = None
        self.position_type = None
    
    def on_close_position(self, order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        pnl = self.position.pnl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —É–±—ã—Ç–∫–æ–≤
        if pnl < 0:
            self.consecutive_losses += 1
            self.log(f"‚ùå Quality Loss: ${pnl:.2f}")
            self.log(f"   Consecutive losses: {self.consecutive_losses}")
            
            # –ü–æ—Å–ª–µ 2 —É–±—ã—Ç–∫–æ–≤ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
            if self.consecutive_losses >= self.max_consecutive_losses:
                self.log(f"‚è∏Ô∏è  Pausing trading after {self.consecutive_losses} losses")
                self.log(f"   Will resume after market analysis...")
        else:
            self.consecutive_losses = 0
            self.log(f"‚úÖ Quality Profit: ${pnl:.2f}")
            self.log(f"   Reset loss counter - excellent trade!")
        
        self.log(f"üîö Position closed @ ${order.price:.2f}")
        self.log(f"   Daily trades: {self.daily_trades_count}/{self.max_daily_trades}")
        self._reset_position()
    
    def before(self):
        """–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)"""
        if self.index % 6 == 0 and self.index >= self.ema_trend:
            self._update_daily_counter()
            
            trend = self._get_trend_direction()
            is_choppy = self._is_market_choppy()
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            market_emoji = {
                "STRONG_UP": "üöÄ",
                "STRONG_DOWN": "üêª", 
                "WEAK_TREND": "‚ö™",
                "SIDEWAYS": "‚ÜîÔ∏è"
            }
            
            self.log(f"üìä Quality Check (Hour {self.index}):")
            self.log(f"   Price: ${self.close:.2f} | Trend: {trend} {market_emoji.get(trend, '‚ùì')}")
            self.log(f"   RSI: {self.rsi:.1f} | Vol: {self.current_volume/self.volume_ma:.1f}x")
            self.log(f"   Choppy: {'Yes' if is_choppy else 'No'} | Trades: {self.daily_trades_count}/2")
            self.log(f"   Consecutive losses: {self.consecutive_losses}")
            
            if self.position.is_open:
                hours_held = self.index - self.entry_bar if self.entry_bar else 0
                self.log(f"   Position: {self.position_type} {hours_held}h | P&L: ${self.position.pnl:.2f}")
