# strategies/RSIBot/__init__.py
from jesse.strategies import Strategy
import jesse.indicators as ta


class RSIBot(Strategy):
    """
    RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏—è v2.1 - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    –£–º–µ—Ä–µ–Ω–Ω–æ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    
    def __init__(self):
        super().__init__()
        
        # === –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ RSI ===
        self.rsi_period = 14
        self.oversold_level = 30      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º
        self.overbought_level = 70    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º
        self.rsi_exit_buffer = 5      # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—É—Ñ–µ—Ä
        
        # === –ü–†–û–°–¢–û–ô –§–ò–õ–¨–¢–† –¢–†–ï–ù–î–ê ===
        self.sma_period = 20          # –ö–æ—Ä–æ—Ç–∫–∞—è SMA –¥–ª—è –º—è–≥–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        self.use_trend_filter = True  # –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò ===
        self.stop_loss_percent = 1.8  
        self.take_profit_percent = 3.6 # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:2
        self.risk_percent = 1.0       
        self.max_holding_hours = 36   
        
        # === –ö–û–ù–¢–†–û–õ–¨ –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
        self.max_consecutive_losses = 4  # –ü–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 4 —É–±—ã—Ç–∫–æ–≤
        self.min_gap_between_trades = 2  # –ú–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.entry_price = None
        self.entry_bar = None
        self.position_type = None
        self.consecutive_losses = 0
        self.last_trade_bar = None
        
        self.log(f"=== RSI Bot v2.1 (Balanced) ===")
        self.log(f"RSI: {self.oversold_level}/{self.overbought_level}")
        self.log(f"Risk: {self.risk_percent}%, SL: {self.stop_loss_percent}%, TP: {self.take_profit_percent}%")

    @property
    def rsi(self):
        """RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        return ta.rsi(self.candles, period=self.rsi_period)
    
    @property 
    def rsi_previous(self):
        """RSI –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏"""
        if self.index >= 1:
            return ta.rsi(self.candles[:-1], period=self.rsi_period)
        return 50.0
    
    @property
    def sma(self):
        """–ö–æ—Ä–æ—Ç–∫–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        return ta.sma(self.candles, period=self.sma_period)
    
    def _trend_allows_long(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–º—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä)"""
        if not self.use_trend_filter:
            return True
        # –ü—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ: —Ü–µ–Ω–∞ –≤—ã—à–µ SMA20
        return self.close > self.sma
    
    def _trend_allows_short(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–º—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä)"""
        if not self.use_trend_filter:
            return True
        # –ü—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ: —Ü–µ–Ω–∞ –Ω–∏–∂–µ SMA20
        return self.close < self.sma
    
    def _can_trade(self):
        """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –ù–µ —Ç–æ—Ä–≥—É–µ–º –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
        if self.position.is_open:
            return False
            
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if self.index < max(self.rsi_period, self.sma_period) + 2:
            return False
            
        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤
        if self.consecutive_losses >= self.max_consecutive_losses:
            return False
            
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if (self.last_trade_bar is not None and 
            (self.index - self.last_trade_bar) < self.min_gap_between_trades):
            return False
            
        return True

    def should_long(self) -> bool:
        """
        –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):
        1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        2. RSI –±—ã–ª –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (<=30)
        3. RSI –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è (>35)
        4. –¢—Ä–µ–Ω–¥ –Ω–µ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å (—Ü–µ–Ω–∞ > SMA20)
        """
        if not self._can_trade():
            return False
        
        current_rsi = self.rsi
        prev_rsi = self.rsi_previous
        
        # RSI —É—Å–ª–æ–≤–∏—è
        was_oversold = prev_rsi <= self.oversold_level
        is_recovering = current_rsi > (self.oversold_level + self.rsi_exit_buffer)
        
        # –§–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞ (–º—è–≥–∫–∏–π)
        trend_ok = self._trend_allows_long()
        
        if was_oversold and is_recovering and trend_ok:
            self.log(f"üü¢ LONG: RSI {prev_rsi:.1f}‚Üí{current_rsi:.1f}, Price: {self.close:.2f}")
            return True
            
        return False
    
    def should_short(self) -> bool:
        """
        –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):
        1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        2. RSI –±—ã–ª –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (>=70)
        3. RSI —Å–Ω–∏–∂–∞–µ—Ç—Å—è (<65)
        4. –¢—Ä–µ–Ω–¥ –Ω–µ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å (—Ü–µ–Ω–∞ < SMA20)
        """
        if not self._can_trade():
            return False
            
        current_rsi = self.rsi
        prev_rsi = self.rsi_previous
        
        # RSI —É—Å–ª–æ–≤–∏—è
        was_overbought = prev_rsi >= self.overbought_level
        is_declining = current_rsi < (self.overbought_level - self.rsi_exit_buffer)
        
        # –§–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞ (–º—è–≥–∫–∏–π)
        trend_ok = self._trend_allows_short()
        
        if was_overbought and is_declining and trend_ok:
            self.log(f"üî¥ SHORT: RSI {prev_rsi:.1f}‚Üí{current_rsi:.1f}, Price: {self.close:.2f}")
            return True
            
        return False
    
    def should_cancel_entry(self) -> bool:
        return False
    
    def _calculate_position_size(self, entry_price, stop_loss_price):
        """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
        risk_amount = self.available_margin * (self.risk_percent / 100)
        price_diff = abs(entry_price - stop_loss_price)
        
        if price_diff > 0:
            qty = risk_amount / price_diff
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º (85% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞)
            max_qty = (self.available_margin * 0.85) / entry_price
            qty = min(qty, max_qty)
            return max(qty, 0.001)  # –ú–∏–Ω–∏–º—É–º 0.001
        else:
            return 0.001
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        self.log(f"=== OPENING LONG POSITION ===")
        
        entry_price = self.close
        stop_loss_price = entry_price * (1 - self.stop_loss_percent / 100)
        take_profit_price = entry_price * (1 + self.take_profit_percent / 100)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.buy = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
        self.entry_price = entry_price
        self.entry_bar = self.index
        self.position_type = 'LONG'
        self.last_trade_bar = self.index
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        risk_amount = qty * (entry_price - stop_loss_price)
        potential_profit = qty * (take_profit_price - entry_price)
        
        self.log(f"Size: {qty:.4f} BTC")
        self.log(f"Entry: ${entry_price:.2f}")
        self.log(f"Stop Loss: ${stop_loss_price:.2f} (-{self.stop_loss_percent}%)")
        self.log(f"Take Profit: ${take_profit_price:.2f} (+{self.take_profit_percent}%)")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"RSI: {self.rsi:.1f}")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        self.log(f"=== OPENING SHORT POSITION ===")
        
        entry_price = self.close
        stop_loss_price = entry_price * (1 + self.stop_loss_percent / 100)
        take_profit_price = entry_price * (1 - self.take_profit_percent / 100)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.sell = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
        self.entry_price = entry_price
        self.entry_bar = self.index
        self.position_type = 'SHORT'
        self.last_trade_bar = self.index
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        risk_amount = qty * (stop_loss_price - entry_price)
        potential_profit = qty * (entry_price - take_profit_price)
        
        self.log(f"Size: {qty:.4f} BTC")
        self.log(f"Entry: ${entry_price:.2f}")
        self.log(f"Stop Loss: ${stop_loss_price:.2f} (+{self.stop_loss_percent}%)")
        self.log(f"Take Profit: ${take_profit_price:.2f} (-{self.take_profit_percent}%)")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"RSI: {self.rsi:.1f}")
    
    def update_position(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π"""
        if not self.position.is_open:
            return
        
        current_rsi = self.rsi
        should_close = False
        close_reason = ""
        
        # === –í–´–•–û–î –ü–û RSI ===
        if self.position_type == 'LONG':
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
            if current_rsi >= self.overbought_level:
                should_close = True
                close_reason = f"RSI overbought: {current_rsi:.1f}"
                
        elif self.position_type == 'SHORT':
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º SHORT –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
            if current_rsi <= self.oversold_level:
                should_close = True
                close_reason = f"RSI oversold: {current_rsi:.1f}"
        
        # === –í–´–•–û–î –ü–û –í–†–ï–ú–ï–ù–ò ===
        if self.entry_bar and (self.index - self.entry_bar) >= self.max_holding_hours:
            should_close = True
            close_reason = f"Max time: {self.max_holding_hours}h"
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        if should_close:
            self.liquidate()
            self.log(f"üö™ Position closed: {close_reason}")
            self.log(f"Final P&L: ${self.position.pnl:.2f}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —É–±—ã—Ç–∫–æ–≤
            if self.position.pnl < 0:
                self.consecutive_losses += 1
                self.log(f"‚ö†Ô∏è  Consecutive losses: {self.consecutive_losses}")
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç—Ä–µ–Ω–¥–∞ –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤
                if self.consecutive_losses >= 3:
                    self.use_trend_filter = False
                    self.log("üîÑ Trend filter disabled temporarily")
            else:
                self.consecutive_losses = 0
                self.use_trend_filter = True  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ñ–∏–ª—å—Ç—Ä
                self.log("‚úÖ Profitable trade! Reset loss counter")
                
            self._reset_position_tracking()
    
    def _reset_position_tracking(self):
        """–°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.entry_price = None
        self.entry_bar = None
        self.position_type = None
    
    def on_open_position(self, order):
        """–°–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.log(f"‚úÖ Position opened: {order.qty:.4f} @ ${order.price:.2f}")
        self.log(f"Available margin: ${self.available_margin:.2f}")
    
    def on_close_position(self, order):
        """–°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.log(f"üîö Position closed @ ${order.price:.2f}")
        self.log(f"Total P&L: ${self.position.pnl:.2f}")
        self.log(f"RSI at exit: {self.rsi:.1f}")
        self._reset_position_tracking()
    
    def before(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)"""
        if self.index % 24 == 0 and self.index >= max(self.rsi_period, self.sma_period):
            current_rsi = self.rsi
            trend_direction = "üìà" if self.close > self.sma else "üìâ"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            if current_rsi <= self.oversold_level:
                market_state = "OVERSOLD üü¢"
            elif current_rsi >= self.overbought_level:
                market_state = "OVERBOUGHT üî¥"
            else:
                market_state = "NEUTRAL ‚ö™"
            
            self.log(f"üìä Day {self.index//24}: RSI={current_rsi:.1f} {trend_direction} | {market_state}")
            self.log(f"Price: ${self.close:.2f} | Losses: {self.consecutive_losses}")
            
            if self.position.is_open:
                hours_held = self.index - self.entry_bar if self.entry_bar else 0
                self.log(f"üéØ {self.position_type}: {hours_held}h | P&L: ${self.position.pnl:.2f}")
