# strategies/TestSignalStrategy/__init__.py
from enhanced_strategy_base import EnhancedStrategy
import jesse.indicators as ta


class TestSignalStrategy(EnhancedStrategy):
    """
    –¢–ï–°–¢–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–ò–ì–ù–ê–õ–û–í
    
    –¶–µ–ª—å: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
    –¢–∞–π–º—Ñ—Ä–µ–π–º: 1 –º–∏–Ω—É—Ç–∞
    –õ–æ–≥–∏–∫–∞: –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤
    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ü—Ä–æ–≤–µ—Ä–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    
    def __init__(self):
        super().__init__()
        
        # === –ü–†–û–°–¢–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
        self.min_price_change = 0.01    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ % (0.01% = $4 –¥–ª—è BTC $40k)
        self.signal_counter = 0         # –°—á–µ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.last_signal_price = None   # –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        self.alternate_direction = True # –ß–µ—Ä–µ–¥—É–µ–º LONG/SHORT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞) ===
        self.risk_percent = 0.1         # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∏—Å–∫ 0.1%
        self.quick_exit_bars = 3        # –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
        
        # === –ö–û–ù–¢–†–û–õ–¨ –ß–ê–°–¢–û–¢–´ ===
        self.max_signals_per_hour = 30  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å
        self.min_gap_bars = 2           # –ú–∏–Ω–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        self.last_signal_bar = None
        
        self.log(f"üß™ === TEST SIGNAL STRATEGY INITIALIZED ===")
        self.log(f"‚è±Ô∏è  Timeframe: 1 minute")
        self.log(f"üéØ Min price change: {self.min_price_change}%")
        self.log(f"ü§ñ AI analysis: {'‚úÖ ENABLED' if self.enable_ai_analysis else '‚ùå DISABLED'}")
        self.log(f"üì± Telegram: {'‚úÖ ENABLED' if self.enable_notifications else '‚ùå DISABLED'}")
        self.log(f"üîÑ Ready to generate test signals every minute!")

    def _has_price_changed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        if self.index < 1:  # –ù—É–∂–Ω–∞ –º–∏–Ω–∏–º—É–º 1 –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞
            return False
        
        current_price = self.close
        previous_price = self.candles[-2, 4]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
        
        price_change_percent = abs(current_price - previous_price) / previous_price * 100
        
        return price_change_percent >= self.min_price_change
    
    def _can_generate_signal(self):
        """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
        if self.index < 2:
            return False
        
        # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if self.position.is_open:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        if (self.last_signal_bar is not None and 
            (self.index - self.last_signal_bar) < self.min_gap_bars):
            return False
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã (–Ω–µ –±–æ–ª—å—à–µ 30 –≤ —á–∞—Å = –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)
        if self.signal_counter > 0 and self.signal_counter % self.max_signals_per_hour == 0:
            self.log(f"‚è∏Ô∏è  –ü–∞—É–∑–∞: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {self.max_signals_per_hour} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∞—Å")
            return False
        
        return True
    
    def _get_signal_direction(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        current_price = self.close
        previous_price = self.candles[-2, 4]
        
        # –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ª–æ–≥–∏–∫–∏:
        
        # 1. –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        if current_price > previous_price:
            return "LONG"  # –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç - –ø–æ–∫—É–ø–∞–µ–º
        else:
            return "SHORT"  # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç - –ø—Ä–æ–¥–∞–µ–º
        
        # 2. –ò–ª–∏ —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # self.alternate_direction = not self.alternate_direction
        # return "LONG" if self.alternate_direction else "SHORT"

    def should_long(self) -> bool:
        """
        –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–∞:
        1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        2. –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        3. –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —á—Ç–æ –Ω—É–∂–µ–Ω LONG
        """
        if not self._can_generate_signal():
            return False
        
        if not self._has_price_changed():
            return False
        
        signal_direction = self._get_signal_direction()
        
        if signal_direction == "LONG":
            current_price = self.close
            previous_price = self.candles[-2, 4]
            price_change = (current_price - previous_price) / previous_price * 100
            
            self.signal_counter += 1
            self.last_signal_price = current_price
            
            self.log(f"üü¢ TEST LONG SIGNAL #{self.signal_counter}")
            self.log(f"   Price: ${previous_price:.2f} ‚Üí ${current_price:.2f} (+{price_change:.3f}%)")
            self.log(f"   Reason: Price increased, testing LONG signal")
            self.log(f"   Bar: {self.index} | Time gap: {(self.index - self.last_signal_bar) if self.last_signal_bar else 'N/A'} bars")
            
            self.entry_reason = f"TEST_PRICE_UP_{price_change:.3f}%"
            return True
        
        return False
    
    def should_short(self) -> bool:
        """
        –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–∞:
        1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã  
        2. –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        3. –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —á—Ç–æ –Ω—É–∂–µ–Ω SHORT
        """
        if not self._can_generate_signal():
            return False
        
        if not self._has_price_changed():
            return False
        
        signal_direction = self._get_signal_direction()
        
        if signal_direction == "SHORT":
            current_price = self.close
            previous_price = self.candles[-2, 4]
            price_change = (current_price - previous_price) / previous_price * 100
            
            self.signal_counter += 1
            self.last_signal_price = current_price
            
            self.log(f"üî¥ TEST SHORT SIGNAL #{self.signal_counter}")
            self.log(f"   Price: ${previous_price:.2f} ‚Üí ${current_price:.2f} ({price_change:.3f}%)")
            self.log(f"   Reason: Price decreased, testing SHORT signal")
            self.log(f"   Bar: {self.index} | Time gap: {(self.index - self.last_signal_bar) if self.last_signal_bar else 'N/A'} bars")
            
            self.entry_reason = f"TEST_PRICE_DOWN_{price_change:.3f}%"
            return True
        
        return False
    
    def should_cancel_entry(self) -> bool:
        return False
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é LONG –ø–æ–∑–∏—Ü–∏—é"""
        entry_price = self.close
        
        # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        stop_loss_price = entry_price * 0.998   # -0.2%
        take_profit_price = entry_price * 1.004  # +0.4%
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        qty = 0.001  # 0.001 BTC = –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.buy = qty, entry_price
        self.stop_loss = qty, stop_loss_price  
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_signal_bar = self.index
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        self.log(f"üöÄ === TEST LONG OPENED ===")
        self.log(f"Signal #{self.signal_counter} | Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty} BTC @ ${entry_price:.2f}")
        self.log(f"SL: ${stop_loss_price:.2f} (-0.2%) | TP: ${take_profit_price:.2f} (+0.4%)")
        self.log(f"Quick exit in {self.quick_exit_bars} bars ({self.quick_exit_bars} minutes)")
        
        if self.enable_ai_analysis:
            self.log("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
        else:
            self.log("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –û–¢–ö–õ–Æ–ß–ï–ù - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é SHORT –ø–æ–∑–∏—Ü–∏—é"""
        entry_price = self.close
        
        # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        stop_loss_price = entry_price * 1.002   # +0.2%
        take_profit_price = entry_price * 0.996  # -0.4%
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        qty = 0.001  # 0.001 BTC = –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.sell = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_signal_bar = self.index
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        self.log(f"üîª === TEST SHORT OPENED ===")
        self.log(f"Signal #{self.signal_counter} | Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty} BTC @ ${entry_price:.2f}")
        self.log(f"SL: ${stop_loss_price:.2f} (+0.2%) | TP: ${take_profit_price:.2f} (-0.4%)")
        self.log(f"Quick exit in {self.quick_exit_bars} bars ({self.quick_exit_bars} minutes)")
        
        if self.enable_ai_analysis:
            self.log("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
        else:
            self.log("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –û–¢–ö–õ–Æ–ß–ï–ù - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
    
    def update_position(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π"""
        if not self.position.is_open:
            return
        
        # –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        position_age = self.index - self.last_signal_bar if self.last_signal_bar else 0
        
        if position_age >= self.quick_exit_bars:
            self.liquidate()
            self.log(f"‚è∞ TEST EXIT: Position closed after {position_age} minutes")
            self.log(f"P&L: ${self.position.pnl:.4f} (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
    
    def on_close_position(self, order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        pnl = self.position.pnl
        
        self.log(f"üèÅ TEST POSITION CLOSED")
        self.log(f"   Exit price: ${order.price:.2f}")
        self.log(f"   P&L: ${pnl:.4f}")
        self.log(f"   Signal #{self.signal_counter} completed")
        self.log(f"   Ready for next test signal...")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if hasattr(self, 'entry_reason'):
            delattr(self, 'entry_reason')
    
    def before(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
        if self.index % 10 == 0 and self.index > 0:
            current_price = self.close
            price_change_10m = 0
            
            if self.index >= 10:
                price_10m_ago = self.candles[-10, 4]
                price_change_10m = (current_price - price_10m_ago) / price_10m_ago * 100
            
            self.log(f"üìä TEST MONITOR (Bar {self.index}):")
            self.log(f"   Current price: ${current_price:.2f}")
            self.log(f"   Change 10m: {price_change_10m:+.3f}%")
            self.log(f"   Signals generated: {self.signal_counter}")
            self.log(f"   Position: {'üü¢ OPEN' if self.position.is_open else '‚ö™ CLOSED'}")
            
            if self.position.is_open:
                position_age = self.index - self.last_signal_bar if self.last_signal_bar else 0
                self.log(f"   Position age: {position_age} minutes | P&L: ${self.position.pnl:.4f}")
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∞ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã)
    def _get_current_indicators(self):
        """–ü—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
        if self.index < 2:
            return {}
        
        current_price = self.close
        previous_price = self.candles[-2, 4]
        price_change = (current_price - previous_price) / previous_price * 100
        
        return {
            'current_price': current_price,
            'previous_price': previous_price,
            'price_change_1m': price_change,
            'signal_counter': self.signal_counter,
            'test_strategy': True
        }
