# strategies/TestSignalStrategy/__init__.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from jesse.strategies import Strategy
import jesse.indicators as ta
import logging


class TestSignalStrategy(Strategy):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    
    –ò–∑–º–µ–Ω–µ–Ω–∏—è:
    - –£–≤–µ–ª–∏—á–µ–Ω min_price_change –¥–æ 0.05%
    - –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ 0.01 BTC
    - –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    - –£–±—Ä–∞–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∏–∑ EnhancedStrategy
    """
    
    def __init__(self):
        super().__init__()
        
        # === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
        self.min_price_change = 0.05        # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.01% –¥–æ 0.05%
        self.signal_counter = 0
        self.last_signal_price = None
        
        # === –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò ===
        self.position_size = 0.01           # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.001 –¥–æ 0.01 BTC
        
        # === –ö–û–ù–¢–†–û–õ–¨ –ß–ê–°–¢–û–¢–´ ===
        self.max_signals_per_hour = 10      # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.min_gap_bars = 5               # –£–≤–µ–ª–∏—á–µ–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–æ 5 –º–∏–Ω—É—Ç
        self.last_signal_bar = None
        
        logging.info(f"üß™ TEST STRATEGY INITIALIZED (FIXED VERSION)")
        logging.info(f"‚è±Ô∏è  Timeframe: 1 minute")
        logging.info(f"üéØ Min price change: {self.min_price_change}%")
        logging.info(f"üí∞ Position size: {self.position_size} BTC")

    def _has_sufficient_price_change(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        if self.index < 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–≤–µ—á–∏
            return False
        
        current_price = self.close
        previous_price = self.candles[-2, 4]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
        
        if previous_price <= 0:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            return False
        
        price_change_percent = abs(current_price - previous_price) / previous_price * 100
        
        return price_change_percent >= self.min_price_change
    
    def _can_generate_signal(self):
        """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
        if self.index < 5:  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 5 —Å–≤–µ—á–µ–π
            return False
        
        # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if self.position.is_open:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        if (self.last_signal_bar is not None and 
            (self.index - self.last_signal_bar) < self.min_gap_bars):
            return False
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        if self.signal_counter >= self.max_signals_per_hour:
            if self.index % 60 == 0:  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
                self.signal_counter = 0
                logging.info("üîÑ –°—á–µ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω")
            else:
                return False
        
        return True
    
    def _get_signal_direction(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        current_price = self.close
        previous_price = self.candles[-2, 4]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–∏ —Ä–æ—Å—Ç–µ, –ø—Ä–æ–¥–∞–µ–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
        if current_price > previous_price:
            return "LONG"
        else:
            return "SHORT"

    def should_long(self) -> bool:
        """–£—Å–ª–æ–≤–∏—è –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–∞"""
        if not self._can_generate_signal():
            return False
        
        if not self._has_sufficient_price_change():
            return False
        
        signal_direction = self._get_signal_direction()
        
        if signal_direction == "LONG":
            current_price = self.close
            previous_price = self.candles[-2, 4]
            price_change = (current_price - previous_price) / previous_price * 100
            
            self.signal_counter += 1
            self.last_signal_price = current_price
            self.last_signal_bar = self.index
            
            logging.info(f"üü¢ LONG SIGNAL #{self.signal_counter}")
            logging.info(f"   Price: ${previous_price:.2f} ‚Üí ${current_price:.2f} (+{price_change:.3f}%)")
            logging.info(f"   Bar: {self.index}")
            
            return True
        
        return False
    
    def should_short(self) -> bool:
        """–£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–∞"""
        if not self._can_generate_signal():
            return False
        
        if not self._has_sufficient_price_change():
            return False
        
        signal_direction = self._get_signal_direction()
        
        if signal_direction == "SHORT":
            current_price = self.close
            previous_price = self.candles[-2, 4]
            price_change = (current_price - previous_price) / previous_price * 100
            
            self.signal_counter += 1
            self.last_signal_price = current_price
            self.last_signal_bar = self.index
            
            logging.info(f"üî¥ SHORT SIGNAL #{self.signal_counter}")
            logging.info(f"   Price: ${previous_price:.2f} ‚Üí ${current_price:.2f} ({price_change:.3f}%)")
            logging.info(f"   Bar: {self.index}")
            
            return True
        
        return False
    
    def should_cancel_entry(self) -> bool:
        """–û—Ç–º–µ–Ω—è–µ–º –ª–∏ –≤—Ö–æ–¥ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
        return False
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        entry_price = self.close
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        stop_loss_percent = 0.5    # 0.5% —Å—Ç–æ–ø-–ª–æ—Å—Å
        take_profit_percent = 1.0   # 1.0% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        
        stop_loss_price = entry_price * (1 - stop_loss_percent / 100)
        take_profit_price = entry_price * (1 + take_profit_percent / 100)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º self.buy –Ω–∞–ø—Ä—è–º—É—é
        self.buy = self.position_size, entry_price
        self.stop_loss = self.position_size, stop_loss_price
        self.take_profit = self.position_size, take_profit_price
        
        logging.info(f"üöÄ LONG POSITION OPENED")
        logging.info(f"   Size: {self.position_size} BTC @ ${entry_price:.2f}")
        logging.info(f"   SL: ${stop_loss_price:.2f} (-{stop_loss_percent}%)")
        logging.info(f"   TP: ${take_profit_price:.2f} (+{take_profit_percent}%)")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        entry_price = self.close
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è SHORT
        stop_loss_percent = 0.5    # 0.5% —Å—Ç–æ–ø-–ª–æ—Å—Å
        take_profit_percent = 1.0   # 1.0% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        
        stop_loss_price = entry_price * (1 + stop_loss_percent / 100)
        take_profit_price = entry_price * (1 - take_profit_percent / 100)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º self.sell –Ω–∞–ø—Ä—è–º—É—é
        self.sell = self.position_size, entry_price
        self.stop_loss = self.position_size, stop_loss_price
        self.take_profit = self.position_size, take_profit_price
        
        logging.info(f"üîª SHORT POSITION OPENED")
        logging.info(f"   Size: {self.position_size} BTC @ ${entry_price:.2f}")
        logging.info(f"   SL: ${stop_loss_price:.2f} (+{stop_loss_percent}%)")
        logging.info(f"   TP: ${take_profit_price:.2f} (-{take_profit_percent}%)")
    
    def update_position(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è –±—É–¥—É—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π)"""
        pass
    
    def on_close_position(self, order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        if hasattr(self, 'position') and self.position:
            pnl = self.position.pnl
            logging.info(f"üèÅ POSITION CLOSED")
            logging.info(f"   Exit price: ${order.price:.2f}")
            logging.info(f"   P&L: ${pnl:.4f}")
    
    def before(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç"""
        if self.index % 15 == 0 and self.index > 0:
            current_price = self.close
            
            logging.info(f"üìä MONITOR (Bar {self.index}):")
            logging.info(f"   Current price: ${current_price:.2f}")
            logging.info(f"   Signals generated: {self.signal_counter}")
            logging.info(f"   Position: {'üü¢ OPEN' if self.position.is_open else '‚ö™ CLOSED'}")
            
            if self.position.is_open:
                position_age = self.index - self.last_signal_bar if self.last_signal_bar else 0
                logging.info(f"   Position age: {position_age} minutes | P&L: ${self.position.pnl:.4f}")
