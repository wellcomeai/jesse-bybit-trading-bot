# strategies/TrendRider/__init__.py
from jesse.strategies import Strategy
import jesse.indicators as ta
import numpy as np


class TrendRider(Strategy):
    """
    TREND RIDER - –ü—Ä–æ–¥—É–º–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    
    –§–∏–ª–æ—Å–æ—Ñ–∏—è: "–¢—Ä–µ–Ω–¥ —Ç–≤–æ–π –¥—Ä—É–≥ –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞"
    –õ–æ–≥–∏–∫–∞: –ü–æ–∫—É–ø–∞–µ–º –æ—Ç–∫–∞—Ç—ã –≤ —Ä–∞—Å—Ç—É—â–µ–º —Ç—Ä–µ–Ω–¥–µ, –ø—Ä–æ–¥–∞–µ–º –æ—Ç—Å–∫–æ–∫–∏ –≤ –ø–∞–¥–∞—é—â–µ–º
    
    –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –¢–æ—Ä–≥—É–µ–º –¢–û–õ–¨–ö–û –ø–æ —Ç—Ä–µ–Ω–¥—É (–Ω–∏–∫–æ–≥–¥–∞ –ø—Ä–æ—Ç–∏–≤)
    2. EMA200 - –≥–ª–∞–≤–Ω—ã–π –∞—Ä–±–∏—Ç—Ä —Ç—Ä–µ–Ω–¥–∞
    3. –í—Ö–æ–¥—ã –Ω–∞ –æ—Ç–∫–∞—Ç–∞—Ö –∫ EMA50
    4. –°—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
    5. –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    """
    
    def __init__(self):
        super().__init__()
        
        # === –¢–†–ï–ù–î–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
        self.ema_fast = 21          # –ë—ã—Å—Ç—Ä–∞—è EMA –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.ema_medium = 50        # –°—Ä–µ–¥–Ω—è—è EMA –¥–ª—è –≤—Ö–æ–¥–æ–≤
        self.ema_trend = 200        # –ì–õ–ê–í–ù–´–ô —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞
        self.rsi_period = 14        # RSI –¥–ª—è –æ—Ç–∫–∞—Ç–æ–≤
        self.atr_period = 20        # ATR –¥–ª—è —Å—Ç–æ–ø–æ–≤
        self.volume_ma_period = 20  # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
        
        # === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–†–ï–ù–î–ê ===
        self.trend_strength_min = 1.0      # –ú–∏–Ω–∏–º—É–º 1% —Ü–µ–Ω–∞ –æ—Ç EMA200
        self.ema_alignment_min = 0.5       # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É EMA
        self.trend_confirmation_bars = 5   # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –±–∞—Ä–∞—Ö
        
        # === –£–°–õ–û–í–ò–Ø –í–•–û–î–ê (–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï) ===
        self.rsi_oversold_bull = 35        # RSI –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ
        self.rsi_overbought_bear = 65      # RSI –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ
        self.rsi_extreme_bull = 25         # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
        self.rsi_extreme_bear = 75         # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
        self.min_volume_ratio = 1.2        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º
        self.volume_spike_ratio = 2.0      # –í—Å–ø–ª–µ—Å–∫ –æ–±—ä—ë–º–∞
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò ===
        self.risk_percent = 0.8            # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∏—Å–∫
        self.atr_stop_multiplier = 2.0     # –°—Ç–æ–ø = 2x ATR
        self.profit_target_ratio = 2.5     # –ü—Ä–æ—Ñ–∏—Ç = 2.5x —Ä–∏—Å–∫ (1:2.5)
        self.max_holding_hours = 48        # –ú–∞–∫—Å–∏–º—É–º 48 —á–∞—Å–æ–≤
        
        # === –ö–û–ù–¢–†–û–õ–¨ –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
        self.max_daily_trades = 2          # –ú–∞–∫—Å–∏–º—É–º 2 —Å–¥–µ–ª–∫–∏ –≤ –¥–µ–Ω—å
        self.min_gap_hours = 6             # –ú–∏–Ω–∏–º—É–º 6 —á–∞—Å–æ–≤ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏  
        self.max_consecutive_losses = 3    # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ 3 —É–±—ã—Ç–∫–æ–≤
        
        # === –§–ò–õ–¨–¢–†–´ –ö–ê–ß–ï–°–¢–í–ê ===
        self.min_candle_body = 0.4         # –ú–∏–Ω–∏–º—É–º 0.4% —Ä–∞–∑–º–µ—Ä —Å–≤–µ—á–∏
        self.avoid_weekend_trades = True   # –ò–∑–±–µ–≥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        self.require_trend_momentum = True  # –¢—Ä–µ–±–æ–≤–∞—Ç—å –∏–º–ø—É–ª—å—Å —Ç—Ä–µ–Ω–¥–∞
        
        # === –°–û–°–¢–û–Ø–ù–ò–ï ===
        self.entry_bar = None
        self.position_type = None
        self.daily_trades_count = 0
        self.last_day = None
        self.last_trade_bar = None
        self.consecutive_losses = 0
        self.current_trend = "NEUTRAL"     # BULL, BEAR, NEUTRAL
        self.trend_strength = 0
        
        self.log(f"=== TREND RIDER INITIALIZED ===")
        self.log(f"Philosophy: Trend is your friend!")
        self.log(f"EMA Trend Filter: {self.ema_trend}")
        self.log(f"Risk: {self.risk_percent}% | R:R = 1:{self.profit_target_ratio}")
        self.log(f"Max daily trades: {self.max_daily_trades}")

    # === –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
    @property
    def ema21(self):
        return ta.ema(self.candles, period=self.ema_fast)
    
    @property
    def ema50(self):
        return ta.ema(self.candles, period=self.ema_medium)
    
    @property
    def ema200(self):
        return ta.ema(self.candles, period=self.ema_trend)
    
    @property
    def rsi(self):
        return ta.rsi(self.candles, period=self.rsi_period)
    
    @property
    def atr(self):
        return ta.atr(self.candles, period=self.atr_period)
    
    @property
    def volume_ma(self):
        return ta.sma(self.candles[:, 5], period=self.volume_ma_period)
    
    @property
    def current_volume(self):
        return self.candles[-1, 5]
    
    # === –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê (–ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê) ===
    def _analyze_trend(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥ –∏ –µ–≥–æ —Å–∏–ª—É"""
        if self.index < self.ema_trend + 10:
            self.current_trend = "NEUTRAL"
            self.trend_strength = 0
            return
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç EMA200
        price_vs_ema200 = (self.close - self.ema200) / self.ema200 * 100
        
        # –ü–æ—Ä—è–¥–æ–∫ EMA
        ema_bull_alignment = self.ema21 > self.ema50 > self.ema200
        ema_bear_alignment = self.ema21 < self.ema50 < self.ema200
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–∞—Ä–∞—Ö
        trend_confirmed = self._confirm_trend_direction()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if (price_vs_ema200 > self.trend_strength_min and 
            ema_bull_alignment and trend_confirmed):
            self.current_trend = "BULL"
            self.trend_strength = min(abs(price_vs_ema200), 10)  # –ú–∞–∫—Å 10%
        elif (price_vs_ema200 < -self.trend_strength_min and 
              ema_bear_alignment and trend_confirmed):
            self.current_trend = "BEAR" 
            self.trend_strength = min(abs(price_vs_ema200), 10)
        else:
            self.current_trend = "NEUTRAL"
            self.trend_strength = 0
    
    def _confirm_trend_direction(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∞—Ä–∞—Ö"""
        if self.index < self.trend_confirmation_bars:
            return False
        
        bull_bars = 0
        bear_bars = 0
        
        for i in range(self.trend_confirmation_bars):
            if i == 0:
                close_price = self.close
                ema200_value = self.ema200
            else:
                close_price = self.candles[-i-1, 4]
                past_candles = self.candles[:-i] if i > 0 else self.candles
                ema200_value = ta.ema(past_candles, period=self.ema_trend)
            
            if close_price > ema200_value:
                bull_bars += 1
            else:
                bear_bars += 1
        
        # –¢—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –µ—Å–ª–∏ 80%+ –±–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        confirmation_threshold = int(self.trend_confirmation_bars * 0.8)
        return bull_bars >= confirmation_threshold or bear_bars >= confirmation_threshold
    
    def _is_pullback_to_ema50(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞—Ç –∫ EMA50"""
        distance_to_ema50 = abs(self.close - self.ema50) / self.close * 100
        return distance_to_ema50 < 1.0  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1% –æ—Ç EMA50
    
    def _has_trend_momentum(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø—É–ª—å—Å —Ç—Ä–µ–Ω–¥–∞"""
        if not self.require_trend_momentum:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
        if self.index < 3:
            return False
        
        recent_closes = [
            self.candles[-3, 4],  # 3 —Å–≤–µ—á–∏ –Ω–∞–∑–∞–¥
            self.candles[-2, 4],  # 2 —Å–≤–µ—á–∏ –Ω–∞–∑–∞–¥  
            self.close            # –¢–µ–∫—É—â–∞—è
        ]
        
        if self.current_trend == "BULL":
            # –í –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ –∏—â–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞
            return recent_closes[2] > recent_closes[0]
        elif self.current_trend == "BEAR":
            # –í –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ –∏—â–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–∏—è
            return recent_closes[2] < recent_closes[0]
        
        return False
    
    def _update_daily_counter(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        current_day = self.index // 24  # 24 —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ = 1 –¥–µ–Ω—å
        if self.last_day != current_day:
            if self.daily_trades_count > 0:
                self.log(f"üìÖ Day {current_day}: {self.daily_trades_count} trades | Trend: {self.current_trend}")
            self.daily_trades_count = 0
            self.last_day = current_day
    
    def _has_quality_volume(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—ä—ë–º–∞"""
        base_volume = self.current_volume > (self.volume_ma * self.min_volume_ratio)
        volume_spike = self.current_volume > (self.volume_ma * self.volume_spike_ratio)
        return base_volume or volume_spike
    
    def _is_strong_candle(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–≤–µ—á–∏"""
        body_percent = abs(self.close - self.open) / self.open * 100
        return body_percent >= self.min_candle_body
    
    def _can_trade(self):
        """–ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self._update_daily_counter()
        self._analyze_trend()
        
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if self.index < self.ema_trend + 20:
            return False
        
        # –¢–æ–ª—å–∫–æ –≤ —Ç—Ä–µ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ
        if self.current_trend == "NEUTRAL":
            return False
        
        # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
        if self.position.is_open:
            return False
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if self.daily_trades_count >= self.max_daily_trades:
            return False
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥
        if self.consecutive_losses >= self.max_consecutive_losses:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if (self.last_trade_bar is not None and 
            (self.index - self.last_trade_bar) < self.min_gap_hours):
            return False
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—ä—ë–º–∞ –∏ —Å–≤–µ—á–∏
        if not self._has_quality_volume() or not self._is_strong_candle():
            return False
        
        return True

    # === –¢–†–ï–ù–î–û–í–´–ï –£–°–õ–û–í–ò–Ø –í–•–û–î–ê ===
    def should_long(self) -> bool:
        """
        LONG —Ç–æ–ª—å–∫–æ –≤ –ë–´–ß–¨–ï–ú —Ç—Ä–µ–Ω–¥–µ:
        
        1. –¶–µ–Ω–∞ –≤—ã—à–µ EMA200 (–≥–ª–∞–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ!)
        2. EMA21 > EMA50 > EMA200 (–ø–æ—Ä—è–¥–æ–∫ EMA)
        3. RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–∞—Ç (25-40)
        4. –û—Ç–∫–∞—Ç –∫ EMA50 (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1%)
        5. –ò–º–ø—É–ª—å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        6. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—ä—ë–º
        """
        if not self._can_trade():
            return False
        
        # –ö–†–ò–¢–ò–ß–ù–û: —Ç–æ–ª—å–∫–æ –≤ –±—ã—á—å–µ–º —Ç—Ä–µ–Ω–¥–µ!
        if self.current_trend != "BULL":
            return False
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        rsi_in_pullback = (self.rsi_extreme_bull <= self.rsi <= self.rsi_oversold_bull)
        near_ema50 = self._is_pullback_to_ema50()
        has_momentum = self._has_trend_momentum()
        green_candle = self.close > self.open
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
        strong_trend = self.trend_strength >= 2.0  # –ú–∏–Ω–∏–º—É–º 2% –æ—Ç EMA200
        
        if rsi_in_pullback and near_ema50 and has_momentum and green_candle and strong_trend:
            self.log(f"üöÄ LONG: Bull Trend Pullback")
            self.log(f"   Price: ${self.close:.2f} vs EMA200: ${self.ema200:.2f}")
            self.log(f"   RSI: {self.rsi:.1f} | Trend Strength: {self.trend_strength:.1f}%")
            self.log(f"   EMA50 Distance: {abs(self.close - self.ema50)/self.close*100:.2f}%")
            self.entry_reason = "BULL_PULLBACK"
            return True
        
        return False
    
    def should_short(self) -> bool:
        """
        SHORT —Ç–æ–ª—å–∫–æ –≤ –ú–ï–î–í–ï–ñ–¨–ï–ú —Ç—Ä–µ–Ω–¥–µ:
        
        1. –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA200 (–≥–ª–∞–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ!)
        2. EMA21 < EMA50 < EMA200 (–ø–æ—Ä—è–¥–æ–∫ EMA)
        3. RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Å–∫–æ–∫ (60-75)
        4. –û—Ç—Å–∫–æ–∫ –∫ EMA50 (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1%)
        5. –ò–º–ø—É–ª—å—Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–∞–¥–µ–Ω–∏—è
        6. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—ä—ë–º
        """
        if not self._can_trade():
            return False
        
        # –ö–†–ò–¢–ò–ß–ù–û: —Ç–æ–ª—å–∫–æ –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ!
        if self.current_trend != "BEAR":
            return False
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        rsi_in_bounce = (self.rsi_overbought_bear <= self.rsi <= self.rsi_extreme_bear)
        near_ema50 = self._is_pullback_to_ema50()
        has_momentum = self._has_trend_momentum()
        red_candle = self.close < self.open
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
        strong_trend = self.trend_strength >= 2.0
        
        if rsi_in_bounce and near_ema50 and has_momentum and red_candle and strong_trend:
            self.log(f"üêª SHORT: Bear Trend Bounce")
            self.log(f"   Price: ${self.close:.2f} vs EMA200: ${self.ema200:.2f}")
            self.log(f"   RSI: {self.rsi:.1f} | Trend Strength: {self.trend_strength:.1f}%")
            self.log(f"   EMA50 Distance: {abs(self.close - self.ema50)/self.close*100:.2f}%")
            self.entry_reason = "BEAR_BOUNCE"
            return True
        
        return False
    
    def should_cancel_entry(self) -> bool:
        return False
    
    # === –¢–†–ï–ù–î–û–í–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
    def _calculate_position_size(self, entry_price, stop_loss_price):
        """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        base_risk = self.available_margin * (self.risk_percent / 100)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
        trend_multiplier = 1.0 + (self.trend_strength / 20)  # –ú–∞–∫—Å +50%
        risk_amount = base_risk * min(trend_multiplier, 1.5)
        
        price_diff = abs(entry_price - stop_loss_price)
        
        if price_diff > 0:
            qty = risk_amount / price_diff
            max_qty = (self.available_margin * 0.7) / entry_price
            return min(qty, max_qty, 0.1)
        else:
            return 0.001
    
    def go_long(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π LONG –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å –ø–æ ATR
        atr_stop = self.atr * self.atr_stop_multiplier
        stop_loss_price = entry_price - atr_stop
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        risk_distance = entry_price - stop_loss_price
        take_profit_price = entry_price + (risk_distance * self.profit_target_ratio)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.buy = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'LONG'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        risk_amount = qty * risk_distance
        potential_profit = qty * (take_profit_price - entry_price)
        
        self.log(f"=== TREND LONG #{self.daily_trades_count} ===")
        self.log(f"Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty:.4f} @ ${entry_price:.2f}")
        self.log(f"Stop: ${stop_loss_price:.2f} | Take: ${take_profit_price:.2f}")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"ATR: ${self.atr:.2f} | Trend: {self.current_trend} ({self.trend_strength:.1f}%)")
    
    def go_short(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π SHORT –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = self.close
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å –ø–æ ATR
        atr_stop = self.atr * self.atr_stop_multiplier
        stop_loss_price = entry_price + atr_stop
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        risk_distance = stop_loss_price - entry_price
        take_profit_price = entry_price - (risk_distance * self.profit_target_ratio)
        
        qty = self._calculate_position_size(entry_price, stop_loss_price)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
        self.sell = qty, entry_price
        self.stop_loss = qty, stop_loss_price
        self.take_profit = qty, take_profit_price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.entry_bar = self.index
        self.position_type = 'SHORT'
        self.last_trade_bar = self.index
        self.daily_trades_count += 1
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        risk_amount = qty * risk_distance
        potential_profit = qty * (entry_price - take_profit_price)
        
        self.log(f"=== TREND SHORT #{self.daily_trades_count} ===")
        self.log(f"Reason: {getattr(self, 'entry_reason', 'UNKNOWN')}")
        self.log(f"Size: {qty:.4f} @ ${entry_price:.2f}")
        self.log(f"Stop: ${stop_loss_price:.2f} | Take: ${take_profit_price:.2f}")
        self.log(f"Risk: ${risk_amount:.2f} | Potential: ${potential_profit:.2f}")
        self.log(f"ATR: ${self.atr:.2f} | Trend: {self.current_trend} ({self.trend_strength:.1f}%)")
    
    def update_position(self):
        """–¢—Ä–µ–Ω–¥–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π"""
        if not self.position.is_open:
            return
        
        self._analyze_trend()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if self.position_type == 'LONG' and self.current_trend != "BULL":
            self.liquidate()
            self.log(f"üîÑ LONG closed: Trend changed to {self.current_trend}")
            self.log(f"P&L: ${self.position.pnl:.2f}")
            self._reset_position()
            return
        
        if self.position_type == 'SHORT' and self.current_trend != "BEAR":
            self.liquidate()
            self.log(f"üîÑ SHORT closed: Trend changed to {self.current_trend}")
            self.log(f"P&L: ${self.position.pnl:.2f}")
            self._reset_position()
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if self.entry_bar and (self.index - self.entry_bar) >= self.max_holding_hours:
            self.liquidate()
            self.log(f"‚è∞ Time exit after {self.max_holding_hours} hours")
            self.log(f"P&L: ${self.position.pnl:.2f}")
            self._reset_position()
    
    def _reset_position(self):
        """–°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏"""
        self.entry_bar = None
        self.position_type = None
        if hasattr(self, 'entry_reason'):
            delattr(self, 'entry_reason')
    
    def on_close_position(self, order):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        pnl = self.position.pnl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —É–±—ã—Ç–∫–æ–≤
        if pnl < 0:
            self.consecutive_losses += 1
            self.log(f"‚ùå Trend Loss: ${pnl:.2f} | Consecutive: {self.consecutive_losses}")
        else:
            self.consecutive_losses = 0
            self.log(f"‚úÖ Trend Profit: ${pnl:.2f} | Reset losses")
        
        self.log(f"üèÅ Closed @ ${order.price:.2f} | Daily: {self.daily_trades_count}/{self.max_daily_trades}")
        self._reset_position()
    
    def before(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–Ω–¥–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"""
        if self.index % 6 == 0 and self.index >= self.ema_trend + 20:
            self._analyze_trend()
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
            trend_emoji = {"BULL": "üöÄ", "BEAR": "üêª", "NEUTRAL": "üò¥"}
            
            # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA200
            distance_to_trend = (self.close - self.ema200) / self.ema200 * 100
            
            # –û–±—ä—ë–º
            vol_ratio = self.current_volume / self.volume_ma if self.volume_ma > 0 else 1
            vol_emoji = "üîä" if vol_ratio > 2 else "üîâ" if vol_ratio > 1.2 else "üîá"
            
            self.log(f"üìä Hour {self.index}: ${self.close:.2f}")
            self.log(f"   Trend: {self.current_trend} {trend_emoji[self.current_trend]} ({self.trend_strength:.1f}%)")
            self.log(f"   EMA200: ${self.ema200:.2f} ({distance_to_trend:+.1f}%)")
            self.log(f"   RSI: {self.rsi:.1f} {vol_emoji} | Trades: {self.daily_trades_count}/2 | L: {self.consecutive_losses}")
            
            if self.position.is_open:
                hours_held = self.index - self.entry_bar if self.entry_bar else 0
                self.log(f"   Position: {self.position_type} {hours_held}h | P&L: ${self.position.pnl:.2f}")
