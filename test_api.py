# enhanced_test_api.py
import os
import requests
import time
import hmac
import hashlib

def test_bybit_symbols():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ Bybit testnet"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ Bybit testnet...")
    
    try:
        # –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ API –∫–ª—é—á–µ–π)
        response = requests.get(
            'https://api-testnet.bybit.com/v5/market/instruments-info?category=linear&limit=10',
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data['retCode'] == 0:
                symbols = [item['symbol'] for item in data['result']['list']]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
                print(f"üìù –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
                
                if 'BTCUSDT' in symbols:
                    print("‚úÖ BTCUSDT –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Bybit testnet!")
                else:
                    print("‚ùå BTCUSDT –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data['retMsg']}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def test_api_authentication():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é API –∫–ª—é—á–µ–π"""
    api_key = os.getenv('BYBIT_USDT_PERPETUAL_TESTNET_API_KEY')
    api_secret = os.getenv('BYBIT_USDT_PERPETUAL_TESTNET_API_SECRET')
    
    print(f"\nüîë –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏...")
    print(f"API Key –¥–ª–∏–Ω–∞: {len(api_key) if api_key else 0} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"API Secret –¥–ª–∏–Ω–∞: {len(api_secret) if api_secret else 0} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if not api_key or not api_secret:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
        
    if len(api_key) < 20:
        print("‚ö†Ô∏è API –∫–ª—é—á –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 20+ —Å–∏–º–≤–æ–ª–æ–≤)")
        
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    try:
        timestamp = str(int(time.time() * 1000))
        recv_window = "5000"
        
        param_str = f"{timestamp}{api_key}{recv_window}"
        signature = hmac.new(
            api_secret.encode('utf-8'),
            param_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        headers = {
            'X-BAPI-API-KEY': api_key,
            'X-BAPI-TIMESTAMP': timestamp,
            'X-BAPI-RECV-WINDOW': recv_window,
            'X-BAPI-SIGN': signature
        }
        
        response = requests.get(
            'https://api-testnet.bybit.com/v5/account/wallet-balance?accountType=UNIFIED',
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data['retCode'] == 0:
                print("‚úÖ API –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                print(f"üìä –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã: {data['result']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data['retMsg']} (–∫–æ–¥: {data['retCode']})")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    test_bybit_symbols()
    test_api_authentication()
