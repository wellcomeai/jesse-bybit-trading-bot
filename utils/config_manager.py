# utils/config_manager.py
import os
import logging
from typing import Optional, Dict, Any
from dataclasses import dataclass


@dataclass
class AIConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
    enabled: bool = False
    openai_api_key: Optional[str] = None
    openai_model: str = 'gpt-4'
    analysis_timeout: int = 30
    max_retries: int = 3
    min_analysis_gap: int = 300  # —Å–µ–∫—É–Ω–¥


@dataclass
class TelegramConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram"""
    enabled: bool = False
    bot_token: Optional[str] = None
    chat_id: Optional[str] = None
    max_message_length: int = 4096
    retry_attempts: int = 3


@dataclass
class TradingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    enable_ai_validation: bool = False
    min_ai_confidence: int = 60
    require_ai_approval: bool = False
    ai_veto_trades: bool = True  # –ò–ò –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É


class ConfigManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self._load_config()
        self._validate_config()
        logging.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        
        # AI Configuration
        self.ai = AIConfig(
            enabled=self._get_bool_env('AI_ANALYSIS_ENABLED', False),
            openai_api_key=os.getenv('OPENAI_API_KEY'),
            openai_model=os.getenv('OPENAI_MODEL', 'gpt-4'),
            analysis_timeout=self._get_int_env('AI_ANALYSIS_TIMEOUT', 30),
            max_retries=self._get_int_env('AI_MAX_RETRIES', 3),
            min_analysis_gap=self._get_int_env('AI_MIN_ANALYSIS_GAP', 300)
        )
        
        # Telegram Configuration
        self.telegram = TelegramConfig(
            enabled=self._get_bool_env('TELEGRAM_ENABLED', False),
            bot_token=os.getenv('TELEGRAM_BOT_TOKEN'),
            chat_id=os.getenv('TELEGRAM_CHAT_ID'),
            max_message_length=self._get_int_env('TELEGRAM_MAX_MESSAGE_LENGTH', 4096),
            retry_attempts=self._get_int_env('TELEGRAM_RETRY_ATTEMPTS', 3)
        )
        
        # Trading Configuration
        self.trading = TradingConfig(
            enable_ai_validation=self._get_bool_env('ENABLE_AI_VALIDATION', False),
            min_ai_confidence=self._get_int_env('MIN_AI_CONFIDENCE', 60),
            require_ai_approval=self._get_bool_env('REQUIRE_AI_APPROVAL', False),
            ai_veto_trades=self._get_bool_env('AI_VETO_TRADES', True)
        )
    
    def _validate_config(self):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.ai.enabled:
            if not self.ai.openai_api_key:
                errors.append("AI –≤–∫–ª—é—á–µ–Ω, –Ω–æ OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            if self.ai.analysis_timeout < 10:
                logging.warning("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏  
        if self.telegram.enabled:
            if not self.telegram.bot_token:
                errors.append("Telegram –≤–∫–ª—é—á–µ–Ω, –Ω–æ TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            if not self.telegram.chat_id:
                errors.append("Telegram –≤–∫–ª—é—á–µ–Ω, –Ω–æ TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.trading.min_ai_confidence < 0 or self.trading.min_ai_confidence > 100:
            errors.append("MIN_AI_CONFIDENCE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
        
        if errors:
            error_message = "‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(f"  ‚Ä¢ {e}" for e in errors)
            logging.error(error_message)
            raise ValueError(error_message)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if not self.ai.enabled:
            logging.warning("‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω")
        
        if not self.telegram.enabled:
            logging.warning("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    def _get_bool_env(self, key: str, default: bool = False) -> bool:
        """–ü–æ–ª—É—á–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = os.getenv(key, str(default)).lower()
        return value in ('true', '1', 'yes', 'on', 'enabled')
    
    def _get_int_env(self, key: str, default: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            return int(os.getenv(key, str(default)))
        except (ValueError, TypeError):
            logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {key}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
            return default
    
    def _get_float_env(self, key: str, default: float) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            return float(os.getenv(key, str(default)))
        except (ValueError, TypeError):
            logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {key}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
            return default
    
    @property
    def ai_analysis_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ò–ò –∞–Ω–∞–ª–∏–∑"""
        return self.ai.enabled and bool(self.ai.openai_api_key)
    
    @property
    def telegram_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return self.telegram.enabled and bool(self.telegram.bot_token) and bool(self.telegram.chat_id)
    
    def get_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            'ai_analysis': {
                'enabled': self.ai_analysis_enabled,
                'model': self.ai.openai_model if self.ai_analysis_enabled else 'N/A',
                'timeout': self.ai.analysis_timeout
            },
            'telegram': {
                'enabled': self.telegram_enabled,
                'chat_configured': bool(self.telegram.chat_id)
            },
            'trading': {
                'ai_validation': self.trading.enable_ai_validation,
                'min_confidence': self.trading.min_ai_confidence,
                'ai_approval_required': self.trading.require_ai_approval,
                'ai_can_veto': self.trading.ai_veto_trades
            }
        }
    
    def log_summary(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        summary = self.get_summary()
        
        logging.info("üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´:")
        logging.info(f"  ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if summary['ai_analysis']['enabled'] else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù'}")
        if summary['ai_analysis']['enabled']:
            logging.info(f"    ‚Ä¢ –ú–æ–¥–µ–ª—å: {summary['ai_analysis']['model']}")
            logging.info(f"    ‚Ä¢ –¢–∞–π–º–∞—É—Ç: {summary['ai_analysis']['timeout']}—Å")
        
        logging.info(f"  üì± Telegram: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if summary['telegram']['enabled'] else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù'}")
        
        logging.info(f"  üéØ –¢–æ—Ä–≥–æ–≤–ª—è:")
        logging.info(f"    ‚Ä¢ –ò–ò –≤–∞–ª–∏–¥–∞—Ü–∏—è: {'‚úÖ' if summary['trading']['ai_validation'] else '‚ùå'}")
        logging.info(f"    ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {summary['trading']['min_confidence']}%")
        logging.info(f"    ‚Ä¢ –ò–ò –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å: {'‚úÖ' if summary['trading']['ai_can_veto'] else '‚ùå'}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = ConfigManager()
