# utils/signal_publisher.py
"""
–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, webhooks –∏ —Ç.–¥.
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List
import aiohttp


class SignalPublisher:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤–æ –≤–Ω–µ—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.webhooks: List[str] = []
        self.session: Optional[aiohttp.ClientSession] = None
        self.enabled = False
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._load_config()
        
        if self.enabled:
            logging.info("üì° Signal Publisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import os
        
        # Webhook URLs (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π)
        webhook_urls = os.getenv('SIGNAL_WEBHOOKS', '')
        if webhook_urls:
            self.webhooks = [url.strip() for url in webhook_urls.split(',') if url.strip()]
        
        self.enabled = len(self.webhooks) > 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.timeout = int(os.getenv('SIGNAL_TIMEOUT', '10'))
        self.max_retries = int(os.getenv('SIGNAL_MAX_RETRIES', '3'))
    
    async def publish_signal(self, signal_data: Dict[str, Any], ai_analysis: Optional[Dict[str, Any]] = None) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ
            ai_analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enabled:
            return True  # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            payload = self._prepare_payload(signal_data, ai_analysis)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ webhooks
            success_count = 0
            
            for webhook_url in self.webhooks:
                if await self._send_to_webhook(webhook_url, payload):
                    success_count += 1
            
            # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω webhook —Å—Ä–∞–±–æ—Ç–∞–ª
            success = success_count > 0
            
            if success:
                logging.info(f"üì° –°–∏–≥–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ ({success_count}/{len(self.webhooks)} webhooks)")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∏ –≤ –æ–¥–∏–Ω webhook")
            
            return success
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def _prepare_payload(self, signal_data: Dict[str, Any], ai_analysis: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        payload = {
            'timestamp': datetime.now().isoformat(),
            'signal': {
                'strategy': signal_data.get('strategy', 'Unknown'),
                'type': signal_data.get('signal_type', 'Unknown'),
                'symbol': signal_data.get('symbol', 'Unknown'),
                'price': signal_data.get('price', 0),
                'exchange': signal_data.get('exchange', 'Unknown'),
                'timeframe': signal_data.get('timeframe', 'Unknown'),
                'reason': signal_data.get('reason', 'Unknown')
            },
            'indicators': signal_data.get('indicators', {}),
            'source': 'AI_Trading_Bot',
            'version': '1.0.0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if ai_analysis:
            payload['ai_analysis'] = {
                'recommendation': ai_analysis.get('recommendation', 'UNKNOWN'),
                'confidence': ai_analysis.get('confidence', 0),
                'risk_level': ai_analysis.get('risk_level', 'UNKNOWN'),
                'summary': ai_analysis.get('summary', ''),
                'key_factors': ai_analysis.get('key_factors', {}),
                'target_zones': ai_analysis.get('target_zones', {})
            }
        
        return payload
    
    async def _send_to_webhook(self, webhook_url: str, payload: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π webhook
        """
        for attempt in range(self.max_retries):
            try:
                if not self.session:
                    self.session = aiohttp.ClientSession()
                
                async with self.session.post(
                    webhook_url,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=self.timeout),
                    headers={
                        'Content-Type': 'application/json',
                        'User-Agent': 'AI-Trading-Bot/1.0'
                    }
                ) as response:
                    
                    if response.status == 200:
                        logging.debug(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ: {webhook_url}")
                        return True
                    else:
                        logging.warning(f"‚ö†Ô∏è Webhook –≤–µ—Ä–Ω—É–ª {response.status}: {webhook_url}")
                        
            except asyncio.TimeoutError:
                logging.warning(f"‚è∞ Timeout webhook (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {webhook_url}")
                
            except Exception as e:
                logging.warning(f"‚ùå –û—à–∏–±–∫–∞ webhook (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {webhook_url} - {e}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt < self.max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        return False
    
    async def publish_trade_result(self, trade_result: Dict[str, Any]) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
        """
        if not self.enabled:
            return True
        
        try:
            payload = {
                'timestamp': datetime.now().isoformat(),
                'trade_result': {
                    'symbol': trade_result.get('symbol', 'Unknown'),
                    'strategy': trade_result.get('strategy', 'Unknown'),
                    'entry_price': trade_result.get('entry_price', 0),
                    'exit_price': trade_result.get('exit_price', 0),
                    'pnl': trade_result.get('pnl', 0),
                    'duration': trade_result.get('duration', 0),
                    'result': 'PROFIT' if trade_result.get('pnl', 0) > 0 else 'LOSS'
                },
                'source': 'AI_Trading_Bot',
                'version': '1.0.0'
            }
            
            success_count = 0
            for webhook_url in self.webhooks:
                if await self._send_to_webhook(webhook_url, payload):
                    success_count += 1
            
            return success_count > 0
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏: {e}")
            return False
    
    async def close(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        if self.session:
            await self.session.close()
            self.session = None
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        await self.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
signal_publisher = SignalPublisher()
